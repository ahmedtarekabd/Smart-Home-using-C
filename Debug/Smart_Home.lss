
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ee  00800060  00005b58  00005bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080034e  0080034e  00005eda  2**0
                  ALLOC
  3 .stab         00007788  00000000  00000000  00005edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003bc4  00000000  00000000  0000d664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000113e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000115fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00013c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000150dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000163e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000168cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000172e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e3       	ldi	r26, 0x34	; 52
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 29 	jmp	0x522e	; 0x522e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 29 	jmp	0x522e	; 0x522e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 28 	jmp	0x51ee	; 0x51ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e3       	ldi	r22, 0x34	; 52
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 13 29 	jmp	0x5226	; 0x5226 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 17 29 	jmp	0x522e	; 0x522e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 17 29 	jmp	0x522e	; 0x522e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 17 29 	jmp	0x522e	; 0x522e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ff 28 	jmp	0x51fe	; 0x51fe <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f7 28 	jmp	0x51ee	; 0x51ee <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 13 29 	jmp	0x5226	; 0x5226 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e4 5c       	subi	r30, 0xC4	; 196
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <main>:
void setup();
void loop();


void main(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62


	LCD_init();
     ef2:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_init>

	setup();
     ef6:	0e 94 80 07 	call	0xf00	; 0xf00 <setup>
	while (1)
	{
		loop();
     efa:	0e 94 b0 07 	call	0xf60	; 0xf60 <loop>
     efe:	fd cf       	rjmp	.-6      	; 0xefa <main+0x10>

00000f00 <setup>:
	}

}

void setup()
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62

	Watchdog_OFF();
     f08:	0e 94 57 1d 	call	0x3aae	; 0x3aae <Watchdog_OFF>
	LCD_init();
     f0c:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_init>
	Keypad_keypadInit();
     f10:	0e 94 f6 16 	call	0x2dec	; 0x2dec <Keypad_keypadInit>
	EEPROM_Init();
     f14:	0e 94 4c 19 	call	0x3298	; 0x3298 <EEPROM_Init>
	HC05_Init();
     f18:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <HC05_Init>
	Buzzer_init();
     f1c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Buzzer_init>
	LM35_Init();
     f20:	0e 94 2c 11 	call	0x2258	; 0x2258 <LM35_Init>
	DCMotor_Init(DCMOTOR_1);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <DCMotor_Init>
	Door_Init();
     f2a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Door_Init>
	Relay_Init();
     f2e:	0e 94 94 10 	call	0x2128	; 0x2128 <Relay_Init>

	userType = login();
     f32:	0e 94 03 0c 	call	0x1806	; 0x1806 <login>
     f36:	80 93 5e 03 	sts	0x035E, r24
//	userType = '2';
	HC05_SendString("Enter command...\n");
     f3a:	80 e6       	ldi	r24, 0x60	; 96
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
	LCD_setAddressPosition(0, 0);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
	LCD_displayString("Enter command...");
     f4a:	82 e7       	ldi	r24, 0x72	; 114
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
	LCD_setAddressPosition(1, 0);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>

}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <loop>:

void loop()
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	29 97       	sbiw	r28, 0x09	; 9
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61


	// Get Command
	u8 command = '\0';
     f74:	19 82       	std	Y+1, r1	; 0x01

	// Admin Mode
	if (userType == '1')
     f76:	80 91 5e 03 	lds	r24, 0x035E
     f7a:	81 33       	cpi	r24, 0x31	; 49
     f7c:	09 f0       	breq	.+2      	; 0xf80 <loop+0x20>
     f7e:	61 c0       	rjmp	.+194    	; 0x1042 <loop+0xe2>
	{

//		HC05_ReceiveString(input, 2);
		command = HC05_ReceiveCharNonBlock();
     f80:	0e 94 1d 19 	call	0x323a	; 0x323a <HC05_ReceiveCharNonBlock>
     f84:	89 83       	std	Y+1, r24	; 0x01

		switch (command) {
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	39 87       	std	Y+9, r19	; 0x09
     f8e:	28 87       	std	Y+8, r18	; 0x08
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	84 33       	cpi	r24, 0x34	; 52
     f96:	91 05       	cpc	r25, r1
     f98:	89 f1       	breq	.+98     	; 0xffc <loop+0x9c>
     f9a:	28 85       	ldd	r18, Y+8	; 0x08
     f9c:	39 85       	ldd	r19, Y+9	; 0x09
     f9e:	25 33       	cpi	r18, 0x35	; 53
     fa0:	31 05       	cpc	r19, r1
     fa2:	84 f4       	brge	.+32     	; 0xfc4 <loop+0x64>
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	82 33       	cpi	r24, 0x32	; 50
     faa:	91 05       	cpc	r25, r1
     fac:	f9 f0       	breq	.+62     	; 0xfec <loop+0x8c>
     fae:	28 85       	ldd	r18, Y+8	; 0x08
     fb0:	39 85       	ldd	r19, Y+9	; 0x09
     fb2:	23 33       	cpi	r18, 0x33	; 51
     fb4:	31 05       	cpc	r19, r1
     fb6:	f4 f4       	brge	.+60     	; 0xff4 <loop+0x94>
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	81 33       	cpi	r24, 0x31	; 49
     fbe:	91 05       	cpc	r25, r1
     fc0:	89 f0       	breq	.+34     	; 0xfe4 <loop+0x84>
     fc2:	aa c0       	rjmp	.+340    	; 0x1118 <loop+0x1b8>
     fc4:	28 85       	ldd	r18, Y+8	; 0x08
     fc6:	39 85       	ldd	r19, Y+9	; 0x09
     fc8:	26 33       	cpi	r18, 0x36	; 54
     fca:	31 05       	cpc	r19, r1
     fcc:	f9 f0       	breq	.+62     	; 0x100c <loop+0xac>
     fce:	88 85       	ldd	r24, Y+8	; 0x08
     fd0:	99 85       	ldd	r25, Y+9	; 0x09
     fd2:	86 33       	cpi	r24, 0x36	; 54
     fd4:	91 05       	cpc	r25, r1
     fd6:	b4 f0       	brlt	.+44     	; 0x1004 <loop+0xa4>
     fd8:	28 85       	ldd	r18, Y+8	; 0x08
     fda:	39 85       	ldd	r19, Y+9	; 0x09
     fdc:	27 33       	cpi	r18, 0x37	; 55
     fde:	31 05       	cpc	r19, r1
     fe0:	69 f1       	breq	.+90     	; 0x103c <loop+0xdc>
     fe2:	9a c0       	rjmp	.+308    	; 0x1118 <loop+0x1b8>
			// 6 Lamps
			case '1':
				// Relay 1 On function
				Relay_toogle(Relay_1);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
     fea:	96 c0       	rjmp	.+300    	; 0x1118 <loop+0x1b8>
				break;
			case '2':
				// Relay 2 On function
				Relay_toogle(Relay_2);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
     ff2:	92 c0       	rjmp	.+292    	; 0x1118 <loop+0x1b8>
				break;
			case '3':
				// Relay 3 On function
				Relay_toogle(Relay_3);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
     ffa:	8e c0       	rjmp	.+284    	; 0x1118 <loop+0x1b8>
				break;
			case '4':
				// Relay 4 On function
				Relay_toogle(Relay_4);
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    1002:	8a c0       	rjmp	.+276    	; 0x1118 <loop+0x1b8>
				break;
			case '5':
				// Relay 5 On function
				Relay_toogle(Relay_5);
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    100a:	86 c0       	rjmp	.+268    	; 0x1118 <loop+0x1b8>
				break;
			case '6':

				// Relay 6 On function
				HC05_SendString("Enter percentage (0-100)...\n");
    100c:	83 e8       	ldi	r24, 0x83	; 131
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
				HC05_ReceiveString(dimmerLamp, 4);
    1014:	81 e6       	ldi	r24, 0x61	; 97
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	64 e0       	ldi	r22, 0x04	; 4
    101a:	0e 94 37 19 	call	0x326e	; 0x326e <HC05_ReceiveString>
				u8* nextToLastDigit;
				Relay_setDimmer(strtol(dimmerLamp, &nextToLastDigit, 10));
    101e:	81 e6       	ldi	r24, 0x61	; 97
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	9e 01       	movw	r18, r28
    1024:	2e 5f       	subi	r18, 0xFE	; 254
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	b9 01       	movw	r22, r18
    102a:	4a e0       	ldi	r20, 0x0A	; 10
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	0e 94 26 29 	call	0x524c	; 0x524c <strtol>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	0e 94 1c 11 	call	0x2238	; 0x2238 <Relay_setDimmer>
    103a:	6e c0       	rjmp	.+220    	; 0x1118 <loop+0x1b8>
				break;

			case '7':
				// switch servo
				Door_Toogle();
    103c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Door_Toogle>
    1040:	6b c0       	rjmp	.+214    	; 0x1118 <loop+0x1b8>

	// User Mode
	else
	{

		command = Keypad_getButton();
    1042:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    1046:	89 83       	std	Y+1, r24	; 0x01
//		input = Keypad_GetString(input, 2);

		switch (command) {
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3f 83       	std	Y+7, r19	; 0x07
    1050:	2e 83       	std	Y+6, r18	; 0x06
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	84 33       	cpi	r24, 0x34	; 52
    1058:	91 05       	cpc	r25, r1
    105a:	89 f1       	breq	.+98     	; 0x10be <loop+0x15e>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	25 33       	cpi	r18, 0x35	; 53
    1062:	31 05       	cpc	r19, r1
    1064:	84 f4       	brge	.+32     	; 0x1086 <loop+0x126>
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	9f 81       	ldd	r25, Y+7	; 0x07
    106a:	82 33       	cpi	r24, 0x32	; 50
    106c:	91 05       	cpc	r25, r1
    106e:	f9 f0       	breq	.+62     	; 0x10ae <loop+0x14e>
    1070:	2e 81       	ldd	r18, Y+6	; 0x06
    1072:	3f 81       	ldd	r19, Y+7	; 0x07
    1074:	23 33       	cpi	r18, 0x33	; 51
    1076:	31 05       	cpc	r19, r1
    1078:	f4 f4       	brge	.+60     	; 0x10b6 <loop+0x156>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	81 33       	cpi	r24, 0x31	; 49
    1080:	91 05       	cpc	r25, r1
    1082:	89 f0       	breq	.+34     	; 0x10a6 <loop+0x146>
    1084:	49 c0       	rjmp	.+146    	; 0x1118 <loop+0x1b8>
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	3f 81       	ldd	r19, Y+7	; 0x07
    108a:	26 33       	cpi	r18, 0x36	; 54
    108c:	31 05       	cpc	r19, r1
    108e:	f9 f0       	breq	.+62     	; 0x10ce <loop+0x16e>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	86 33       	cpi	r24, 0x36	; 54
    1096:	91 05       	cpc	r25, r1
    1098:	b4 f0       	brlt	.+44     	; 0x10c6 <loop+0x166>
    109a:	2e 81       	ldd	r18, Y+6	; 0x06
    109c:	3f 81       	ldd	r19, Y+7	; 0x07
    109e:	27 33       	cpi	r18, 0x37	; 55
    10a0:	31 05       	cpc	r19, r1
    10a2:	c1 f1       	breq	.+112    	; 0x1114 <loop+0x1b4>
    10a4:	39 c0       	rjmp	.+114    	; 0x1118 <loop+0x1b8>
			// 6 Lamps
			case '1':
				// Relay 1 On function
				Relay_toogle(Relay_1);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    10ac:	35 c0       	rjmp	.+106    	; 0x1118 <loop+0x1b8>
				break;
			case '2':
				// Relay 2 On function
				Relay_toogle(Relay_2);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    10b4:	31 c0       	rjmp	.+98     	; 0x1118 <loop+0x1b8>
				break;
			case '3':
				// Relay 3 On function
				Relay_toogle(Relay_3);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    10bc:	2d c0       	rjmp	.+90     	; 0x1118 <loop+0x1b8>
				break;
			case '4':
				// Relay 4 On function
				Relay_toogle(Relay_4);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    10c4:	29 c0       	rjmp	.+82     	; 0x1118 <loop+0x1b8>
				break;
			case '5':
				// Relay 5 On function
				Relay_toogle(Relay_5);
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Relay_toogle>
    10cc:	25 c0       	rjmp	.+74     	; 0x1118 <loop+0x1b8>
				break;
			case '6':

				// Relay 6 On function
				LCD_setAddressPosition(1, 0);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
				LCD_displayString("Enter from 0-100");
    10d6:	80 ea       	ldi	r24, 0xA0	; 160
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
				Keypad_GetString(dimmerLamp, 4);
    10de:	81 e6       	ldi	r24, 0x61	; 97
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	64 e0       	ldi	r22, 0x04	; 4
    10e4:	0e 94 b1 18 	call	0x3162	; 0x3162 <Keypad_GetString>
				u8* nextToLastDigit;
				Relay_setDimmer(strtol(dimmerLamp, &nextToLastDigit, 10));
    10e8:	81 e6       	ldi	r24, 0x61	; 97
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	9e 01       	movw	r18, r28
    10ee:	2c 5f       	subi	r18, 0xFC	; 252
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	b9 01       	movw	r22, r18
    10f4:	4a e0       	ldi	r20, 0x0A	; 10
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	0e 94 26 29 	call	0x524c	; 0x524c <strtol>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	0e 94 1c 11 	call	0x2238	; 0x2238 <Relay_setDimmer>
				LCD_ClearRow(1);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_ClearRow>
				LCD_setAddressPosition(1, 0);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <loop+0x1b8>
				break;

			case '7':
				// switch servo
				Door_Toogle();
    1114:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Door_Toogle>
		}


	}

	command = '\0';
    1118:	19 82       	std	Y+1, r1	; 0x01

	// AC -> Temp Sensor, DC Motor
	if (LM35_ReadTemperature() > 28)
    111a:	0e 94 3a 11 	call	0x2274	; 0x2274 <LM35_ReadTemperature>
    111e:	8d 31       	cpi	r24, 0x1D	; 29
    1120:	28 f0       	brcs	.+10     	; 0x112c <loop+0x1cc>
	{

		// Run dc motor
		DCMotor_Start(DCMOTOR_1, DCMOTOR_CLOCKWISE);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 40 1c 	call	0x3880	; 0x3880 <DCMotor_Start>
    112a:	07 c0       	rjmp	.+14     	; 0x113a <loop+0x1da>

	}
	else if (LM35_ReadTemperature() < 21)
    112c:	0e 94 3a 11 	call	0x2274	; 0x2274 <LM35_ReadTemperature>
    1130:	85 31       	cpi	r24, 0x15	; 21
    1132:	18 f4       	brcc	.+6      	; 0x113a <loop+0x1da>
	{

		// Stop DC motor
		DCMotor_Stop(DCMOTOR_1);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 b7 1c 	call	0x396e	; 0x396e <DCMotor_Stop>

	}

}
    113a:	29 96       	adiw	r28, 0x09	; 9
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <Reset>:
 */

#include "Login.h"

static void Reset()
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	2e 97       	sbiw	r28, 0x0e	; 14
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61

	Buzzer_turnOn();
    1160:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Buzzer_turnOn>
	HC05_SendString("The program will reset in 3 seconds.");
    1164:	81 eb       	ldi	r24, 0xB1	; 177
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
	LCD_ClearRow(LCD_ROW0);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_ClearRow>
	LCD_ClearRow(LCD_ROW1);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_ClearRow>
	LCD_setAddressPosition(0, 0);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
	LCD_displayString("reset in 3 secs");
    1180:	86 ed       	ldi	r24, 0xD6	; 214
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
	LCD_setAddressPosition(1, 0);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
	LCD_displayString("reset in 3 secs");
    1190:	86 ed       	ldi	r24, 0xD6	; 214
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	aa ef       	ldi	r26, 0xFA	; 250
    119e:	b4 e4       	ldi	r27, 0x44	; 68
    11a0:	8b 87       	std	Y+11, r24	; 0x0b
    11a2:	9c 87       	std	Y+12, r25	; 0x0c
    11a4:	ad 87       	std	Y+13, r26	; 0x0d
    11a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a e7       	ldi	r20, 0x7A	; 122
    11b6:	55 e4       	ldi	r21, 0x45	; 69
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8f 83       	std	Y+7, r24	; 0x07
    11c2:	98 87       	std	Y+8, r25	; 0x08
    11c4:	a9 87       	std	Y+9, r26	; 0x09
    11c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <Reset+0x9e>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <Reset+0x11c>
	else if (__tmp > 65535)
    11ea:	6f 81       	ldd	r22, Y+7	; 0x07
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <Reset+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	0f c0       	rjmp	.+30     	; 0x124a <Reset+0xfe>
    122c:	80 e9       	ldi	r24, 0x90	; 144
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <Reset+0xec>
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <Reset+0xe0>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <Reset+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <Reset+0x128>
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2000);
	// Reset
	Watchdog_ON();
    127c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <Watchdog_ON>

}
    1280:	2e 96       	adiw	r28, 0x0e	; 14
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <login_getNumberOfUsers>:

static u8 login_getNumberOfUsers()
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62

	return IEEPROM_Read(0);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 f5 23 	call	0x47ea	; 0x47ea <IEEPROM_Read>

}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <login_searchForUser>:

static s8 login_searchForUser(User* user)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	66 97       	sbiw	r28, 0x16	; 22
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	9d 8b       	std	Y+21, r25	; 0x15
    12be:	8c 8b       	std	Y+20, r24	; 0x14

	u8 numOfUsers = login_getNumberOfUsers();
    12c0:	0e 94 49 09 	call	0x1292	; 0x1292 <login_getNumberOfUsers>
    12c4:	8b 83       	std	Y+3, r24	; 0x03
	u8 username[USERNAME_SIZE];
	u8 password[PASSWORD_SIZE];

	for (u8 i = USER_DATA_BYTE, n = 0; i < MEMORY_SIZE && n < numOfUsers; i += USER_SIZE, n++)
    12c6:	88 e1       	ldi	r24, 0x18	; 24
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	19 82       	std	Y+1, r1	; 0x01
    12cc:	43 c0       	rjmp	.+134    	; 0x1354 <login_searchForUser+0xac>
	{

		IEEPROM_ReadString(i, username, USERNAME_SIZE);
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9e 01       	movw	r18, r28
    12d6:	2c 5f       	subi	r18, 0xFC	; 252
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	b9 01       	movw	r22, r18
    12dc:	48 e0       	ldi	r20, 0x08	; 8
    12de:	0e 94 3a 24 	call	0x4874	; 0x4874 <IEEPROM_ReadString>
		IEEPROM_ReadString(i + USERNAME_SIZE, password, PASSWORD_SIZE);
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	9e 01       	movw	r18, r28
    12ec:	24 5f       	subi	r18, 0xF4	; 244
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	b9 01       	movw	r22, r18
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	0e 94 3a 24 	call	0x4874	; 0x4874 <IEEPROM_ReadString>

		if ( strcmp(user->username, username) == 0 && strcmp(user->password, password) == 0)
    12f8:	8c 89       	ldd	r24, Y+20	; 0x14
    12fa:	9d 89       	ldd	r25, Y+21	; 0x15
    12fc:	9e 01       	movw	r18, r28
    12fe:	2c 5f       	subi	r18, 0xFC	; 252
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	b9 01       	movw	r22, r18
    1304:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	f1 f4       	brne	.+60     	; 0x1348 <login_searchForUser+0xa0>
    130c:	8c 89       	ldd	r24, Y+20	; 0x14
    130e:	9d 89       	ldd	r25, Y+21	; 0x15
    1310:	08 96       	adiw	r24, 0x08	; 8
    1312:	9e 01       	movw	r18, r28
    1314:	24 5f       	subi	r18, 0xF4	; 244
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	99 f4       	brne	.+38     	; 0x1348 <login_searchForUser+0xa0>
		{

			// User strcpy
			strcpy(authUser.username, username);
    1322:	85 e6       	ldi	r24, 0x65	; 101
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	9e 01       	movw	r18, r28
    1328:	2c 5f       	subi	r18, 0xFC	; 252
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	b9 01       	movw	r22, r18
    132e:	0e 94 6f 2a 	call	0x54de	; 0x54de <strcpy>
			strcpy(authUser.password, password);
    1332:	8d e6       	ldi	r24, 0x6D	; 109
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	9e 01       	movw	r18, r28
    1338:	24 5f       	subi	r18, 0xF4	; 244
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	b9 01       	movw	r22, r18
    133e:	0e 94 6f 2a 	call	0x54de	; 0x54de <strcpy>
			return i;
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	8e 8b       	std	Y+22, r24	; 0x16
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <login_searchForUser+0xba>

	u8 numOfUsers = login_getNumberOfUsers();
	u8 username[USERNAME_SIZE];
	u8 password[PASSWORD_SIZE];

	for (u8 i = USER_DATA_BYTE, n = 0; i < MEMORY_SIZE && n < numOfUsers; i += USER_SIZE, n++)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	80 5f       	subi	r24, 0xF0	; 240
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	99 81       	ldd	r25, Y+1	; 0x01
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	98 17       	cp	r25, r24
    135a:	08 f4       	brcc	.+2      	; 0x135e <login_searchForUser+0xb6>
    135c:	b8 cf       	rjmp	.-144    	; 0x12ce <login_searchForUser+0x26>

		}

	}

	return -1;
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	8e 8b       	std	Y+22, r24	; 0x16
    1362:	8e 89       	ldd	r24, Y+22	; 0x16

}
    1364:	66 96       	adiw	r28, 0x16	; 22
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <login_getUser>:

static User login_getUser()
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	ed 97       	sbiw	r28, 0x3d	; 61
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	98 af       	std	Y+56, r25	; 0x38
    138c:	8f ab       	std	Y+55, r24	; 0x37


	while (TRUE)
	{
		// Prompt for username
		HC05_SendString("Enter Username...\n");
    138e:	86 ee       	ldi	r24, 0xE6	; 230
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		HC05_ReceiveString(username, USERNAME_SIZE + 1);
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	69 e0       	ldi	r22, 0x09	; 9
    139c:	0e 94 37 19 	call	0x326e	; 0x326e <HC05_ReceiveString>

		// Valid size
		if (strlen(username) <= USERNAME_SIZE)
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <strlen>
    13a8:	89 30       	cpi	r24, 0x09	; 9
    13aa:	91 05       	cpc	r25, r1
    13ac:	50 f1       	brcs	.+84     	; 0x1402 <login_getUser+0x8c>
			break;

		snprintf(message, ERROR_MESSAGE_SIZE, "Username size is %d", USERNAME_SIZE);
    13ae:	8d b7       	in	r24, 0x3d	; 61
    13b0:	9e b7       	in	r25, 0x3e	; 62
    13b2:	08 97       	sbiw	r24, 0x08	; 8
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	9e bf       	out	0x3e, r25	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	8d bf       	out	0x3d, r24	; 61
    13be:	ed b7       	in	r30, 0x3d	; 61
    13c0:	fe b7       	in	r31, 0x3e	; 62
    13c2:	31 96       	adiw	r30, 0x01	; 1
    13c4:	ce 01       	movw	r24, r28
    13c6:	43 96       	adiw	r24, 0x13	; 19
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	84 e1       	ldi	r24, 0x14	; 20
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	93 83       	std	Z+3, r25	; 0x03
    13d2:	82 83       	std	Z+2, r24	; 0x02
    13d4:	89 ef       	ldi	r24, 0xF9	; 249
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	95 83       	std	Z+5, r25	; 0x05
    13da:	84 83       	std	Z+4, r24	; 0x04
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	97 83       	std	Z+7, r25	; 0x07
    13e2:	86 83       	std	Z+6, r24	; 0x06
    13e4:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <snprintf>
    13e8:	ed b7       	in	r30, 0x3d	; 61
    13ea:	fe b7       	in	r31, 0x3e	; 62
    13ec:	38 96       	adiw	r30, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	fe bf       	out	0x3e, r31	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	ed bf       	out	0x3d, r30	; 61
		HC05_SendString(message);
    13f8:	ce 01       	movw	r24, r28
    13fa:	43 96       	adiw	r24, 0x13	; 19
    13fc:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
    1400:	c6 cf       	rjmp	.-116    	; 0x138e <login_getUser+0x18>


	while (TRUE)
	{
		// Prompt for password
		HC05_SendString("Enter password...\n");
    1402:	8d e0       	ldi	r24, 0x0D	; 13
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		HC05_ReceiveString(password, PASSWORD_SIZE + 1);
    140a:	ce 01       	movw	r24, r28
    140c:	0a 96       	adiw	r24, 0x0a	; 10
    140e:	69 e0       	ldi	r22, 0x09	; 9
    1410:	0e 94 37 19 	call	0x326e	; 0x326e <HC05_ReceiveString>

		// Valid size
		if (strlen(password) <= PASSWORD_SIZE)
    1414:	ce 01       	movw	r24, r28
    1416:	0a 96       	adiw	r24, 0x0a	; 10
    1418:	0e 94 76 2a 	call	0x54ec	; 0x54ec <strlen>
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	91 05       	cpc	r25, r1
    1420:	70 f1       	brcs	.+92     	; 0x147e <login_getUser+0x108>
			break;

		snprintf(message, ERROR_MESSAGE_SIZE, "Password size is %d\n", PASSWORD_SIZE);
    1422:	8d b7       	in	r24, 0x3d	; 61
    1424:	9e b7       	in	r25, 0x3e	; 62
    1426:	08 97       	sbiw	r24, 0x08	; 8
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	9e bf       	out	0x3e, r25	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	8d bf       	out	0x3d, r24	; 61
    1432:	ed b7       	in	r30, 0x3d	; 61
    1434:	fe b7       	in	r31, 0x3e	; 62
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	ce 01       	movw	r24, r28
    143a:	43 96       	adiw	r24, 0x13	; 19
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	84 e1       	ldi	r24, 0x14	; 20
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	93 83       	std	Z+3, r25	; 0x03
    1446:	82 83       	std	Z+2, r24	; 0x02
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	95 83       	std	Z+5, r25	; 0x05
    144e:	84 83       	std	Z+4, r24	; 0x04
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	97 83       	std	Z+7, r25	; 0x07
    1456:	86 83       	std	Z+6, r24	; 0x06
    1458:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <snprintf>
    145c:	ed b7       	in	r30, 0x3d	; 61
    145e:	fe b7       	in	r31, 0x3e	; 62
    1460:	38 96       	adiw	r30, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	fe bf       	out	0x3e, r31	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	ed bf       	out	0x3d, r30	; 61
		HC05_SendString(message);
    146c:	ce 01       	movw	r24, r28
    146e:	43 96       	adiw	r24, 0x13	; 19
    1470:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		HC05_SendString("\n");
    1474:	85 e3       	ldi	r24, 0x35	; 53
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
    147c:	c2 cf       	rjmp	.-124    	; 0x1402 <login_getUser+0x8c>

	}

	User user;
	strcpy(user.username, username);
    147e:	ce 01       	movw	r24, r28
    1480:	87 96       	adiw	r24, 0x27	; 39
    1482:	9e 01       	movw	r18, r28
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	b9 01       	movw	r22, r18
    148a:	0e 94 6f 2a 	call	0x54de	; 0x54de <strcpy>
	strcpy(user.password, password);
    148e:	ce 01       	movw	r24, r28
    1490:	87 96       	adiw	r24, 0x27	; 39
    1492:	08 96       	adiw	r24, 0x08	; 8
    1494:	9e 01       	movw	r18, r28
    1496:	26 5f       	subi	r18, 0xF6	; 246
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	b9 01       	movw	r22, r18
    149c:	0e 94 6f 2a 	call	0x54de	; 0x54de <strcpy>

	return user;
    14a0:	8f a9       	ldd	r24, Y+55	; 0x37
    14a2:	98 ad       	ldd	r25, Y+56	; 0x38
    14a4:	9a af       	std	Y+58, r25	; 0x3a
    14a6:	89 af       	std	Y+57, r24	; 0x39
    14a8:	fe 01       	movw	r30, r28
    14aa:	b7 96       	adiw	r30, 0x27	; 39
    14ac:	fc af       	std	Y+60, r31	; 0x3c
    14ae:	eb af       	std	Y+59, r30	; 0x3b
    14b0:	f0 e1       	ldi	r31, 0x10	; 16
    14b2:	fd af       	std	Y+61, r31	; 0x3d
    14b4:	eb ad       	ldd	r30, Y+59	; 0x3b
    14b6:	fc ad       	ldd	r31, Y+60	; 0x3c
    14b8:	00 80       	ld	r0, Z
    14ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    14bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	9c af       	std	Y+60, r25	; 0x3c
    14c2:	8b af       	std	Y+59, r24	; 0x3b
    14c4:	e9 ad       	ldd	r30, Y+57	; 0x39
    14c6:	fa ad       	ldd	r31, Y+58	; 0x3a
    14c8:	00 82       	st	Z, r0
    14ca:	89 ad       	ldd	r24, Y+57	; 0x39
    14cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	9a af       	std	Y+58, r25	; 0x3a
    14d2:	89 af       	std	Y+57, r24	; 0x39
    14d4:	9d ad       	ldd	r25, Y+61	; 0x3d
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	9d af       	std	Y+61, r25	; 0x3d
    14da:	ed ad       	ldd	r30, Y+61	; 0x3d
    14dc:	ee 23       	and	r30, r30
    14de:	51 f7       	brne	.-44     	; 0x14b4 <login_getUser+0x13e>

}
    14e0:	8f a9       	ldd	r24, Y+55	; 0x37
    14e2:	98 ad       	ldd	r25, Y+56	; 0x38
    14e4:	ed 96       	adiw	r28, 0x3d	; 61
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <login_addUser>:

static boolean login_addUser()
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	62 97       	sbiw	r28, 0x12	; 18
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61

	u8 numOfUsers = login_getNumberOfUsers();
    150a:	0e 94 49 09 	call	0x1292	; 0x1292 <login_getNumberOfUsers>
    150e:	8a 83       	std	Y+2, r24	; 0x02
	u8 newUserAddress = USER_DATA_BYTE + USER_SIZE * numOfUsers;
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 95       	swap	r24
    1518:	92 95       	swap	r25
    151a:	90 7f       	andi	r25, 0xF0	; 240
    151c:	98 27       	eor	r25, r24
    151e:	80 7f       	andi	r24, 0xF0	; 240
    1520:	98 27       	eor	r25, r24
    1522:	88 5e       	subi	r24, 0xE8	; 232
    1524:	89 83       	std	Y+1, r24	; 0x01
		HC05_SendString("Memory is Full, Cannot add a new user.\n");
		return FALSE;
	}

	// Get user
	User user = login_getUser();
    1526:	ce 01       	movw	r24, r28
    1528:	03 96       	adiw	r24, 0x03	; 3
    152a:	0e 94 bb 09 	call	0x1376	; 0x1376 <login_getUser>

	// Add username
	IEEPROM_WriteString(newUserAddress, user.username);
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e 01       	movw	r18, r28
    1536:	2d 5f       	subi	r18, 0xFD	; 253
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	b9 01       	movw	r22, r18
    153c:	0e 94 05 24 	call	0x480a	; 0x480a <IEEPROM_WriteString>
	IEEPROM_WriteString(newUserAddress + USERNAME_SIZE, user.password);
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	08 96       	adiw	r24, 0x08	; 8
    1548:	ac 01       	movw	r20, r24
    154a:	ce 01       	movw	r24, r28
    154c:	03 96       	adiw	r24, 0x03	; 3
    154e:	9c 01       	movw	r18, r24
    1550:	28 5f       	subi	r18, 0xF8	; 248
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	ca 01       	movw	r24, r20
    1556:	b9 01       	movw	r22, r18
    1558:	0e 94 05 24 	call	0x480a	; 0x480a <IEEPROM_WriteString>

	IEEPROM_Write(0, numOfUsers + 1);
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	9c 01       	movw	r18, r24
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	b9 01       	movw	r22, r18
    156c:	0e 94 de 23 	call	0x47bc	; 0x47bc <IEEPROM_Write>

	HC05_SendString("User added Successfully\n");
    1570:	87 e3       	ldi	r24, 0x37	; 55
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>

	return TRUE;
    1578:	81 e0       	ldi	r24, 0x01	; 1

}
    157a:	62 96       	adiw	r28, 0x12	; 18
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <login_removeUser>:

static boolean login_removeUser()
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	64 97       	sbiw	r28, 0x14	; 20
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61

	// Check if there are existing users
	u8 numOfUsers = login_getNumberOfUsers();
    15a0:	0e 94 49 09 	call	0x1292	; 0x1292 <login_getNumberOfUsers>
    15a4:	8b 83       	std	Y+3, r24	; 0x03
	if (numOfUsers == 0)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 23       	and	r24, r24
    15aa:	31 f4       	brne	.+12     	; 0x15b8 <login_removeUser+0x2c>
	{
		// No user's exits
		HC05_SendString("No users registered. Add a user.\n");
    15ac:	80 e5       	ldi	r24, 0x50	; 80
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		return FALSE;
    15b4:	1c 8a       	std	Y+20, r1	; 0x14
    15b6:	61 c0       	rjmp	.+194    	; 0x167a <login_removeUser+0xee>
	}

	// Get user
	User user = login_getUser();
    15b8:	ce 01       	movw	r24, r28
    15ba:	04 96       	adiw	r24, 0x04	; 4
    15bc:	0e 94 bb 09 	call	0x1376	; 0x1376 <login_getUser>

	// Search for the user
	s8 userIndex = login_searchForUser(&user);
    15c0:	ce 01       	movw	r24, r28
    15c2:	04 96       	adiw	r24, 0x04	; 4
    15c4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <login_searchForUser>
    15c8:	8a 83       	std	Y+2, r24	; 0x02
	if (userIndex == -1)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	8f 3f       	cpi	r24, 0xFF	; 255
    15ce:	31 f4       	brne	.+12     	; 0x15dc <login_removeUser+0x50>
	{
		// User not found
		HC05_SendString("User not found.\n");
    15d0:	82 e7       	ldi	r24, 0x72	; 114
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		return FALSE;
    15d8:	1c 8a       	std	Y+20, r1	; 0x14
    15da:	4f c0       	rjmp	.+158    	; 0x167a <login_removeUser+0xee>
	}

	// Remove if exists -> replace it with the last registered user
	u8 lastUserAddress = USER_DATA_BYTE + USER_SIZE * numOfUsers - USER_SIZE;
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	89 83       	std	Y+1, r24	; 0x01

	// Get last user
	IEEPROM_ReadString(lastUserAddress, user.username, USERNAME_SIZE);
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9e 01       	movw	r18, r28
    15fe:	2c 5f       	subi	r18, 0xFC	; 252
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	b9 01       	movw	r22, r18
    1604:	48 e0       	ldi	r20, 0x08	; 8
    1606:	0e 94 3a 24 	call	0x4874	; 0x4874 <IEEPROM_ReadString>
	IEEPROM_ReadString(lastUserAddress + USERNAME_SIZE, user.password, USERNAME_SIZE);
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	08 96       	adiw	r24, 0x08	; 8
    1612:	ac 01       	movw	r20, r24
    1614:	ce 01       	movw	r24, r28
    1616:	04 96       	adiw	r24, 0x04	; 4
    1618:	9c 01       	movw	r18, r24
    161a:	28 5f       	subi	r18, 0xF8	; 248
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	ca 01       	movw	r24, r20
    1620:	b9 01       	movw	r22, r18
    1622:	48 e0       	ldi	r20, 0x08	; 8
    1624:	0e 94 3a 24 	call	0x4874	; 0x4874 <IEEPROM_ReadString>

	// Replace the last user with the user that should be removed
	IEEPROM_WriteString(userIndex, user.username);
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	99 27       	eor	r25, r25
    162c:	87 fd       	sbrc	r24, 7
    162e:	90 95       	com	r25
    1630:	9e 01       	movw	r18, r28
    1632:	2c 5f       	subi	r18, 0xFC	; 252
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	b9 01       	movw	r22, r18
    1638:	0e 94 05 24 	call	0x480a	; 0x480a <IEEPROM_WriteString>
	IEEPROM_WriteString(userIndex + USERNAME_SIZE, user.password);
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	99 27       	eor	r25, r25
    1640:	87 fd       	sbrc	r24, 7
    1642:	90 95       	com	r25
    1644:	08 96       	adiw	r24, 0x08	; 8
    1646:	ac 01       	movw	r20, r24
    1648:	ce 01       	movw	r24, r28
    164a:	04 96       	adiw	r24, 0x04	; 4
    164c:	9c 01       	movw	r18, r24
    164e:	28 5f       	subi	r18, 0xF8	; 248
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	ca 01       	movw	r24, r20
    1654:	b9 01       	movw	r22, r18
    1656:	0e 94 05 24 	call	0x480a	; 0x480a <IEEPROM_WriteString>

	// Decrease the number of users
	IEEPROM_Write(0, numOfUsers - 1);
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9c 01       	movw	r18, r24
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	b9 01       	movw	r22, r18
    166a:	0e 94 de 23 	call	0x47bc	; 0x47bc <IEEPROM_Write>

	HC05_SendString("User removed Successfully\n");
    166e:	83 e8       	ldi	r24, 0x83	; 131
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>

	return TRUE;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8c 8b       	std	Y+20, r24	; 0x14
    167a:	8c 89       	ldd	r24, Y+20	; 0x14

}
    167c:	64 96       	adiw	r28, 0x14	; 20
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <loginAdminMode>:

/*	Login/Register	*/
static void loginAdminMode()
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	6e 97       	sbiw	r28, 0x1e	; 30
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61

	u8 trials = 0;
    16a2:	1a 82       	std	Y+2, r1	; 0x02
	u8 successOp = TRUE;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01

	// No need to validate length because they are known
	u8 command[COMMAND_SIZE] = "";
    16a8:	1b 82       	std	Y+3, r1	; 0x03
    16aa:	1c 82       	std	Y+4, r1	; 0x04
    16ac:	1d 82       	std	Y+5, r1	; 0x05
    16ae:	1e 82       	std	Y+6, r1	; 0x06
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	fe 01       	movw	r30, r28
    16b4:	37 96       	adiw	r30, 0x07	; 7
    16b6:	df 01       	movw	r26, r30
    16b8:	98 2f       	mov	r25, r24
    16ba:	1d 92       	st	X+, r1
    16bc:	9a 95       	dec	r25
    16be:	e9 f7       	brne	.-6      	; 0x16ba <loginAdminMode+0x2c>
	 * To Remove a user: remove <username> <password>
	 * To Add a user: add <username> <password>
	 * To Login a user: login <username> <password>
	 * */

	HC05_SendString("Available Commands:\n remove\n add\n login\n");
    16c0:	8e e9       	ldi	r24, 0x9E	; 158
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>

	while (TRUE)
	{

		HC05_ReceiveString(command, COMMAND_SIZE);
    16c8:	ce 01       	movw	r24, r28
    16ca:	03 96       	adiw	r24, 0x03	; 3
    16cc:	67 e0       	ldi	r22, 0x07	; 7
    16ce:	0e 94 37 19 	call	0x326e	; 0x326e <HC05_ReceiveString>

		if ( strcmp(command, "remove") == 0 )
    16d2:	ce 01       	movw	r24, r28
    16d4:	03 96       	adiw	r24, 0x03	; 3
    16d6:	27 ec       	ldi	r18, 0xC7	; 199
    16d8:	31 e0       	ldi	r19, 0x01	; 1
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	19 f4       	brne	.+6      	; 0x16ea <loginAdminMode+0x5c>
		{

			// Call remove function
			login_removeUser();
    16e4:	0e 94 c6 0a 	call	0x158c	; 0x158c <login_removeUser>
    16e8:	44 c0       	rjmp	.+136    	; 0x1772 <loginAdminMode+0xe4>

		}
		else if ( strcmp(command, "add") == 0 )
    16ea:	ce 01       	movw	r24, r28
    16ec:	03 96       	adiw	r24, 0x03	; 3
    16ee:	2e ec       	ldi	r18, 0xCE	; 206
    16f0:	31 e0       	ldi	r19, 0x01	; 1
    16f2:	b9 01       	movw	r22, r18
    16f4:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	19 f4       	brne	.+6      	; 0x1702 <loginAdminMode+0x74>
		{

			// Call add function
			login_addUser();
    16fc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <login_addUser>
    1700:	38 c0       	rjmp	.+112    	; 0x1772 <loginAdminMode+0xe4>

		}
		else if ( strcmp(command, "login") == 0 )
    1702:	ce 01       	movw	r24, r28
    1704:	03 96       	adiw	r24, 0x03	; 3
    1706:	22 ed       	ldi	r18, 0xD2	; 210
    1708:	31 e0       	ldi	r19, 0x01	; 1
    170a:	b9 01       	movw	r22, r18
    170c:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	59 f5       	brne	.+86     	; 0x176a <loginAdminMode+0xdc>
		{

			// Call login function
			User user = login_getUser();
    1714:	ce 01       	movw	r24, r28
    1716:	0a 96       	adiw	r24, 0x0a	; 10
    1718:	0e 94 bb 09 	call	0x1376	; 0x1376 <login_getUser>

			// User found
			if (login_searchForUser(&user) != -1)
    171c:	ce 01       	movw	r24, r28
    171e:	0a 96       	adiw	r24, 0x0a	; 10
    1720:	0e 94 54 09 	call	0x12a8	; 0x12a8 <login_searchForUser>
    1724:	8f 3f       	cpi	r24, 0xFF	; 255
    1726:	29 f1       	breq	.+74     	; 0x1772 <loginAdminMode+0xe4>
			{
				authUser = user;
    1728:	a5 e6       	ldi	r26, 0x65	; 101
    172a:	b3 e0       	ldi	r27, 0x03	; 3
    172c:	bb 8f       	std	Y+27, r27	; 0x1b
    172e:	aa 8f       	std	Y+26, r26	; 0x1a
    1730:	fe 01       	movw	r30, r28
    1732:	3a 96       	adiw	r30, 0x0a	; 10
    1734:	fd 8f       	std	Y+29, r31	; 0x1d
    1736:	ec 8f       	std	Y+28, r30	; 0x1c
    1738:	f0 e1       	ldi	r31, 0x10	; 16
    173a:	fe 8f       	std	Y+30, r31	; 0x1e
    173c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    173e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1740:	0c 90       	ld	r0, X
    1742:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1744:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1746:	31 96       	adiw	r30, 0x01	; 1
    1748:	fd 8f       	std	Y+29, r31	; 0x1d
    174a:	ec 8f       	std	Y+28, r30	; 0x1c
    174c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    174e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1750:	0c 92       	st	X, r0
    1752:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1754:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1756:	31 96       	adiw	r30, 0x01	; 1
    1758:	fb 8f       	std	Y+27, r31	; 0x1b
    175a:	ea 8f       	std	Y+26, r30	; 0x1a
    175c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    175e:	f1 50       	subi	r31, 0x01	; 1
    1760:	fe 8f       	std	Y+30, r31	; 0x1e
    1762:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1764:	88 23       	and	r24, r24
    1766:	51 f7       	brne	.-44     	; 0x173c <loginAdminMode+0xae>
    1768:	0e c0       	rjmp	.+28     	; 0x1786 <loginAdminMode+0xf8>
			}

		}
		else
		{
			HC05_SendString("Invalid command\n");
    176a:	88 ed       	ldi	r24, 0xD8	; 216
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 26 19 	call	0x324c	; 0x324c <HC05_SendString>
		}
		strcpy(command, "");
    1772:	ce 01       	movw	r24, r28
    1774:	03 96       	adiw	r24, 0x03	; 3
    1776:	29 ee       	ldi	r18, 0xE9	; 233
    1778:	31 e0       	ldi	r19, 0x01	; 1
    177a:	b9 01       	movw	r22, r18
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <memcpy>
    1784:	a1 cf       	rjmp	.-190    	; 0x16c8 <loginAdminMode+0x3a>

	}

}
    1786:	6e 96       	adiw	r28, 0x1e	; 30
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <loginUserMode>:


/*	Login Only	*/
static void loginUserMode()
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	65 97       	sbiw	r28, 0x15	; 21
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61

	u8 trials = 0;
    17ac:	1a 82       	std	Y+2, r1	; 0x02
	u8 userFound = 0;
    17ae:	19 82       	std	Y+1, r1	; 0x01
    17b0:	1c c0       	rjmp	.+56     	; 0x17ea <loginUserMode+0x52>


	while (trials != MAX_LOGIN_TRIALS)
	{

		LCD_displayString("Enter Username...");
    17b2:	8a ee       	ldi	r24, 0xEA	; 234
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
		Keypad_GetString(user.username, USERNAME_SIZE);
    17ba:	ce 01       	movw	r24, r28
    17bc:	06 96       	adiw	r24, 0x06	; 6
    17be:	68 e0       	ldi	r22, 0x08	; 8
    17c0:	0e 94 b1 18 	call	0x3162	; 0x3162 <Keypad_GetString>
		LCD_displayString("Enter Password...");
    17c4:	8c ef       	ldi	r24, 0xFC	; 252
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
		Keypad_GetString(user.password, PASSWORD_SIZE);
    17cc:	ce 01       	movw	r24, r28
    17ce:	06 96       	adiw	r24, 0x06	; 6
    17d0:	08 96       	adiw	r24, 0x08	; 8
    17d2:	68 e0       	ldi	r22, 0x08	; 8
    17d4:	0e 94 b1 18 	call	0x3162	; 0x3162 <Keypad_GetString>

		// If user found
		if (login_searchForUser(&user))
    17d8:	ce 01       	movw	r24, r28
    17da:	06 96       	adiw	r24, 0x06	; 6
    17dc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <login_searchForUser>
    17e0:	88 23       	and	r24, r24
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <loginUserMode+0x5c>
		{
			return;
		}

		trials++;
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 response[3];

	User user;


	while (trials != MAX_LOGIN_TRIALS)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	09 f7       	brne	.-62     	; 0x17b2 <loginUserMode+0x1a>
		trials++;

	}

	// User not found for 3 attempts
	Reset();
    17f0:	0e 94 a6 08 	call	0x114c	; 0x114c <Reset>

}
    17f4:	65 96       	adiw	r28, 0x15	; 21
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <login>:

u8 login()
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	62 97       	sbiw	r28, 0x12	; 18
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61


	LCD_displayString("Admin: Use mobile");
    181a:	8e e0       	ldi	r24, 0x0E	; 14
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>
	LCD_setAddressPosition(1, 0);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
	LCD_displayString("User: Use Keypad");
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayString>

	u8 userType = '\0';
    1832:	19 8a       	std	Y+17, r1	; 0x11
	u8 keypad = KEYPAD_INVALID;
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	88 8b       	std	Y+16, r24	; 0x10
	u8 hc05 = '\0';
    1838:	1f 86       	std	Y+15, r1	; 0x0f
	while (TRUE)
	{

		keypad = Keypad_getButton();
    183a:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    183e:	88 8b       	std	Y+16, r24	; 0x10
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 ea       	ldi	r26, 0xA0	; 160
    1846:	b0 e4       	ldi	r27, 0x40	; 64
    1848:	8b 87       	std	Y+11, r24	; 0x0b
    184a:	9c 87       	std	Y+12, r25	; 0x0c
    184c:	ad 87       	std	Y+13, r26	; 0x0d
    184e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	6b 85       	ldd	r22, Y+11	; 0x0b
    1852:	7c 85       	ldd	r23, Y+12	; 0x0c
    1854:	8d 85       	ldd	r24, Y+13	; 0x0d
    1856:	9e 85       	ldd	r25, Y+14	; 0x0e
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4a e7       	ldi	r20, 0x7A	; 122
    185e:	55 e4       	ldi	r21, 0x45	; 69
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	8f 83       	std	Y+7, r24	; 0x07
    186a:	98 87       	std	Y+8, r25	; 0x08
    186c:	a9 87       	std	Y+9, r26	; 0x09
    186e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <login+0x8c>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <login+0x10a>
	else if (__tmp > 65535)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	4c f5       	brge	.+82     	; 0x18fc <login+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e2       	ldi	r20, 0x20	; 32
    18b8:	51 e4       	ldi	r21, 0x41	; 65
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <login+0xec>
    18d4:	80 e9       	ldi	r24, 0x90	; 144
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <login+0xda>
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <login+0xce>
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <login+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <login+0x116>
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);			// Make sure to leave the delay to work in proteus properly

		if (keypad != KEYPAD_INVALID)
    1924:	88 89       	ldd	r24, Y+16	; 0x10
    1926:	8f 3f       	cpi	r24, 0xFF	; 255
    1928:	19 f0       	breq	.+6      	; 0x1930 <login+0x12a>
		{
			userType = '2';
    192a:	82 e3       	ldi	r24, 0x32	; 50
    192c:	89 8b       	std	Y+17, r24	; 0x11
    192e:	0a c0       	rjmp	.+20     	; 0x1944 <login+0x13e>
			break;
		}
		if (hc05 != '\0')
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	88 23       	and	r24, r24
    1934:	19 f0       	breq	.+6      	; 0x193c <login+0x136>
		{
			userType = '1';
    1936:	81 e3       	ldi	r24, 0x31	; 49
    1938:	89 8b       	std	Y+17, r24	; 0x11
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <login+0x13e>
			break;
		}

		hc05 = HC05_ReceiveCharNonBlock();
    193c:	0e 94 1d 19 	call	0x323a	; 0x323a <HC05_ReceiveCharNonBlock>
    1940:	8f 87       	std	Y+15, r24	; 0x0f
    1942:	7b cf       	rjmp	.-266    	; 0x183a <login+0x34>

	}

	LCD_ClearRow(0);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_ClearRow>
	LCD_ClearRow(1);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_ClearRow>
	LCD_setAddressPosition(0, 0);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>


	if (userType == '1')
    1958:	89 89       	ldd	r24, Y+17	; 0x11
    195a:	81 33       	cpi	r24, 0x31	; 49
    195c:	29 f4       	brne	.+10     	; 0x1968 <login+0x162>
	{

		/*	Admin Mode 	*/
		loginAdminMode();
    195e:	0e 94 47 0b 	call	0x168e	; 0x168e <loginAdminMode>
		return '1';
    1962:	81 e3       	ldi	r24, 0x31	; 49
    1964:	8a 8b       	std	Y+18, r24	; 0x12
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <login+0x16a>
	}
	else
	{

		/*	User Mode 	*/
		loginUserMode();
    1968:	0e 94 cc 0b 	call	0x1798	; 0x1798 <loginUserMode>
		return '2';
    196c:	82 e3       	ldi	r24, 0x32	; 50
    196e:	8a 8b       	std	Y+18, r24	; 0x12
    1970:	8a 89       	ldd	r24, Y+18	; 0x12

	}

}
    1972:	62 96       	adiw	r28, 0x12	; 18
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <Door_Init>:
#include <util/delay.h>

static isOpen = 0;

void Door_Init()
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62

	// Init servo
	Servo_Init();
    198c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Servo_Init>

}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <Door_Open>:

void Door_Open()
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	2e 97       	sbiw	r28, 0x0e	; 14
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61

	// Start Servo
	Servo_Start();
    19aa:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Servo_Start>

	// Set Angle to 90
	Servo_SetAngle(90);
    19ae:	8a e5       	ldi	r24, 0x5A	; 90
    19b0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Servo_SetAngle>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e2       	ldi	r26, 0x20	; 32
    19ba:	b1 e4       	ldi	r27, 0x41	; 65
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a e7       	ldi	r20, 0x7A	; 122
    19d2:	55 e4       	ldi	r21, 0x45	; 69
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <Door_Open+0x70>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <Door_Open+0xee>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <Door_Open+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <Door_Open+0xd0>
    1a48:	80 e9       	ldi	r24, 0x90	; 144
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Door_Open+0xbe>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <Door_Open+0xb2>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <Door_Open+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <Door_Open+0xfa>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	// Stop Servo
	Servo_Stop();
    1a98:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Servo_Stop>

	isOpen = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	90 93 4f 03 	sts	0x034F, r25
    1aa4:	80 93 4e 03 	sts	0x034E, r24

}
    1aa8:	2e 96       	adiw	r28, 0x0e	; 14
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <Door_Close>:

void Door_Close()
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61

	// Start Servo
	Servo_Start();
    1ace:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Servo_Start>

	// Set Angle to 0
	Servo_SetAngle(0);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Servo_SetAngle>
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e2       	ldi	r26, 0x20	; 32
    1ade:	b1 e4       	ldi	r27, 0x41	; 65
    1ae0:	8b 87       	std	Y+11, r24	; 0x0b
    1ae2:	9c 87       	std	Y+12, r25	; 0x0c
    1ae4:	ad 87       	std	Y+13, r26	; 0x0d
    1ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	55 e4       	ldi	r21, 0x45	; 69
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8f 83       	std	Y+7, r24	; 0x07
    1b02:	98 87       	std	Y+8, r25	; 0x08
    1b04:	a9 87       	std	Y+9, r26	; 0x09
    1b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <Door_Close+0x70>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <Door_Close+0xee>
	else if (__tmp > 65535)
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <Door_Close+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <Door_Close+0xd0>
    1b6c:	80 e9       	ldi	r24, 0x90	; 144
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <Door_Close+0xbe>
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <Door_Close+0xb2>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <Door_Close+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <Door_Close+0xfa>
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	// Stop Servo
	Servo_Stop();
    1bbc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Servo_Stop>
	isOpen = 0;
    1bc0:	10 92 4f 03 	sts	0x034F, r1
    1bc4:	10 92 4e 03 	sts	0x034E, r1

}
    1bc8:	2e 96       	adiw	r28, 0x0e	; 14
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <Door_Toogle>:

void Door_Toogle()
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62

	if (isOpen)
    1be2:	80 91 4e 03 	lds	r24, 0x034E
    1be6:	90 91 4f 03 	lds	r25, 0x034F
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	19 f0       	breq	.+6      	; 0x1bf4 <Door_Toogle+0x1a>
	{

		Door_Close();
    1bee:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <Door_Close>
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <Door_Toogle+0x1e>

	}
	else
	{

		Door_Open();
    1bf4:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Door_Open>

	}

}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <Servo_Init>:

#include "Servo.h"


void Servo_Init()
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62

	// Init timer 1 as fast pwm
	// set frequency to 50
	Timer1_Init(TIMER1_FAST_PWM);
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <Timer1_Init>
	Timer1_SetFrequency(50);
    1c0c:	82 e3       	ldi	r24, 0x32	; 50
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 54 20 	call	0x40a8	; 0x40a8 <Timer1_SetFrequency>

}
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <Servo_Start>:

void Servo_Start()
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62

	// Set prescaler to 256
	Timer1_Start(TIMER1_BY_256);
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <Timer1_Start>

}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <Servo_Stop>:

void Servo_Stop()
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62

	// Stop timer funnction (by setting no clock)
	Timer1_Stop();
    1c36:	0e 94 0d 20 	call	0x401a	; 0x401a <Timer1_Stop>

}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <Servo_SetAngle>:

void Servo_SetAngle(u8 angle)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	2d 97       	sbiw	r28, 0x0d	; 13
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	8d 87       	std	Y+13, r24	; 0x0d

	// Validation
	if (angle < 0 || angle > 180)
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	85 3b       	cpi	r24, 0xB5	; 181
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <Servo_SetAngle+0x1e>
    1c5c:	45 c0       	rjmp	.+138    	; 0x1ce8 <Servo_SetAngle+0xa8>
	{
		return;
	}

	// Servo operate at duty cycles with Ton from 0.52ms to 2.4ms: 0 to 180 degree
	f32 percentage = (angle / 180.0);
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	aa 27       	eor	r26, r26
    1c66:	97 fd       	sbrc	r25, 7
    1c68:	a0 95       	com	r26
    1c6a:	ba 2f       	mov	r27, r26
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	44 e3       	ldi	r20, 0x34	; 52
    1c82:	53 e4       	ldi	r21, 0x43	; 67
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	89 87       	std	Y+9, r24	; 0x09
    1c8e:	9a 87       	std	Y+10, r25	; 0x0a
    1c90:	ab 87       	std	Y+11, r26	; 0x0b
    1c92:	bc 87       	std	Y+12, r27	; 0x0c
	f32 minValue = (0.52 / 1000);
    1c94:	8c e9       	ldi	r24, 0x9C	; 156
    1c96:	90 e5       	ldi	r25, 0x50	; 80
    1c98:	a8 e0       	ldi	r26, 0x08	; 8
    1c9a:	ba e3       	ldi	r27, 0x3A	; 58
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	af 83       	std	Y+7, r26	; 0x07
    1ca2:	b8 87       	std	Y+8, r27	; 0x08
	f32 Ton = minValue + (2.4 - 0.52) / 1000 * percentage;
    1ca4:	69 85       	ldd	r22, Y+9	; 0x09
    1ca6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1caa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cac:	26 e5       	ldi	r18, 0x56	; 86
    1cae:	3a e6       	ldi	r19, 0x6A	; 106
    1cb0:	46 ef       	ldi	r20, 0xF6	; 246
    1cb2:	5a e3       	ldi	r21, 0x3A	; 58
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc4:	4f 81       	ldd	r20, Y+7	; 0x07
    1cc6:	58 85       	ldd	r21, Y+8	; 0x08
    1cc8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	ab 83       	std	Y+3, r26	; 0x03
    1cd6:	bc 83       	std	Y+4, r27	; 0x04

	Timer1_SetDuty(Ton);
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cde:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 1b 20 	call	0x4036	; 0x4036 <Timer1_SetDuty>

}
    1ce8:	2d 96       	adiw	r28, 0x0d	; 13
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <SSD_init>:

#include "SSD.h"


void SSD_init(void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);	// En2
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);	// En1
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);	// DP
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);	// A
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);	// B
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	65 e0       	ldi	r22, 0x05	; 5
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);	// C
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	66 e0       	ldi	r22, 0x06	; 6
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);	// D
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	67 e0       	ldi	r22, 0x07	; 7
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <SSD_displayNumber>:


// Total delay of the function
void SSD_displayNumber(u8 number)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	e3 97       	sbiw	r28, 0x33	; 51
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	8b ab       	std	Y+51, r24	; 0x33
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <SSD_displayNumber+0x1e>

	// To prevent overflow at 255 -> 0
	while (number >= 100)
		number -= 100;
    1d66:	8b a9       	ldd	r24, Y+51	; 0x33
    1d68:	84 56       	subi	r24, 0x64	; 100
    1d6a:	8b ab       	std	Y+51, r24	; 0x33
// Total delay of the function
void SSD_displayNumber(u8 number)
{

	// To prevent overflow at 255 -> 0
	while (number >= 100)
    1d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d6e:	84 36       	cpi	r24, 0x64	; 100
    1d70:	d0 f7       	brcc	.-12     	; 0x1d66 <SSD_displayNumber+0x18>
		number -= 100;

	u8 rightDigit = ((number/10) % 10) << 4;
    1d72:	8b a9       	ldd	r24, Y+51	; 0x33
    1d74:	9a e0       	ldi	r25, 0x0A	; 10
    1d76:	69 2f       	mov	r22, r25
    1d78:	0e 94 bc 28 	call	0x5178	; 0x5178 <__udivmodqi4>
    1d7c:	9a e0       	ldi	r25, 0x0A	; 10
    1d7e:	69 2f       	mov	r22, r25
    1d80:	0e 94 bc 28 	call	0x5178	; 0x5178 <__udivmodqi4>
    1d84:	89 2f       	mov	r24, r25
    1d86:	82 95       	swap	r24
    1d88:	80 7f       	andi	r24, 0xF0	; 240
    1d8a:	8a ab       	std	Y+50, r24	; 0x32
	u8 leftDigit = (number % 10) << 4;
    1d8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d8e:	9a e0       	ldi	r25, 0x0A	; 10
    1d90:	69 2f       	mov	r22, r25
    1d92:	0e 94 bc 28 	call	0x5178	; 0x5178 <__udivmodqi4>
    1d96:	89 2f       	mov	r24, r25
    1d98:	82 95       	swap	r24
    1d9a:	80 7f       	andi	r24, 0xF0	; 240
    1d9c:	89 ab       	std	Y+49, r24	; 0x31

	// Right Digit
	// Enable  SSD 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Disable SSD 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Write the rightDigit
	Dio_writeChanelGroup(DIO_PORTA, rightDigit, SSD_MASK);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	6a a9       	ldd	r22, Y+50	; 0x32
    1db6:	4f e0       	ldi	r20, 0x0F	; 15
    1db8:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <Dio_writeChanelGroup>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	aa ef       	ldi	r26, 0xFA	; 250
    1dc2:	b3 e4       	ldi	r27, 0x43	; 67
    1dc4:	8d a7       	std	Y+45, r24	; 0x2d
    1dc6:	9e a7       	std	Y+46, r25	; 0x2e
    1dc8:	af a7       	std	Y+47, r26	; 0x2f
    1dca:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dcc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dce:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd4:	2b ea       	ldi	r18, 0xAB	; 171
    1dd6:	3a ea       	ldi	r19, 0xAA	; 170
    1dd8:	4a ea       	ldi	r20, 0xAA	; 170
    1dda:	50 e4       	ldi	r21, 0x40	; 64
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	89 a7       	std	Y+41, r24	; 0x29
    1de6:	9a a7       	std	Y+42, r25	; 0x2a
    1de8:	ab a7       	std	Y+43, r26	; 0x2b
    1dea:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1dec:	69 a5       	ldd	r22, Y+41	; 0x29
    1dee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1df0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1df2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	1c f4       	brge	.+6      	; 0x1e0a <SSD_displayNumber+0xbc>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	88 a7       	std	Y+40, r24	; 0x28
    1e08:	91 c0       	rjmp	.+290    	; 0x1f2c <SSD_displayNumber+0x1de>
	else if (__tmp > 255)
    1e0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1e0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	53 e4       	ldi	r21, 0x43	; 67
    1e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	0c f0       	brlt	.+2      	; 0x1e24 <SSD_displayNumber+0xd6>
    1e22:	7b c0       	rjmp	.+246    	; 0x1f1a <SSD_displayNumber+0x1cc>
	{
		_delay_ms(__us / 1000.0);
    1e24:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e26:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8c a3       	std	Y+36, r24	; 0x24
    1e3e:	9d a3       	std	Y+37, r25	; 0x25
    1e40:	ae a3       	std	Y+38, r26	; 0x26
    1e42:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6c a1       	ldd	r22, Y+36	; 0x24
    1e46:	7d a1       	ldd	r23, Y+37	; 0x25
    1e48:	8e a1       	ldd	r24, Y+38	; 0x26
    1e4a:	9f a1       	ldd	r25, Y+39	; 0x27
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a e7       	ldi	r20, 0x7A	; 122
    1e52:	55 e4       	ldi	r21, 0x45	; 69
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	88 a3       	std	Y+32, r24	; 0x20
    1e5e:	99 a3       	std	Y+33, r25	; 0x21
    1e60:	aa a3       	std	Y+34, r26	; 0x22
    1e62:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e64:	68 a1       	ldd	r22, Y+32	; 0x20
    1e66:	79 a1       	ldd	r23, Y+33	; 0x21
    1e68:	8a a1       	ldd	r24, Y+34	; 0x22
    1e6a:	9b a1       	ldd	r25, Y+35	; 0x23
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <SSD_displayNumber+0x138>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9f 8f       	std	Y+31, r25	; 0x1f
    1e82:	8e 8f       	std	Y+30, r24	; 0x1e
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <SSD_displayNumber+0x1b6>
	else if (__tmp > 65535)
    1e86:	68 a1       	ldd	r22, Y+32	; 0x20
    1e88:	79 a1       	ldd	r23, Y+33	; 0x21
    1e8a:	8a a1       	ldd	r24, Y+34	; 0x22
    1e8c:	9b a1       	ldd	r25, Y+35	; 0x23
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <SSD_displayNumber+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6c a1       	ldd	r22, Y+36	; 0x24
    1ea0:	7d a1       	ldd	r23, Y+37	; 0x25
    1ea2:	8e a1       	ldd	r24, Y+38	; 0x26
    1ea4:	9f a1       	ldd	r25, Y+39	; 0x27
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ec4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <SSD_displayNumber+0x198>
    1ec8:	80 e9       	ldi	r24, 0x90	; 144
    1eca:	91 e0       	ldi	r25, 0x01	; 1
    1ecc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ece:	8c 8f       	std	Y+28, r24	; 0x1c
    1ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <SSD_displayNumber+0x186>
    1ed8:	9d 8f       	std	Y+29, r25	; 0x1d
    1eda:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ede:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ee8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <SSD_displayNumber+0x17a>
    1eee:	24 c0       	rjmp	.+72     	; 0x1f38 <SSD_displayNumber+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9f 8f       	std	Y+31, r25	; 0x1f
    1f02:	8e 8f       	std	Y+30, r24	; 0x1e
    1f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f08:	9b 8f       	std	Y+27, r25	; 0x1b
    1f0a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <SSD_displayNumber+0x1c2>
    1f14:	9b 8f       	std	Y+27, r25	; 0x1b
    1f16:	8a 8f       	std	Y+26, r24	; 0x1a
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <SSD_displayNumber+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f1a:	69 a5       	ldd	r22, Y+41	; 0x29
    1f1c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	88 a7       	std	Y+40, r24	; 0x28
    1f2c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f2e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f30:	89 8d       	ldd	r24, Y+25	; 0x19
    1f32:	8a 95       	dec	r24
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <SSD_displayNumber+0x1e4>
    1f36:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	// Left Digit
	// Disable SSD 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Enable  SSD 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Write the leftDigit
	Dio_writeChanelGroup(DIO_PORTA, leftDigit, SSD_MASK);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	4f e0       	ldi	r20, 0x0F	; 15
    1f52:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <Dio_writeChanelGroup>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	aa ef       	ldi	r26, 0xFA	; 250
    1f5c:	b3 e4       	ldi	r27, 0x43	; 67
    1f5e:	8d 8b       	std	Y+21, r24	; 0x15
    1f60:	9e 8b       	std	Y+22, r25	; 0x16
    1f62:	af 8b       	std	Y+23, r26	; 0x17
    1f64:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f66:	6d 89       	ldd	r22, Y+21	; 0x15
    1f68:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6e:	2b ea       	ldi	r18, 0xAB	; 171
    1f70:	3a ea       	ldi	r19, 0xAA	; 170
    1f72:	4a ea       	ldi	r20, 0xAA	; 170
    1f74:	50 e4       	ldi	r21, 0x40	; 64
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
    1f80:	9a 8b       	std	Y+18, r25	; 0x12
    1f82:	ab 8b       	std	Y+19, r26	; 0x13
    1f84:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f86:	69 89       	ldd	r22, Y+17	; 0x11
    1f88:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	1c f4       	brge	.+6      	; 0x1fa4 <SSD_displayNumber+0x256>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	88 8b       	std	Y+16, r24	; 0x10
    1fa2:	91 c0       	rjmp	.+290    	; 0x20c6 <SSD_displayNumber+0x378>
	else if (__tmp > 255)
    1fa4:	69 89       	ldd	r22, Y+17	; 0x11
    1fa6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	53 e4       	ldi	r21, 0x43	; 67
    1fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	0c f0       	brlt	.+2      	; 0x1fbe <SSD_displayNumber+0x270>
    1fbc:	7b c0       	rjmp	.+246    	; 0x20b4 <SSD_displayNumber+0x366>
	{
		_delay_ms(__us / 1000.0);
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a e7       	ldi	r20, 0x7A	; 122
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8c 87       	std	Y+12, r24	; 0x0c
    1fd8:	9d 87       	std	Y+13, r25	; 0x0d
    1fda:	ae 87       	std	Y+14, r26	; 0x0e
    1fdc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fe0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fe2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	55 e4       	ldi	r21, 0x45	; 69
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	88 87       	std	Y+8, r24	; 0x08
    1ff8:	99 87       	std	Y+9, r25	; 0x09
    1ffa:	aa 87       	std	Y+10, r26	; 0x0a
    1ffc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ffe:	68 85       	ldd	r22, Y+8	; 0x08
    2000:	79 85       	ldd	r23, Y+9	; 0x09
    2002:	8a 85       	ldd	r24, Y+10	; 0x0a
    2004:	9b 85       	ldd	r25, Y+11	; 0x0b
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <SSD_displayNumber+0x2d2>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9f 83       	std	Y+7, r25	; 0x07
    201c:	8e 83       	std	Y+6, r24	; 0x06
    201e:	3f c0       	rjmp	.+126    	; 0x209e <SSD_displayNumber+0x350>
	else if (__tmp > 65535)
    2020:	68 85       	ldd	r22, Y+8	; 0x08
    2022:	79 85       	ldd	r23, Y+9	; 0x09
    2024:	8a 85       	ldd	r24, Y+10	; 0x0a
    2026:	9b 85       	ldd	r25, Y+11	; 0x0b
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <SSD_displayNumber+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6c 85       	ldd	r22, Y+12	; 0x0c
    203a:	7d 85       	ldd	r23, Y+13	; 0x0d
    203c:	8e 85       	ldd	r24, Y+14	; 0x0e
    203e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9f 83       	std	Y+7, r25	; 0x07
    205e:	8e 83       	std	Y+6, r24	; 0x06
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <SSD_displayNumber+0x332>
    2062:	80 e9       	ldi	r24, 0x90	; 144
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	9d 83       	std	Y+5, r25	; 0x05
    2068:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <SSD_displayNumber+0x320>
    2072:	9d 83       	std	Y+5, r25	; 0x05
    2074:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
    2078:	9f 81       	ldd	r25, Y+7	; 0x07
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9f 83       	std	Y+7, r25	; 0x07
    207e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8e 81       	ldd	r24, Y+6	; 0x06
    2082:	9f 81       	ldd	r25, Y+7	; 0x07
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <SSD_displayNumber+0x314>
    2088:	24 c0       	rjmp	.+72     	; 0x20d2 <SSD_displayNumber+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	68 85       	ldd	r22, Y+8	; 0x08
    208c:	79 85       	ldd	r23, Y+9	; 0x09
    208e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2090:	9b 85       	ldd	r25, Y+11	; 0x0b
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9f 83       	std	Y+7, r25	; 0x07
    209c:	8e 83       	std	Y+6, r24	; 0x06
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	9b 81       	ldd	r25, Y+3	; 0x03
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <SSD_displayNumber+0x35c>
    20ae:	9b 83       	std	Y+3, r25	; 0x03
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <SSD_displayNumber+0x384>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20b4:	69 89       	ldd	r22, Y+17	; 0x11
    20b6:	7a 89       	ldd	r23, Y+18	; 0x12
    20b8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ba:	9c 89       	ldd	r25, Y+20	; 0x14
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	88 8b       	std	Y+16, r24	; 0x10
    20c6:	88 89       	ldd	r24, Y+16	; 0x10
    20c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	8a 95       	dec	r24
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <SSD_displayNumber+0x37e>
    20d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);


}
    20d2:	e3 96       	adiw	r28, 0x33	; 51
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <SSD_displayNumberAndDelay>:

void SSD_displayNumberAndDelay(u8 number, u8 msec)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <SSD_displayNumberAndDelay+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <SSD_displayNumberAndDelay+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	6c 83       	std	Y+4, r22	; 0x04


	// Display function takes about 3 ms

	for (u16 i = 0; i < msec; i++)
    20f4:	1a 82       	std	Y+2, r1	; 0x02
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <SSD_displayNumberAndDelay+0x26>
	{

		SSD_displayNumber(number);
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <SSD_displayNumber>
{


	// Display function takes about 3 ms

	for (u16 i = 0; i < msec; i++)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	8c 81       	ldd	r24, Y+4	; 0x04
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	82 17       	cp	r24, r18
    2116:	93 07       	cpc	r25, r19
    2118:	80 f3       	brcs	.-32     	; 0x20fa <SSD_displayNumberAndDelay+0x16>

		SSD_displayNumber(number);

	}

}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <Relay_Init>:

#include "Relay.h"
#include "Timer2.h"

void Relay_Init()
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62

	// Normal Lamps
	Dio_configChanel(DIO_PORTA, DIO_PIN1, DIO_OUTPUT);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN2, DIO_OUTPUT);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN0, DIO_OUTPUT);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN6, DIO_OUTPUT);
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	66 e0       	ldi	r22, 0x06	; 6
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	Dio_writeChanel(DIO_PORTA, DIO_PIN1, DIO_LOW);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTA, DIO_PIN2, DIO_LOW);
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN0, DIO_LOW);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTD, DIO_PIN6, DIO_LOW);
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	66 e0       	ldi	r22, 0x06	; 6
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Dimmer using timer2
	Timer2_Init(TIMER2_FAST_PWM);
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <Timer2_Init>
	Timer2_Start(TIMER2_BY_256);
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <Timer2_Start>

}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <Relay_toogle>:

void Relay_toogle(Relay_t T)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <Relay_toogle+0x6>
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01

	switch (T)
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	3b 83       	std	Y+3, r19	; 0x03
    21bc:	2a 83       	std	Y+2, r18	; 0x02
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	91 05       	cpc	r25, r1
    21c6:	21 f1       	breq	.+72     	; 0x2210 <Relay_toogle+0x6a>
    21c8:	2a 81       	ldd	r18, Y+2	; 0x02
    21ca:	3b 81       	ldd	r19, Y+3	; 0x03
    21cc:	23 30       	cpi	r18, 0x03	; 3
    21ce:	31 05       	cpc	r19, r1
    21d0:	54 f4       	brge	.+20     	; 0x21e6 <Relay_toogle+0x40>
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	89 f0       	breq	.+34     	; 0x21fc <Relay_toogle+0x56>
    21da:	2a 81       	ldd	r18, Y+2	; 0x02
    21dc:	3b 81       	ldd	r19, Y+3	; 0x03
    21de:	21 30       	cpi	r18, 0x01	; 1
    21e0:	31 05       	cpc	r19, r1
    21e2:	89 f0       	breq	.+34     	; 0x2206 <Relay_toogle+0x60>
    21e4:	23 c0       	rjmp	.+70     	; 0x222c <Relay_toogle+0x86>
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	91 05       	cpc	r25, r1
    21ee:	a9 f0       	breq	.+42     	; 0x221a <Relay_toogle+0x74>
    21f0:	2a 81       	ldd	r18, Y+2	; 0x02
    21f2:	3b 81       	ldd	r19, Y+3	; 0x03
    21f4:	24 30       	cpi	r18, 0x04	; 4
    21f6:	31 05       	cpc	r19, r1
    21f8:	a9 f0       	breq	.+42     	; 0x2224 <Relay_toogle+0x7e>
    21fa:	18 c0       	rjmp	.+48     	; 0x222c <Relay_toogle+0x86>
	{

		case Relay_1:
		{
			Dio_flipChanel(DIO_PORTA, DIO_PIN1);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    2204:	13 c0       	rjmp	.+38     	; 0x222c <Relay_toogle+0x86>
			break;
		}
		case Relay_2:
		{
			Dio_flipChanel(DIO_PORTA, DIO_PIN2);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    220e:	0e c0       	rjmp	.+28     	; 0x222c <Relay_toogle+0x86>
			break;
		}

		case Relay_3:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN0);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    2218:	09 c0       	rjmp	.+18     	; 0x222c <Relay_toogle+0x86>
			break;
		}

		case Relay_4:
		{
			Dio_flipChanel(DIO_PORTC, DIO_PIN2);
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    2222:	04 c0       	rjmp	.+8      	; 0x222c <Relay_toogle+0x86>
			break;
		}

		case Relay_5:
		{
			Dio_flipChanel(DIO_PORTD, DIO_PIN6);
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	66 e0       	ldi	r22, 0x06	; 6
    2228:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
			break;
		}

	}

}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <Relay_setDimmer>:

void Relay_setDimmer(u8 percentage)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01

	if (percentage < 0 || percentage > 100)
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	85 36       	cpi	r24, 0x65	; 101
    2248:	18 f4       	brcc	.+6      	; 0x2250 <Relay_setDimmer+0x18>
		return;

	Timer2_SetDuty(percentage);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <Timer2_SetDuty>

}
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <LM35_Init>:
 */

#include "LM35.h"

void LM35_Init(void)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62


	Dio_configChanel(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	ADC_InitADC();
    226a:	0e 94 2b 28 	call	0x5056	; 0x5056 <ADC_InitADC>

}
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <LM35_ReadTemperature>:

u8 LM35_ReadTemperature(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <LM35_ReadTemperature+0x6>
    227a:	00 d0       	rcall	.+0      	; 0x227c <LM35_ReadTemperature+0x8>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62


	// Convert from V to mV
	f32 mVolts = ADC_f32ReadChannel(ADC_CHANNEL0) * 1000;
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 47 28 	call	0x508e	; 0x508e <ADC_f32ReadChannel>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a e7       	ldi	r20, 0x7A	; 122
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	9b 83       	std	Y+3, r25	; 0x03
    22a4:	ac 83       	std	Y+4, r26	; 0x04
    22a6:	bd 83       	std	Y+5, r27	; 0x05



	// From mV to degree C, where each 10mv -> 1 C
	u8 degreeC = (mVolts / 10) + 1;
    22a8:	6a 81       	ldd	r22, Y+2	; 0x02
    22aa:	7b 81       	ldd	r23, Y+3	; 0x03
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	9d 81       	ldd	r25, Y+5	; 0x05
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	89 83       	std	Y+1, r24	; 0x01

	return degreeC;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <Led_ledInit>:

#include "Led.h"
#include <util/delay.h>

void Led_ledInit()
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	62 e0       	ldi	r22, 0x02	; 2
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	67 e0       	ldi	r22, 0x07	; 7
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	63 e0       	ldi	r22, 0x03	; 3
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <Led_turnOn>:

void Led_turnOn(led_ledId_t led)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <Led_turnOn+0x6>
    2326:	0f 92       	push	r0
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3b 83       	std	Y+3, r19	; 0x03
    2336:	2a 83       	std	Y+2, r18	; 0x02
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	79 f0       	breq	.+30     	; 0x2360 <Led_turnOn+0x40>
    2342:	2a 81       	ldd	r18, Y+2	; 0x02
    2344:	3b 81       	ldd	r19, Y+3	; 0x03
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	31 05       	cpc	r19, r1
    234a:	81 f0       	breq	.+32     	; 0x236c <Led_turnOn+0x4c>
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	89 f4       	brne	.+34     	; 0x2376 <Led_turnOn+0x56>
	{

	case LED0:
		Dio_writeChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <Led_turnOn+0x56>
		break;

	case LED1:
		Dio_writeChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	67 e0       	ldi	r22, 0x07	; 7
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <Led_turnOn+0x56>
		break;

	case LED2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	63 e0       	ldi	r22, 0x03	; 3
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		break;
	}

}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <Led_turnOff>:

void Led_turnOff(led_ledId_t led)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <Led_turnOff+0x6>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3b 83       	std	Y+3, r19	; 0x03
    2398:	2a 83       	std	Y+2, r18	; 0x02
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	9b 81       	ldd	r25, Y+3	; 0x03
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	91 05       	cpc	r25, r1
    23a2:	79 f0       	breq	.+30     	; 0x23c2 <Led_turnOff+0x40>
    23a4:	2a 81       	ldd	r18, Y+2	; 0x02
    23a6:	3b 81       	ldd	r19, Y+3	; 0x03
    23a8:	22 30       	cpi	r18, 0x02	; 2
    23aa:	31 05       	cpc	r19, r1
    23ac:	81 f0       	breq	.+32     	; 0x23ce <Led_turnOff+0x4c>
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	9b 81       	ldd	r25, Y+3	; 0x03
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	89 f4       	brne	.+34     	; 0x23d8 <Led_turnOff+0x56>
	{

	case LED0:
		Dio_writeChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	62 e0       	ldi	r22, 0x02	; 2
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    23c0:	0b c0       	rjmp	.+22     	; 0x23d8 <Led_turnOff+0x56>
		break;

	case LED1:
		Dio_writeChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	67 e0       	ldi	r22, 0x07	; 7
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <Led_turnOff+0x56>
		break;

	case LED2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	63 e0       	ldi	r22, 0x03	; 3
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		break;
	}

}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <Led_toggle>:

void Led_toggle(led_ledId_t led)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <Led_toggle+0x6>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	3b 83       	std	Y+3, r19	; 0x03
    23fa:	2a 83       	std	Y+2, r18	; 0x02
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	91 05       	cpc	r25, r1
    2404:	71 f0       	breq	.+28     	; 0x2422 <Led_toggle+0x3e>
    2406:	2a 81       	ldd	r18, Y+2	; 0x02
    2408:	3b 81       	ldd	r19, Y+3	; 0x03
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	71 f0       	breq	.+28     	; 0x242c <Led_toggle+0x48>
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	71 f4       	brne	.+28     	; 0x2434 <Led_toggle+0x50>
	{

	case LED0:
		Dio_flipChanel(DIO_PORTC, DIO_PIN2);
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    2420:	09 c0       	rjmp	.+18     	; 0x2434 <Led_toggle+0x50>
		break;

	case LED1:
		Dio_flipChanel(DIO_PORTC, DIO_PIN7);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	67 e0       	ldi	r22, 0x07	; 7
    2426:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <Led_toggle+0x50>
		break;

	case LED2:
		Dio_flipChanel(DIO_PORTD, DIO_PIN3);
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	63 e0       	ldi	r22, 0x03	; 3
    2430:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <Dio_flipChanel>
		break;
	}

}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_init>:
static u8 col = 0;
static lcd_alignment_t alignment = LCD_LEFT;
static void LCD_staticdisplayString(u8* _char, lcd_animate_t animate, lcd_alignment_t align);

void LCD_init(void)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	e4 97       	sbiw	r28, 0x34	; 52
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61

	// Control pins
	Dio_configChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	63 e0       	ldi	r22, 0x03	; 3
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// Data pins
	Dio_configChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	64 e0       	ldi	r22, 0x04	; 4
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	65 e0       	ldi	r22, 0x05	; 5
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	66 e0       	ldi	r22, 0x06	; 6
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	67 e0       	ldi	r22, 0x07	; 7
    2494:	41 e0       	ldi	r20, 0x01	; 1
    2496:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// R/W -> Write to LCD
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	62 e0       	ldi	r22, 0x02	; 2
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e7       	ldi	r26, 0x70	; 112
    24aa:	b1 e4       	ldi	r27, 0x41	; 65
    24ac:	89 ab       	std	Y+49, r24	; 0x31
    24ae:	9a ab       	std	Y+50, r25	; 0x32
    24b0:	ab ab       	std	Y+51, r26	; 0x33
    24b2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	69 a9       	ldd	r22, Y+49	; 0x31
    24b6:	7a a9       	ldd	r23, Y+50	; 0x32
    24b8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ba:	9c a9       	ldd	r25, Y+52	; 0x34
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	55 e4       	ldi	r21, 0x45	; 69
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
    24ce:	9e a7       	std	Y+46, r25	; 0x2e
    24d0:	af a7       	std	Y+47, r26	; 0x2f
    24d2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    24d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    24d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <LCD_init+0xb6>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c a7       	std	Y+44, r25	; 0x2c
    24f2:	8b a7       	std	Y+43, r24	; 0x2b
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <LCD_init+0x134>
	else if (__tmp > 65535)
    24f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    24f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    24fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fc:	98 a9       	ldd	r25, Y+48	; 0x30
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <LCD_init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	69 a9       	ldd	r22, Y+49	; 0x31
    2510:	7a a9       	ldd	r23, Y+50	; 0x32
    2512:	8b a9       	ldd	r24, Y+51	; 0x33
    2514:	9c a9       	ldd	r25, Y+52	; 0x34
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c a7       	std	Y+44, r25	; 0x2c
    2534:	8b a7       	std	Y+43, r24	; 0x2b
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <LCD_init+0x116>
    2538:	80 e9       	ldi	r24, 0x90	; 144
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	9a a7       	std	Y+42, r25	; 0x2a
    253e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2540:	89 a5       	ldd	r24, Y+41	; 0x29
    2542:	9a a5       	ldd	r25, Y+42	; 0x2a
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_init+0x104>
    2548:	9a a7       	std	Y+42, r25	; 0x2a
    254a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8b a5       	ldd	r24, Y+43	; 0x2b
    254e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9c a7       	std	Y+44, r25	; 0x2c
    2554:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8b a5       	ldd	r24, Y+43	; 0x2b
    2558:	9c a5       	ldd	r25, Y+44	; 0x2c
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <LCD_init+0xf8>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <LCD_init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	6d a5       	ldd	r22, Y+45	; 0x2d
    2562:	7e a5       	ldd	r23, Y+46	; 0x2e
    2564:	8f a5       	ldd	r24, Y+47	; 0x2f
    2566:	98 a9       	ldd	r25, Y+48	; 0x30
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c a7       	std	Y+44, r25	; 0x2c
    2572:	8b a7       	std	Y+43, r24	; 0x2b
    2574:	8b a5       	ldd	r24, Y+43	; 0x2b
    2576:	9c a5       	ldd	r25, Y+44	; 0x2c
    2578:	98 a7       	std	Y+40, r25	; 0x28
    257a:	8f a3       	std	Y+39, r24	; 0x27
    257c:	8f a1       	ldd	r24, Y+39	; 0x27
    257e:	98 a5       	ldd	r25, Y+40	; 0x28
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_init+0x140>
    2584:	98 a7       	std	Y+40, r25	; 0x28
    2586:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);
	LCD_sendCmd(0x03);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 ea       	ldi	r26, 0xA0	; 160
    2594:	b0 e4       	ldi	r27, 0x40	; 64
    2596:	8b a3       	std	Y+35, r24	; 0x23
    2598:	9c a3       	std	Y+36, r25	; 0x24
    259a:	ad a3       	std	Y+37, r26	; 0x25
    259c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	6b a1       	ldd	r22, Y+35	; 0x23
    25a0:	7c a1       	ldd	r23, Y+36	; 0x24
    25a2:	8d a1       	ldd	r24, Y+37	; 0x25
    25a4:	9e a1       	ldd	r25, Y+38	; 0x26
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a e7       	ldi	r20, 0x7A	; 122
    25ac:	55 e4       	ldi	r21, 0x45	; 69
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
    25b8:	98 a3       	std	Y+32, r25	; 0x20
    25ba:	a9 a3       	std	Y+33, r26	; 0x21
    25bc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    25be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25c0:	78 a1       	ldd	r23, Y+32	; 0x20
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	2c f4       	brge	.+10     	; 0x25e0 <LCD_init+0x1a0>
		__ticks = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9e 8f       	std	Y+30, r25	; 0x1e
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
    25de:	3f c0       	rjmp	.+126    	; 0x265e <LCD_init+0x21e>
	else if (__tmp > 65535)
    25e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25e2:	78 a1       	ldd	r23, Y+32	; 0x20
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	4c f5       	brge	.+82     	; 0x264a <LCD_init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9e 8f       	std	Y+30, r25	; 0x1e
    261e:	8d 8f       	std	Y+29, r24	; 0x1d
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <LCD_init+0x200>
    2622:	80 e9       	ldi	r24, 0x90	; 144
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	9c 8f       	std	Y+28, r25	; 0x1c
    2628:	8b 8f       	std	Y+27, r24	; 0x1b
    262a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_init+0x1ee>
    2632:	9c 8f       	std	Y+28, r25	; 0x1c
    2634:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9e 8f       	std	Y+30, r25	; 0x1e
    263e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2642:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	69 f7       	brne	.-38     	; 0x2622 <LCD_init+0x1e2>
    2648:	14 c0       	rjmp	.+40     	; 0x2672 <LCD_init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    264c:	78 a1       	ldd	r23, Y+32	; 0x20
    264e:	89 a1       	ldd	r24, Y+33	; 0x21
    2650:	9a a1       	ldd	r25, Y+34	; 0x22
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9e 8f       	std	Y+30, r25	; 0x1e
    265c:	8d 8f       	std	Y+29, r24	; 0x1d
    265e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2660:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2662:	9a 8f       	std	Y+26, r25	; 0x1a
    2664:	89 8f       	std	Y+25, r24	; 0x19
    2666:	89 8d       	ldd	r24, Y+25	; 0x19
    2668:	9a 8d       	ldd	r25, Y+26	; 0x1a
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_init+0x22a>
    266e:	9a 8f       	std	Y+26, r25	; 0x1a
    2670:	89 8f       	std	Y+25, r24	; 0x19

	_delay_ms(5);
	LCD_sendCmd(0x03);
    2672:	83 e0       	ldi	r24, 0x03	; 3
    2674:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a8 ec       	ldi	r26, 0xC8	; 200
    267e:	b2 e4       	ldi	r27, 0x42	; 66
    2680:	8d 8b       	std	Y+21, r24	; 0x15
    2682:	9e 8b       	std	Y+22, r25	; 0x16
    2684:	af 8b       	std	Y+23, r26	; 0x17
    2686:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	2b ea       	ldi	r18, 0xAB	; 171
    2692:	3a ea       	ldi	r19, 0xAA	; 170
    2694:	4a ea       	ldi	r20, 0xAA	; 170
    2696:	50 e4       	ldi	r21, 0x40	; 64
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	89 8b       	std	Y+17, r24	; 0x11
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	ab 8b       	std	Y+19, r26	; 0x13
    26a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26a8:	69 89       	ldd	r22, Y+17	; 0x11
    26aa:	7a 89       	ldd	r23, Y+18	; 0x12
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	1c f4       	brge	.+6      	; 0x26c6 <LCD_init+0x286>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	88 8b       	std	Y+16, r24	; 0x10
    26c4:	91 c0       	rjmp	.+290    	; 0x27e8 <LCD_init+0x3a8>
	else if (__tmp > 255)
    26c6:	69 89       	ldd	r22, Y+17	; 0x11
    26c8:	7a 89       	ldd	r23, Y+18	; 0x12
    26ca:	8b 89       	ldd	r24, Y+19	; 0x13
    26cc:	9c 89       	ldd	r25, Y+20	; 0x14
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	53 e4       	ldi	r21, 0x43	; 67
    26d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	0c f0       	brlt	.+2      	; 0x26e0 <LCD_init+0x2a0>
    26de:	7b c0       	rjmp	.+246    	; 0x27d6 <LCD_init+0x396>
	{
		_delay_ms(__us / 1000.0);
    26e0:	6d 89       	ldd	r22, Y+21	; 0x15
    26e2:	7e 89       	ldd	r23, Y+22	; 0x16
    26e4:	8f 89       	ldd	r24, Y+23	; 0x17
    26e6:	98 8d       	ldd	r25, Y+24	; 0x18
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a e7       	ldi	r20, 0x7A	; 122
    26ee:	54 e4       	ldi	r21, 0x44	; 68
    26f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8c 87       	std	Y+12, r24	; 0x0c
    26fa:	9d 87       	std	Y+13, r25	; 0x0d
    26fc:	ae 87       	std	Y+14, r26	; 0x0e
    26fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6c 85       	ldd	r22, Y+12	; 0x0c
    2702:	7d 85       	ldd	r23, Y+13	; 0x0d
    2704:	8e 85       	ldd	r24, Y+14	; 0x0e
    2706:	9f 85       	ldd	r25, Y+15	; 0x0f
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a e7       	ldi	r20, 0x7A	; 122
    270e:	55 e4       	ldi	r21, 0x45	; 69
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	88 87       	std	Y+8, r24	; 0x08
    271a:	99 87       	std	Y+9, r25	; 0x09
    271c:	aa 87       	std	Y+10, r26	; 0x0a
    271e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2720:	68 85       	ldd	r22, Y+8	; 0x08
    2722:	79 85       	ldd	r23, Y+9	; 0x09
    2724:	8a 85       	ldd	r24, Y+10	; 0x0a
    2726:	9b 85       	ldd	r25, Y+11	; 0x0b
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_init+0x302>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9f 83       	std	Y+7, r25	; 0x07
    273e:	8e 83       	std	Y+6, r24	; 0x06
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_init+0x380>
	else if (__tmp > 65535)
    2742:	68 85       	ldd	r22, Y+8	; 0x08
    2744:	79 85       	ldd	r23, Y+9	; 0x09
    2746:	8a 85       	ldd	r24, Y+10	; 0x0a
    2748:	9b 85       	ldd	r25, Y+11	; 0x0b
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6c 85       	ldd	r22, Y+12	; 0x0c
    275c:	7d 85       	ldd	r23, Y+13	; 0x0d
    275e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2760:	9f 85       	ldd	r25, Y+15	; 0x0f
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9f 83       	std	Y+7, r25	; 0x07
    2780:	8e 83       	std	Y+6, r24	; 0x06
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_init+0x362>
    2784:	80 e9       	ldi	r24, 0x90	; 144
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
    278e:	9d 81       	ldd	r25, Y+5	; 0x05
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_init+0x350>
    2794:	9d 83       	std	Y+5, r25	; 0x05
    2796:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8e 81       	ldd	r24, Y+6	; 0x06
    279a:	9f 81       	ldd	r25, Y+7	; 0x07
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9f 83       	std	Y+7, r25	; 0x07
    27a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8e 81       	ldd	r24, Y+6	; 0x06
    27a4:	9f 81       	ldd	r25, Y+7	; 0x07
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_init+0x344>
    27aa:	24 c0       	rjmp	.+72     	; 0x27f4 <LCD_init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	68 85       	ldd	r22, Y+8	; 0x08
    27ae:	79 85       	ldd	r23, Y+9	; 0x09
    27b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9f 83       	std	Y+7, r25	; 0x07
    27be:	8e 83       	std	Y+6, r24	; 0x06
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
    27c2:	9f 81       	ldd	r25, Y+7	; 0x07
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	8a 83       	std	Y+2, r24	; 0x02
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_init+0x38c>
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <LCD_init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27d6:	69 89       	ldd	r22, Y+17	; 0x11
    27d8:	7a 89       	ldd	r23, Y+18	; 0x12
    27da:	8b 89       	ldd	r24, Y+19	; 0x13
    27dc:	9c 89       	ldd	r25, Y+20	; 0x14
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	88 8b       	std	Y+16, r24	; 0x10
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	8a 95       	dec	r24
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_init+0x3ae>
    27f2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
	LCD_sendCmd(0x03);
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>

	LCD_sendCmd(0x02);
    27fa:	82 e0       	ldi	r24, 0x02	; 2
    27fc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
	LCD_sendCmd(_LCD_4BIT_MODE);
    2800:	88 e2       	ldi	r24, 0x28	; 40
    2802:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
	LCD_sendCmd(_LCD_CLEAR);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
	LCD_sendCmd(_LCD_CURSOR_ON);
    280c:	8f e0       	ldi	r24, 0x0F	; 15
    280e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>

}
    2812:	e4 96       	adiw	r28, 0x34	; 52
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <LCD_generateEnablePulse>:

static void LCD_generateEnablePulse()
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	2e 97       	sbiw	r28, 0x0e	; 14
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61

	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 e0       	ldi	r26, 0x00	; 0
    2848:	b0 e4       	ldi	r27, 0x40	; 64
    284a:	8b 87       	std	Y+11, r24	; 0x0b
    284c:	9c 87       	std	Y+12, r25	; 0x0c
    284e:	ad 87       	std	Y+13, r26	; 0x0d
    2850:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2852:	6b 85       	ldd	r22, Y+11	; 0x0b
    2854:	7c 85       	ldd	r23, Y+12	; 0x0c
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	9e 85       	ldd	r25, Y+14	; 0x0e
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a e7       	ldi	r20, 0x7A	; 122
    2860:	55 e4       	ldi	r21, 0x45	; 69
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	8f 83       	std	Y+7, r24	; 0x07
    286c:	98 87       	std	Y+8, r25	; 0x08
    286e:	a9 87       	std	Y+9, r26	; 0x09
    2870:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e8       	ldi	r20, 0x80	; 128
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2886:	88 23       	and	r24, r24
    2888:	2c f4       	brge	.+10     	; 0x2894 <LCD_generateEnablePulse+0x70>
		__ticks = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	3f c0       	rjmp	.+126    	; 0x2912 <LCD_generateEnablePulse+0xee>
	else if (__tmp > 65535)
    2894:	6f 81       	ldd	r22, Y+7	; 0x07
    2896:	78 85       	ldd	r23, Y+8	; 0x08
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	4c f5       	brge	.+82     	; 0x28fe <LCD_generateEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <LCD_generateEnablePulse+0xd0>
    28d6:	80 e9       	ldi	r24, 0x90	; 144
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	9c 81       	ldd	r25, Y+4	; 0x04
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_generateEnablePulse+0xbe>
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	69 f7       	brne	.-38     	; 0x28d6 <LCD_generateEnablePulse+0xb2>
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <LCD_generateEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <LCD_generateEnablePulse+0xfa>
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	63 e0       	ldi	r22, 0x03	; 3
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

}
    2930:	2e 96       	adiw	r28, 0x0e	; 14
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <LCD_sendData>:

static void LCD_sendData(u8 data)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <LCD_sendData+0x6>
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	8b 83       	std	Y+3, r24	; 0x03

	u8 msb = data & ~LCD_MASK;
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	80 7f       	andi	r24, 0xF0	; 240
    2954:	8a 83       	std	Y+2, r24	; 0x02
	u8 lsb = data << 4;
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	82 95       	swap	r24
    295a:	80 7f       	andi	r24, 0xF0	; 240
    295c:	89 83       	std	Y+1, r24	; 0x01

	// Write to port by group two times
	// MSB (Most)
	Dio_writeChanelGroup(DIO_PORTA, msb, LCD_MASK);
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	6a 81       	ldd	r22, Y+2	; 0x02
    2962:	4f e0       	ldi	r20, 0x0F	; 15
    2964:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <Dio_writeChanelGroup>

	// Generate enable pulse to enable lcd to read last bits
	LCD_generateEnablePulse();
    2968:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_generateEnablePulse>

	// LSB (Least)
	Dio_writeChanelGroup(DIO_PORTA, lsb, LCD_MASK);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	69 81       	ldd	r22, Y+1	; 0x01
    2970:	4f e0       	ldi	r20, 0x0F	; 15
    2972:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <Dio_writeChanelGroup>

	// Generate enable pulse to enable lcd to read last bits
	LCD_generateEnablePulse();
    2976:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_generateEnablePulse>


}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <LCD_displayChar>:

void LCD_displayChar(u8 _char)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	0f 92       	push	r0
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	89 83       	std	Y+1, r24	; 0x01

	if (_char == '\0')
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	88 23       	and	r24, r24
    2996:	69 f0       	breq	.+26     	; 0x29b2 <LCD_displayChar+0x2c>
	{
		return;
	}

	// RS = 1 -> to be displayed
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	41 e0       	ldi	r20, 0x01	; 1
    299e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	LCD_sendData(_char);
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_sendData>
	col++;
    29a8:	80 91 51 03 	lds	r24, 0x0351
    29ac:	8f 5f       	subi	r24, 0xFF	; 255
    29ae:	80 93 51 03 	sts	0x0351, r24

}
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <LCD_displayInt>:

void LCD_displayInt(u32 number)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	c8 56       	subi	r28, 0x68	; 104
    29c4:	d0 40       	sbci	r29, 0x00	; 0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	fe 01       	movw	r30, r28
    29d2:	eb 59       	subi	r30, 0x9B	; 155
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 83       	st	Z, r22
    29d8:	71 83       	std	Z+1, r23	; 0x01
    29da:	82 83       	std	Z+2, r24	; 0x02
    29dc:	93 83       	std	Z+3, r25	; 0x03

	u8 buffer[100];

	sprintf(buffer, "%d", number);
    29de:	8d b7       	in	r24, 0x3d	; 61
    29e0:	9e b7       	in	r25, 0x3e	; 62
    29e2:	08 97       	sbiw	r24, 0x08	; 8
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	9e bf       	out	0x3e, r25	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	8d bf       	out	0x3d, r24	; 61
    29ee:	2d b7       	in	r18, 0x3d	; 61
    29f0:	3e b7       	in	r19, 0x3e	; 62
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	ce 01       	movw	r24, r28
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	f9 01       	movw	r30, r18
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	81 e3       	ldi	r24, 0x31	; 49
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	f9 01       	movw	r30, r18
    2a06:	93 83       	std	Z+3, r25	; 0x03
    2a08:	82 83       	std	Z+2, r24	; 0x02
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	eb 59       	subi	r30, 0x9B	; 155
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	a2 81       	ldd	r26, Z+2	; 0x02
    2a16:	b3 81       	ldd	r27, Z+3	; 0x03
    2a18:	f9 01       	movw	r30, r18
    2a1a:	84 83       	std	Z+4, r24	; 0x04
    2a1c:	95 83       	std	Z+5, r25	; 0x05
    2a1e:	a6 83       	std	Z+6, r26	; 0x06
    2a20:	b7 83       	std	Z+7, r27	; 0x07
    2a22:	0e 94 b0 2a 	call	0x5560	; 0x5560 <sprintf>
    2a26:	8d b7       	in	r24, 0x3d	; 61
    2a28:	9e b7       	in	r25, 0x3e	; 62
    2a2a:	08 96       	adiw	r24, 0x08	; 8
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	9e bf       	out	0x3e, r25	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	8d bf       	out	0x3d, r24	; 61

	LCD_staticdisplayString(buffer, LCD_NO_ANIMATE, LCD_NONE);
    2a36:	ce 01       	movw	r24, r28
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <LCD_staticdisplayString>

}
    2a42:	c8 59       	subi	r28, 0x98	; 152
    2a44:	df 4f       	sbci	r29, 0xFF	; 255
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <LCD_displayFloat>:

void LCD_displayFloat(f32 number)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <LCD_displayFloat+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <LCD_displayFloat+0x8>
    2a5e:	0f 92       	push	r0
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	6a 83       	std	Y+2, r22	; 0x02
    2a66:	7b 83       	std	Y+3, r23	; 0x03
    2a68:	8c 83       	std	Y+4, r24	; 0x04
    2a6a:	9d 83       	std	Y+5, r25	; 0x05

	u8 wholeNum = number;
    2a6c:	6a 81       	ldd	r22, Y+2	; 0x02
    2a6e:	7b 81       	ldd	r23, Y+3	; 0x03
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	89 83       	std	Y+1, r24	; 0x01

	LCD_displayInt(wholeNum);
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_displayInt>
	LCD_displayChar('.');
    2a90:	8e e2       	ldi	r24, 0x2E	; 46
    2a92:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>

	number -= wholeNum;
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	aa 27       	eor	r26, r26
    2a9e:	97 fd       	sbrc	r25, 7
    2aa0:	a0 95       	com	r26
    2aa2:	ba 2f       	mov	r27, r26
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2aac:	9b 01       	movw	r18, r22
    2aae:	ac 01       	movw	r20, r24
    2ab0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab2:	7b 81       	ldd	r23, Y+3	; 0x03
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
    2ac2:	9b 83       	std	Y+3, r25	; 0x03
    2ac4:	ac 83       	std	Y+4, r26	; 0x04
    2ac6:	bd 83       	std	Y+5, r27	; 0x05
	number *= 100;
    2ac8:	6a 81       	ldd	r22, Y+2	; 0x02
    2aca:	7b 81       	ldd	r23, Y+3	; 0x03
    2acc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ace:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	48 ec       	ldi	r20, 0xC8	; 200
    2ad6:	52 e4       	ldi	r21, 0x42	; 66
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	8a 83       	std	Y+2, r24	; 0x02
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	ac 83       	std	Y+4, r26	; 0x04
    2ae6:	bd 83       	std	Y+5, r27	; 0x05

	LCD_displayInt(number);
    2ae8:	6a 81       	ldd	r22, Y+2	; 0x02
    2aea:	7b 81       	ldd	r23, Y+3	; 0x03
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_displayInt>

}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <LCD_staticdisplayString>:

static void LCD_staticdisplayString(u8* _char, lcd_animate_t animate, lcd_alignment_t align)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	67 97       	sbiw	r28, 0x17	; 23
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	9b 8b       	std	Y+19, r25	; 0x13
    2b26:	8a 8b       	std	Y+18, r24	; 0x12
    2b28:	6c 8b       	std	Y+20, r22	; 0x14
    2b2a:	4d 8b       	std	Y+21, r20	; 0x15

	u8 size = strlen(_char);
    2b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b2e:	9b 89       	ldd	r25, Y+19	; 0x13
    2b30:	0e 94 76 2a 	call	0x54ec	; 0x54ec <strlen>
    2b34:	89 8b       	std	Y+17, r24	; 0x11

	if (align)
    2b36:	8d 89       	ldd	r24, Y+21	; 0x15
    2b38:	88 23       	and	r24, r24
    2b3a:	91 f1       	breq	.+100    	; 0x2ba0 <LCD_staticdisplayString+0x90>
	{

		switch (alignment)
    2b3c:	80 91 3c 03 	lds	r24, 0x033C
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3f 8b       	std	Y+23, r19	; 0x17
    2b46:	2e 8b       	std	Y+22, r18	; 0x16
    2b48:	8e 89       	ldd	r24, Y+22	; 0x16
    2b4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	91 05       	cpc	r25, r1
    2b50:	81 f0       	breq	.+32     	; 0x2b72 <LCD_staticdisplayString+0x62>
    2b52:	2e 89       	ldd	r18, Y+22	; 0x16
    2b54:	3f 89       	ldd	r19, Y+23	; 0x17
    2b56:	23 30       	cpi	r18, 0x03	; 3
    2b58:	31 05       	cpc	r19, r1
    2b5a:	c9 f0       	breq	.+50     	; 0x2b8e <LCD_staticdisplayString+0x7e>
    2b5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2b5e:	9f 89       	ldd	r25, Y+23	; 0x17
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	91 05       	cpc	r25, r1
    2b64:	e9 f4       	brne	.+58     	; 0x2ba0 <LCD_staticdisplayString+0x90>
		{

		case LCD_LEFT:
			LCD_setAddressPosition(row, 0);
    2b66:	80 91 50 03 	lds	r24, 0x0350
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
    2b70:	17 c0       	rjmp	.+46     	; 0x2ba0 <LCD_staticdisplayString+0x90>
			break;
		case LCD_CENTER:
			LCD_setAddressPosition(row, 8 - (size / 2));
    2b72:	20 91 50 03 	lds	r18, 0x0350
    2b76:	89 89       	ldd	r24, Y+17	; 0x11
    2b78:	98 2f       	mov	r25, r24
    2b7a:	96 95       	lsr	r25
    2b7c:	88 e0       	ldi	r24, 0x08	; 8
    2b7e:	38 2f       	mov	r19, r24
    2b80:	39 1b       	sub	r19, r25
    2b82:	93 2f       	mov	r25, r19
    2b84:	82 2f       	mov	r24, r18
    2b86:	69 2f       	mov	r22, r25
    2b88:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>
    2b8c:	09 c0       	rjmp	.+18     	; 0x2ba0 <LCD_staticdisplayString+0x90>
			break;
		case LCD_RIGHT:
			LCD_setAddressPosition(row, 16 - size);
    2b8e:	20 91 50 03 	lds	r18, 0x0350
    2b92:	90 e1       	ldi	r25, 0x10	; 16
    2b94:	89 89       	ldd	r24, Y+17	; 0x11
    2b96:	98 1b       	sub	r25, r24
    2b98:	82 2f       	mov	r24, r18
    2b9a:	69 2f       	mov	r22, r25
    2b9c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>

		}

	}

	for (u8* i = _char; *i != '\0'; i++)
    2ba0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ba2:	9b 89       	ldd	r25, Y+19	; 0x13
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
    2ba8:	80 c0       	rjmp	.+256    	; 0x2caa <LCD_staticdisplayString+0x19a>
	{

		LCD_displayChar(*i);
    2baa:	ef 85       	ldd	r30, Y+15	; 0x0f
    2bac:	f8 89       	ldd	r31, Y+16	; 0x10
    2bae:	80 81       	ld	r24, Z
    2bb0:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
		if (animate == LCD_ANIMATE)
    2bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <LCD_staticdisplayString+0xac>
    2bba:	72 c0       	rjmp	.+228    	; 0x2ca0 <LCD_staticdisplayString+0x190>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a8 ec       	ldi	r26, 0xC8	; 200
    2bc2:	b2 e4       	ldi	r27, 0x42	; 66
    2bc4:	8b 87       	std	Y+11, r24	; 0x0b
    2bc6:	9c 87       	std	Y+12, r25	; 0x0c
    2bc8:	ad 87       	std	Y+13, r26	; 0x0d
    2bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a e7       	ldi	r20, 0x7A	; 122
    2bda:	55 e4       	ldi	r21, 0x45	; 69
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8f 83       	std	Y+7, r24	; 0x07
    2be6:	98 87       	std	Y+8, r25	; 0x08
    2be8:	a9 87       	std	Y+9, r26	; 0x09
    2bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <LCD_staticdisplayString+0xfe>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <LCD_staticdisplayString+0x17c>
	else if (__tmp > 65535)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	4c f5       	brge	.+82     	; 0x2c78 <LCD_staticdisplayString+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9e 83       	std	Y+6, r25	; 0x06
    2c4c:	8d 83       	std	Y+5, r24	; 0x05
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <LCD_staticdisplayString+0x15e>
    2c50:	80 e9       	ldi	r24, 0x90	; 144
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <LCD_staticdisplayString+0x14c>
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9e 83       	std	Y+6, r25	; 0x06
    2c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <LCD_staticdisplayString+0x140>
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <LCD_staticdisplayString+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7a:	78 85       	ldd	r23, Y+8	; 0x08
    2c7c:	89 85       	ldd	r24, Y+9	; 0x09
    2c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	9a 83       	std	Y+2, r25	; 0x02
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_staticdisplayString+0x188>
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01

		}

	}

	for (u8* i = _char; *i != '\0'; i++)
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	98 89       	ldd	r25, Y+16	; 0x10
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	98 8b       	std	Y+16, r25	; 0x10
    2ca8:	8f 87       	std	Y+15, r24	; 0x0f
    2caa:	ef 85       	ldd	r30, Y+15	; 0x0f
    2cac:	f8 89       	ldd	r31, Y+16	; 0x10
    2cae:	80 81       	ld	r24, Z
    2cb0:	88 23       	and	r24, r24
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <LCD_staticdisplayString+0x1a6>
    2cb4:	7a cf       	rjmp	.-268    	; 0x2baa <LCD_staticdisplayString+0x9a>
			_delay_ms(100);
		}

	}

}
    2cb6:	67 96       	adiw	r28, 0x17	; 23
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_displayString>:

void LCD_displayString(u8* _char)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <LCD_displayString+0x6>
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01

	LCD_staticdisplayString(_char, LCD_NO_ANIMATE, alignment);
    2cd6:	20 91 3c 03 	lds	r18, 0x033C
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	42 2f       	mov	r20, r18
    2ce2:	0e 94 88 15 	call	0x2b10	; 0x2b10 <LCD_staticdisplayString>

}
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <LCD_displayStringWithAnimation>:

void LCD_displayStringWithAnimation(u8* _char)
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <LCD_displayStringWithAnimation+0x6>
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01

	LCD_staticdisplayString(_char, LCD_ANIMATE, alignment);
    2cfe:	20 91 3c 03 	lds	r18, 0x033C
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	42 2f       	mov	r20, r18
    2d0a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <LCD_staticdisplayString>

}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <LCD_sendCmd>:

void LCD_sendCmd(u8 cmd)
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	89 83       	std	Y+1, r24	; 0x01

	// RS = 0 -> to get command
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	LCD_sendData(cmd);
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_sendData>

}
    2d34:	0f 90       	pop	r0
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <LCD_ClearRow>:

void LCD_ClearRow(lcd_row_t rowNum)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <LCD_ClearRow+0x6>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	8a 83       	std	Y+2, r24	; 0x02

	LCD_setAddressPosition(rowNum, 0);
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>

	for (u8 i = 0; i < 16; i++)
    2d50:	19 82       	std	Y+1, r1	; 0x01
    2d52:	06 c0       	rjmp	.+12     	; 0x2d60 <LCD_ClearRow+0x24>
		LCD_displayChar(' ');
    2d54:	80 e2       	ldi	r24, 0x20	; 32
    2d56:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
void LCD_ClearRow(lcd_row_t rowNum)
{

	LCD_setAddressPosition(rowNum, 0);

	for (u8 i = 0; i < 16; i++)
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	80 31       	cpi	r24, 0x10	; 16
    2d64:	b8 f3       	brcs	.-18     	; 0x2d54 <LCD_ClearRow+0x18>
		LCD_displayChar(' ');

	LCD_setAddressPosition(rowNum, 0);
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <LCD_setAddressPosition>

}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <LCD_setAlignment>:

void LCD_setAlignment(lcd_alignment_t align)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	89 83       	std	Y+1, r24	; 0x01

	alignment = align;
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	80 93 3c 03 	sts	0x033C, r24

}
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <LCD_setAddressPosition>:

void LCD_setAddressPosition(u8 rowIn, u8 colIn)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <LCD_setAddressPosition+0x6>
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <LCD_setAddressPosition+0x8>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	6a 83       	std	Y+2, r22	; 0x02

	switch (rowIn)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3c 83       	std	Y+4, r19	; 0x04
    2daa:	2b 83       	std	Y+3, r18	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	31 f0       	breq	.+12     	; 0x2dc0 <LCD_setAddressPosition+0x2e>
    2db4:	2b 81       	ldd	r18, Y+3	; 0x03
    2db6:	3c 81       	ldd	r19, Y+4	; 0x04
    2db8:	21 30       	cpi	r18, 0x01	; 1
    2dba:	31 05       	cpc	r19, r1
    2dbc:	49 f0       	breq	.+18     	; 0x2dd0 <LCD_setAddressPosition+0x3e>
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <LCD_setAddressPosition+0x4c>
	{

	case LCD_ROW0:
		row = rowIn;
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	80 93 50 03 	sts	0x0350, r24
		LCD_sendCmd(LCD_ROW0_AD + colIn);
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	80 58       	subi	r24, 0x80	; 128
    2dca:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <LCD_setAddressPosition+0x4c>
		break;

	case LCD_ROW1:
		row = rowIn;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	80 93 50 03 	sts	0x0350, r24
		LCD_sendCmd(LCD_ROW1_AD + colIn);
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	80 54       	subi	r24, 0x40	; 64
    2dda:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_sendCmd>
		break;

	}

}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <Keypad_keypadInit>:
		{'*', '0', '#', 'D'}
};

void Keypad_keypadInit()

{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62

	// Set row to input
	Dio_configChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	63 e0       	ldi	r22, 0x03	; 3
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN4, DIO_INPUT);
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	64 e0       	ldi	r22, 0x04	; 4
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN5, DIO_INPUT);
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	65 e0       	ldi	r22, 0x05	; 5
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN6, DIO_INPUT);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	66 e0       	ldi	r22, 0x06	; 6
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// Set col to output
	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	65 e0       	ldi	r22, 0x05	; 5
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	66 e0       	ldi	r22, 0x06	; 6
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	67 e0       	ldi	r22, 0x07	; 7
    2e3e:	41 e0       	ldi	r20, 0x01	; 1
    2e40:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// Set col to high
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	64 e0       	ldi	r22, 0x04	; 4
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	65 e0       	ldi	r22, 0x05	; 5
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	66 e0       	ldi	r22, 0x06	; 6
    2e5c:	41 e0       	ldi	r20, 0x01	; 1
    2e5e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	67 e0       	ldi	r22, 0x07	; 7
    2e66:	41 e0       	ldi	r20, 0x01	; 1
    2e68:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <Keypad_buttonIsPressed>:
boolean Keypad_buttonIsPressed()
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	0f 92       	push	r0
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62

	if (
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	63 e0       	ldi	r22, 0x03	; 3
    2e80:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    2e84:	88 23       	and	r24, r24
    2e86:	91 f4       	brne	.+36     	; 0x2eac <Keypad_buttonIsPressed+0x3a>
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	64 e0       	ldi	r22, 0x04	; 4
    2e8c:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    2e90:	88 23       	and	r24, r24
    2e92:	61 f4       	brne	.+24     	; 0x2eac <Keypad_buttonIsPressed+0x3a>
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	65 e0       	ldi	r22, 0x05	; 5
    2e98:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    2e9c:	88 23       	and	r24, r24
    2e9e:	31 f4       	brne	.+12     	; 0x2eac <Keypad_buttonIsPressed+0x3a>
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	66 e0       	ldi	r22, 0x06	; 6
    2ea4:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    2ea8:	88 23       	and	r24, r24
    2eaa:	19 f0       	breq	.+6      	; 0x2eb2 <Keypad_buttonIsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN5) ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN6)

	)
	{
		return TRUE;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	01 c0       	rjmp	.+2      	; 0x2eb4 <Keypad_buttonIsPressed+0x42>
	}
	else
	{
		return FALSE;
    2eb2:	19 82       	std	Y+1, r1	; 0x01
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <Keypad_getButton>:

u8 Keypad_getButton()
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	61 97       	sbiw	r28, 0x11	; 17
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61

//	if (Keypad_buttonIsPressed() == FALSE)
//		return KEYPAD_INVALID;

	keypad_row_t row = KEYPAD_INVALID;
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	88 8b       	std	Y+16, r24	; 0x10
	keypad_col_t col = KEYPAD_INVALID;
    2ed6:	8f ef       	ldi	r24, 0xFF	; 255
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f

//	if (!Keypad_buttonIsPressed())
//		return KEYPAD_INVALID;

	row = Keypad_getRow();
    2eda:	0e 94 15 18 	call	0x302a	; 0x302a <Keypad_getRow>
    2ede:	88 8b       	std	Y+16, r24	; 0x10

	if (row == KEYPAD_INVALID)
    2ee0:	88 89       	ldd	r24, Y+16	; 0x10
    2ee2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee4:	19 f4       	brne	.+6      	; 0x2eec <Keypad_getButton+0x2e>
		return KEYPAD_INVALID;
    2ee6:	8f ef       	ldi	r24, 0xFF	; 255
    2ee8:	89 8b       	std	Y+17, r24	; 0x11
    2eea:	95 c0       	rjmp	.+298    	; 0x3016 <Keypad_getButton+0x158>

	col = Keypad_getCol(row);
    2eec:	88 89       	ldd	r24, Y+16	; 0x10
    2eee:	0e 94 44 18 	call	0x3088	; 0x3088 <Keypad_getCol>
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f

	if (row == KEYPAD_INVALID || col == KEYPAD_INVALID)
    2ef4:	88 89       	ldd	r24, Y+16	; 0x10
    2ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef8:	19 f0       	breq	.+6      	; 0x2f00 <Keypad_getButton+0x42>
    2efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2efc:	8f 3f       	cpi	r24, 0xFF	; 255
    2efe:	19 f4       	brne	.+6      	; 0x2f06 <Keypad_getButton+0x48>
		return KEYPAD_INVALID;
    2f00:	8f ef       	ldi	r24, 0xFF	; 255
    2f02:	89 8b       	std	Y+17, r24	; 0x11
    2f04:	88 c0       	rjmp	.+272    	; 0x3016 <Keypad_getButton+0x158>

	while (Keypad_buttonIsPressed() == TRUE);
    2f06:	0e 94 39 17 	call	0x2e72	; 0x2e72 <Keypad_buttonIsPressed>
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	e1 f3       	breq	.-8      	; 0x2f06 <Keypad_getButton+0x48>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 ea       	ldi	r26, 0xA0	; 160
    2f14:	b0 e4       	ldi	r27, 0x40	; 64
    2f16:	8b 87       	std	Y+11, r24	; 0x0b
    2f18:	9c 87       	std	Y+12, r25	; 0x0c
    2f1a:	ad 87       	std	Y+13, r26	; 0x0d
    2f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a e7       	ldi	r20, 0x7A	; 122
    2f2c:	55 e4       	ldi	r21, 0x45	; 69
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8f 83       	std	Y+7, r24	; 0x07
    2f38:	98 87       	std	Y+8, r25	; 0x08
    2f3a:	a9 87       	std	Y+9, r26	; 0x09
    2f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <Keypad_getButton+0xa2>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <Keypad_getButton+0x120>
	else if (__tmp > 65535)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <Keypad_getButton+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <Keypad_getButton+0x102>
    2fa2:	80 e9       	ldi	r24, 0x90	; 144
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <Keypad_getButton+0xf0>
    2fb2:	9c 83       	std	Y+4, r25	; 0x04
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <Keypad_getButton+0xe4>
    2fc8:	14 c0       	rjmp	.+40     	; 0x2ff2 <Keypad_getButton+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <Keypad_getButton+0x12c>
    2fee:	9a 83       	std	Y+2, r25	; 0x02
    2ff0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	return Keypad_Layout[row][col]; // || (row << 4) | col
    2ff2:	88 89       	ldd	r24, Y+16	; 0x10
    2ff4:	48 2f       	mov	r20, r24
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	ca 01       	movw	r24, r20
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	82 0f       	add	r24, r18
    300a:	93 1f       	adc	r25, r19
    300c:	fc 01       	movw	r30, r24
    300e:	e3 5c       	subi	r30, 0xC3	; 195
    3010:	fc 4f       	sbci	r31, 0xFC	; 252
    3012:	80 81       	ld	r24, Z
    3014:	89 8b       	std	Y+17, r24	; 0x11
    3016:	89 89       	ldd	r24, Y+17	; 0x11

}
    3018:	61 96       	adiw	r28, 0x11	; 17
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <Keypad_getRow>:

keypad_row_t Keypad_getRow()
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	0f 92       	push	r0
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == 1)
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	63 e0       	ldi	r22, 0x03	; 3
    3038:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	11 f4       	brne	.+4      	; 0x3044 <Keypad_getRow+0x1a>
	{
//		LCD_displayInt(KEYPAD_ROW0);
		return KEYPAD_ROW0;
    3040:	19 82       	std	Y+1, r1	; 0x01
    3042:	1d c0       	rjmp	.+58     	; 0x307e <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN4) == 1)
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	64 e0       	ldi	r22, 0x04	; 4
    3048:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    304c:	81 30       	cpi	r24, 0x01	; 1
    304e:	19 f4       	brne	.+6      	; 0x3056 <Keypad_getRow+0x2c>
	{
//		LCD_displayInt(KEYPAD_ROW1);
		return KEYPAD_ROW1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	14 c0       	rjmp	.+40     	; 0x307e <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN5) == 1)
    3056:	82 e0       	ldi	r24, 0x02	; 2
    3058:	65 e0       	ldi	r22, 0x05	; 5
    305a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	19 f4       	brne	.+6      	; 0x3068 <Keypad_getRow+0x3e>
	{
//		LCD_displayInt(KEYPAD_ROW2);
		return KEYPAD_ROW2;
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	0b c0       	rjmp	.+22     	; 0x307e <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN6) == 1)
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	66 e0       	ldi	r22, 0x06	; 6
    306c:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    3070:	81 30       	cpi	r24, 0x01	; 1
    3072:	19 f4       	brne	.+6      	; 0x307a <Keypad_getRow+0x50>
	{
//		LCD_displayInt(KEYPAD_ROW3);
		return KEYPAD_ROW3;
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	89 83       	std	Y+1, r24	; 0x01
    3078:	02 c0       	rjmp	.+4      	; 0x307e <Keypad_getRow+0x54>
	}
	else
		return KEYPAD_INVALID;
    307a:	8f ef       	ldi	r24, 0xFF	; 255
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <Keypad_getCol>:

keypad_col_t Keypad_getCol(keypad_row_t row)
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	00 d0       	rcall	.+0      	; 0x308e <Keypad_getCol+0x6>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	89 83       	std	Y+1, r24	; 0x01
	// Switch every col to 0 and check if row still high
	// If row switched to low, return col


	// Col 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_LOW);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	64 e0       	ldi	r22, 0x04	; 4
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	if (row != Keypad_getRow())
    309e:	0e 94 15 18 	call	0x302a	; 0x302a <Keypad_getRow>
    30a2:	98 2f       	mov	r25, r24
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	98 17       	cp	r25, r24
    30a8:	39 f0       	breq	.+14     	; 0x30b8 <Keypad_getCol+0x30>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	64 e0       	ldi	r22, 0x04	; 4
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		return KEYPAD_COL0;
    30b4:	1a 82       	std	Y+2, r1	; 0x02
    30b6:	4f c0       	rjmp	.+158    	; 0x3156 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	64 e0       	ldi	r22, 0x04	; 4
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Col 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_LOW);
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	65 e0       	ldi	r22, 0x05	; 5
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	if (row != Keypad_getRow())
    30cc:	0e 94 15 18 	call	0x302a	; 0x302a <Keypad_getRow>
    30d0:	98 2f       	mov	r25, r24
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	98 17       	cp	r25, r24
    30d6:	41 f0       	breq	.+16     	; 0x30e8 <Keypad_getCol+0x60>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	65 e0       	ldi	r22, 0x05	; 5
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		return KEYPAD_COL1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    30e6:	37 c0       	rjmp	.+110    	; 0x3156 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	65 e0       	ldi	r22, 0x05	; 5
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Col 3
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_LOW);
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	66 e0       	ldi	r22, 0x06	; 6
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	if (row != Keypad_getRow())
    30fc:	0e 94 15 18 	call	0x302a	; 0x302a <Keypad_getRow>
    3100:	98 2f       	mov	r25, r24
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	98 17       	cp	r25, r24
    3106:	41 f0       	breq	.+16     	; 0x3118 <Keypad_getCol+0x90>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	66 e0       	ldi	r22, 0x06	; 6
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		return KEYPAD_COL2;
    3112:	82 e0       	ldi	r24, 0x02	; 2
    3114:	8a 83       	std	Y+2, r24	; 0x02
    3116:	1f c0       	rjmp	.+62     	; 0x3156 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	66 e0       	ldi	r22, 0x06	; 6
    311c:	41 e0       	ldi	r20, 0x01	; 1
    311e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// Col 4
	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_LOW);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	67 e0       	ldi	r22, 0x07	; 7
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
	if (row != Keypad_getRow())
    312c:	0e 94 15 18 	call	0x302a	; 0x302a <Keypad_getRow>
    3130:	98 2f       	mov	r25, r24
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	98 17       	cp	r25, r24
    3136:	41 f0       	breq	.+16     	; 0x3148 <Keypad_getCol+0xc0>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	67 e0       	ldi	r22, 0x07	; 7
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		return KEYPAD_COL3;
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	8a 83       	std	Y+2, r24	; 0x02
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <Keypad_getCol+0xce>

	}

	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	67 e0       	ldi	r22, 0x07	; 7
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	return KEYPAD_INVALID;
    3152:	8f ef       	ldi	r24, 0xFF	; 255
    3154:	8a 83       	std	Y+2, r24	; 0x02
    3156:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <Keypad_GetString>:


void Keypad_GetString(u8* string, u8 size)
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	00 d0       	rcall	.+0      	; 0x3168 <Keypad_GetString+0x6>
    3168:	00 d0       	rcall	.+0      	; 0x316a <Keypad_GetString+0x8>
    316a:	0f 92       	push	r0
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
    3174:	6d 83       	std	Y+5, r22	; 0x05

	u8 tmp = Keypad_getButton();
    3176:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    317a:	8a 83       	std	Y+2, r24	; 0x02
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <Keypad_GetString+0x22>
	while (tmp == KEYPAD_INVALID)
	{
		tmp = Keypad_getButton();
    317e:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    3182:	8a 83       	std	Y+2, r24	; 0x02

void Keypad_GetString(u8* string, u8 size)
{

	u8 tmp = Keypad_getButton();
	while (tmp == KEYPAD_INVALID)
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	8f 3f       	cpi	r24, 0xFF	; 255
    3188:	d1 f3       	breq	.-12     	; 0x317e <Keypad_GetString+0x1c>
	{
		tmp = Keypad_getButton();
	}

	u8 i = 0;
    318a:	19 82       	std	Y+1, r1	; 0x01
    318c:	17 c0       	rjmp	.+46     	; 0x31bc <Keypad_GetString+0x5a>

	while ((tmp != '*') && (i < size - 1))
	{

		string[i] = tmp;
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	fc 01       	movw	r30, r24
    319a:	e2 0f       	add	r30, r18
    319c:	f3 1f       	adc	r31, r19
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	80 83       	st	Z, r24
		tmp = Keypad_getButton();
    31a2:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    31a6:	8a 83       	std	Y+2, r24	; 0x02
    31a8:	03 c0       	rjmp	.+6      	; 0x31b0 <Keypad_GetString+0x4e>
		while (tmp == KEYPAD_INVALID)
		{
			tmp = Keypad_getButton();
    31aa:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <Keypad_getButton>
    31ae:	8a 83       	std	Y+2, r24	; 0x02
	while ((tmp != '*') && (i < size - 1))
	{

		string[i] = tmp;
		tmp = Keypad_getButton();
		while (tmp == KEYPAD_INVALID)
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	8f 3f       	cpi	r24, 0xFF	; 255
    31b4:	d1 f3       	breq	.-12     	; 0x31aa <Keypad_GetString+0x48>
		{
			tmp = Keypad_getButton();
		}
		i++;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	89 83       	std	Y+1, r24	; 0x01
		tmp = Keypad_getButton();
	}

	u8 i = 0;

	while ((tmp != '*') && (i < size - 1))
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	8a 32       	cpi	r24, 0x2A	; 42
    31c0:	51 f0       	breq	.+20     	; 0x31d6 <Keypad_GetString+0x74>
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	28 17       	cp	r18, r24
    31d2:	39 07       	cpc	r19, r25
    31d4:	e4 f2       	brlt	.-72     	; 0x318e <Keypad_GetString+0x2c>
		i++;

	}

	// For precise memory allocation, add 1 to the size of the array for the null char
	string[i] = '\0';
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	fc 01       	movw	r30, r24
    31e2:	e2 0f       	add	r30, r18
    31e4:	f3 1f       	adc	r31, r19
    31e6:	10 82       	st	Z, r1

}
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <HC05_Init>:
 */

#include "HC-05.h"

void HC05_Init()
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62

	// HC 05 has to be communicated with 9600 baudrate when data mode
	UART_Init(9600);
    3200:	60 e8       	ldi	r22, 0x80	; 128
    3202:	75 e2       	ldi	r23, 0x25	; 37
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 65 1d 	call	0x3aca	; 0x3aca <UART_Init>
//	Dio_configChanel(DIO_PORTD, DIO_PIN2, DIO_OUTPUT);

//	// State (if the device is connected or not)
//	Dio_configChanel(DIO_PORTD, DIO_PIN3, DIO_INPUT);

}
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <HC05_IsConnected>:

boolean HC05_IsConnected()
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62

	if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN3))
    321c:	83 e0       	ldi	r24, 0x03	; 3
    321e:	63 e0       	ldi	r22, 0x03	; 3
    3220:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    3224:	88 23       	and	r24, r24
    3226:	19 f0       	breq	.+6      	; 0x322e <HC05_IsConnected+0x1c>
	{
		return TRUE;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <HC05_IsConnected+0x1e>
	}

	return FALSE;
    322e:	19 82       	std	Y+1, r1	; 0x01
    3230:	89 81       	ldd	r24, Y+1	; 0x01

}
    3232:	0f 90       	pop	r0
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <HC05_ReceiveCharNonBlock>:

u8 HC05_ReceiveCharNonBlock()
{
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62

	return UART_ReceiveNonBlock();
    3242:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <UART_ReceiveNonBlock>

}
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <HC05_SendString>:

boolean HC05_SendString(u8* string)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	00 d0       	rcall	.+0      	; 0x3252 <HC05_SendString+0x6>
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01

//	if (HC05_IsConnected())
//	{

		UART_SendString(string);
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <UART_SendString>
		return TRUE;
    3262:	81 e0       	ldi	r24, 0x01	; 1

//	}
//	return FALSE;

}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <HC05_ReceiveString>:

boolean HC05_ReceiveString(u8* string, u8 size)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <HC05_ReceiveString+0x6>
    3274:	0f 92       	push	r0
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	6b 83       	std	Y+3, r22	; 0x03

//	if (HC05_IsConnected())
//	{

		UART_ReciveString(string, size);
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	9a 81       	ldd	r25, Y+2	; 0x02
    3284:	6b 81       	ldd	r22, Y+3	; 0x03
    3286:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_ReciveString>
		return TRUE;
    328a:	81 e0       	ldi	r24, 0x01	; 1

//	}
//	return FALSE;

}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <EEPROM_Init>:
#include "Led.h"
#include "LCD.h"


void EEPROM_Init()
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	2e 97       	sbiw	r28, 0x0e	; 14
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61

	TWI_initMaster();
    32ac:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <TWI_initMaster>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	aa e7       	ldi	r26, 0x7A	; 122
    32b6:	b4 e4       	ldi	r27, 0x44	; 68
    32b8:	8b 87       	std	Y+11, r24	; 0x0b
    32ba:	9c 87       	std	Y+12, r25	; 0x0c
    32bc:	ad 87       	std	Y+13, r26	; 0x0d
    32be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4a e7       	ldi	r20, 0x7A	; 122
    32ce:	55 e4       	ldi	r21, 0x45	; 69
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	8f 83       	std	Y+7, r24	; 0x07
    32da:	98 87       	std	Y+8, r25	; 0x08
    32dc:	a9 87       	std	Y+9, r26	; 0x09
    32de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e0:	6f 81       	ldd	r22, Y+7	; 0x07
    32e2:	78 85       	ldd	r23, Y+8	; 0x08
    32e4:	89 85       	ldd	r24, Y+9	; 0x09
    32e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e8       	ldi	r20, 0x80	; 128
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f4:	88 23       	and	r24, r24
    32f6:	2c f4       	brge	.+10     	; 0x3302 <EEPROM_Init+0x6a>
		__ticks = 1;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9e 83       	std	Y+6, r25	; 0x06
    32fe:	8d 83       	std	Y+5, r24	; 0x05
    3300:	3f c0       	rjmp	.+126    	; 0x3380 <EEPROM_Init+0xe8>
	else if (__tmp > 65535)
    3302:	6f 81       	ldd	r22, Y+7	; 0x07
    3304:	78 85       	ldd	r23, Y+8	; 0x08
    3306:	89 85       	ldd	r24, Y+9	; 0x09
    3308:	9a 85       	ldd	r25, Y+10	; 0x0a
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	3f ef       	ldi	r19, 0xFF	; 255
    330e:	4f e7       	ldi	r20, 0x7F	; 127
    3310:	57 e4       	ldi	r21, 0x47	; 71
    3312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3316:	18 16       	cp	r1, r24
    3318:	4c f5       	brge	.+82     	; 0x336c <EEPROM_Init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331a:	6b 85       	ldd	r22, Y+11	; 0x0b
    331c:	7c 85       	ldd	r23, Y+12	; 0x0c
    331e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3320:	9e 85       	ldd	r25, Y+14	; 0x0e
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e2       	ldi	r20, 0x20	; 32
    3328:	51 e4       	ldi	r21, 0x41	; 65
    332a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
    3342:	0f c0       	rjmp	.+30     	; 0x3362 <EEPROM_Init+0xca>
    3344:	80 e9       	ldi	r24, 0x90	; 144
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	9c 81       	ldd	r25, Y+4	; 0x04
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <EEPROM_Init+0xb8>
    3354:	9c 83       	std	Y+4, r25	; 0x04
    3356:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	69 f7       	brne	.-38     	; 0x3344 <EEPROM_Init+0xac>
    336a:	14 c0       	rjmp	.+40     	; 0x3394 <EEPROM_Init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336c:	6f 81       	ldd	r22, Y+7	; 0x07
    336e:	78 85       	ldd	r23, Y+8	; 0x08
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	9a 81       	ldd	r25, Y+2	; 0x02
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <EEPROM_Init+0xf4>
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    3394:	2e 96       	adiw	r28, 0x0e	; 14
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <EEPROM_WriteByte>:

void EEPROM_WriteByte(u8 pageAddress, u8 dataAddress, u8 data)
{
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	61 97       	sbiw	r28, 0x11	; 17
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	8f 87       	std	Y+15, r24	; 0x0f
    33bc:	68 8b       	std	Y+16, r22	; 0x10
    33be:	49 8b       	std	Y+17, r20	; 0x11

	LCD_displayChar('S');
    33c0:	83 e5       	ldi	r24, 0x53	; 83
    33c2:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
	TWI_sendStartCondition();
    33c6:	0e 94 34 22 	call	0x4468	; 0x4468 <TWI_sendStartCondition>
	TWI_sendSlaveAddwithWrite( (0xA0 >> 1) | pageAddress);
    33ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    33cc:	80 65       	ori	r24, 0x50	; 80
    33ce:	0e 94 96 22 	call	0x452c	; 0x452c <TWI_sendSlaveAddwithWrite>
	TWI_sendMasterDataByte(dataAddress);
    33d2:	88 89       	ldd	r24, Y+16	; 0x10
    33d4:	0e 94 0a 23 	call	0x4614	; 0x4614 <TWI_sendMasterDataByte>
	TWI_sendMasterDataByte(data);
    33d8:	89 89       	ldd	r24, Y+17	; 0x11
    33da:	0e 94 0a 23 	call	0x4614	; 0x4614 <TWI_sendMasterDataByte>
	TWI_sendStopCondition();
    33de:	0e 94 79 22 	call	0x44f2	; 0x44f2 <TWI_sendStopCondition>
	LCD_displayChar('E');
    33e2:	85 e4       	ldi	r24, 0x45	; 69
    33e4:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	a0 ea       	ldi	r26, 0xA0	; 160
    33ee:	b0 e4       	ldi	r27, 0x40	; 64
    33f0:	8b 87       	std	Y+11, r24	; 0x0b
    33f2:	9c 87       	std	Y+12, r25	; 0x0c
    33f4:	ad 87       	std	Y+13, r26	; 0x0d
    33f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	4a e7       	ldi	r20, 0x7A	; 122
    3406:	55 e4       	ldi	r21, 0x45	; 69
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8f 83       	std	Y+7, r24	; 0x07
    3412:	98 87       	std	Y+8, r25	; 0x08
    3414:	a9 87       	std	Y+9, r26	; 0x09
    3416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3418:	6f 81       	ldd	r22, Y+7	; 0x07
    341a:	78 85       	ldd	r23, Y+8	; 0x08
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e8       	ldi	r20, 0x80	; 128
    3426:	5f e3       	ldi	r21, 0x3F	; 63
    3428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342c:	88 23       	and	r24, r24
    342e:	2c f4       	brge	.+10     	; 0x343a <EEPROM_WriteByte+0x94>
		__ticks = 1;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	3f c0       	rjmp	.+126    	; 0x34b8 <EEPROM_WriteByte+0x112>
	else if (__tmp > 65535)
    343a:	6f 81       	ldd	r22, Y+7	; 0x07
    343c:	78 85       	ldd	r23, Y+8	; 0x08
    343e:	89 85       	ldd	r24, Y+9	; 0x09
    3440:	9a 85       	ldd	r25, Y+10	; 0x0a
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	3f ef       	ldi	r19, 0xFF	; 255
    3446:	4f e7       	ldi	r20, 0x7F	; 127
    3448:	57 e4       	ldi	r21, 0x47	; 71
    344a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    344e:	18 16       	cp	r1, r24
    3450:	4c f5       	brge	.+82     	; 0x34a4 <EEPROM_WriteByte+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3452:	6b 85       	ldd	r22, Y+11	; 0x0b
    3454:	7c 85       	ldd	r23, Y+12	; 0x0c
    3456:	8d 85       	ldd	r24, Y+13	; 0x0d
    3458:	9e 85       	ldd	r25, Y+14	; 0x0e
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e2       	ldi	r20, 0x20	; 32
    3460:	51 e4       	ldi	r21, 0x41	; 65
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	0f c0       	rjmp	.+30     	; 0x349a <EEPROM_WriteByte+0xf4>
    347c:	80 e9       	ldi	r24, 0x90	; 144
    347e:	91 e0       	ldi	r25, 0x01	; 1
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	8b 83       	std	Y+3, r24	; 0x03
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	9c 81       	ldd	r25, Y+4	; 0x04
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <EEPROM_WriteByte+0xe2>
    348c:	9c 83       	std	Y+4, r25	; 0x04
    348e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	69 f7       	brne	.-38     	; 0x347c <EEPROM_WriteByte+0xd6>
    34a2:	14 c0       	rjmp	.+40     	; 0x34cc <EEPROM_WriteByte+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a4:	6f 81       	ldd	r22, Y+7	; 0x07
    34a6:	78 85       	ldd	r23, Y+8	; 0x08
    34a8:	89 85       	ldd	r24, Y+9	; 0x09
    34aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9e 83       	std	Y+6, r25	; 0x06
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	9e 81       	ldd	r25, Y+6	; 0x06
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	f1 f7       	brne	.-4      	; 0x34c4 <EEPROM_WriteByte+0x11e>
    34c8:	9a 83       	std	Y+2, r25	; 0x02
    34ca:	89 83       	std	Y+1, r24	; 0x01

	// In order to be able to use ReadByte function right after this function
	_delay_ms(5);

}
    34cc:	61 96       	adiw	r28, 0x11	; 17
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <EEPROM_ReadByte>:

u8 EEPROM_ReadByte(u8 pageAddress, u8 dataAddress)
{
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	61 97       	sbiw	r28, 0x11	; 17
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	88 8b       	std	Y+16, r24	; 0x10
    34f4:	69 8b       	std	Y+17, r22	; 0x11

	u8 data = 0;
    34f6:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_displayChar('S');
    34f8:	83 e5       	ldi	r24, 0x53	; 83
    34fa:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
	TWI_sendStartCondition();
    34fe:	0e 94 34 22 	call	0x4468	; 0x4468 <TWI_sendStartCondition>
	LCD_displayChar('E');
    3502:	85 e4       	ldi	r24, 0x45	; 69
    3504:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>
	TWI_sendSlaveAddwithWrite( (0xA0 >> 1) | pageAddress);
    3508:	88 89       	ldd	r24, Y+16	; 0x10
    350a:	80 65       	ori	r24, 0x50	; 80
    350c:	0e 94 96 22 	call	0x452c	; 0x452c <TWI_sendSlaveAddwithWrite>
	TWI_sendMasterDataByte(dataAddress);
    3510:	89 89       	ldd	r24, Y+17	; 0x11
    3512:	0e 94 0a 23 	call	0x4614	; 0x4614 <TWI_sendMasterDataByte>
	TWI_sendRepStartCondition();
    3516:	0e 94 58 22 	call	0x44b0	; 0x44b0 <TWI_sendRepStartCondition>
	TWI_sendSlaveAddwithRead( (0xA0 >> 1) | pageAddress);
    351a:	88 89       	ldd	r24, Y+16	; 0x10
    351c:	80 65       	ori	r24, 0x50	; 80
    351e:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <TWI_sendSlaveAddwithRead>
	TWI_readMasterDataByte(&data);
    3522:	ce 01       	movw	r24, r28
    3524:	0f 96       	adiw	r24, 0x0f	; 15
    3526:	0e 94 2b 23 	call	0x4656	; 0x4656 <TWI_readMasterDataByte>
	TWI_sendStopCondition();
    352a:	0e 94 79 22 	call	0x44f2	; 0x44f2 <TWI_sendStopCondition>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 ea       	ldi	r26, 0xA0	; 160
    3534:	b0 e4       	ldi	r27, 0x40	; 64
    3536:	8b 87       	std	Y+11, r24	; 0x0b
    3538:	9c 87       	std	Y+12, r25	; 0x0c
    353a:	ad 87       	std	Y+13, r26	; 0x0d
    353c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3540:	7c 85       	ldd	r23, Y+12	; 0x0c
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a e7       	ldi	r20, 0x7A	; 122
    354c:	55 e4       	ldi	r21, 0x45	; 69
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8f 83       	std	Y+7, r24	; 0x07
    3558:	98 87       	std	Y+8, r25	; 0x08
    355a:	a9 87       	std	Y+9, r26	; 0x09
    355c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355e:	6f 81       	ldd	r22, Y+7	; 0x07
    3560:	78 85       	ldd	r23, Y+8	; 0x08
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <EEPROM_ReadByte+0xa2>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <EEPROM_ReadByte+0x120>
	else if (__tmp > 65535)
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <EEPROM_ReadByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <EEPROM_ReadByte+0x102>
    35c2:	80 e9       	ldi	r24, 0x90	; 144
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
    35ca:	8b 81       	ldd	r24, Y+3	; 0x03
    35cc:	9c 81       	ldd	r25, Y+4	; 0x04
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <EEPROM_ReadByte+0xf0>
    35d2:	9c 83       	std	Y+4, r25	; 0x04
    35d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <EEPROM_ReadByte+0xe4>
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <EEPROM_ReadByte+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <EEPROM_ReadByte+0x12c>
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01

	// In order to be able to use ReadByte function right after this function
	_delay_ms(5);

	return data;
    3612:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3614:	61 96       	adiw	r28, 0x11	; 17
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <EEPROM_WriteString>:

void EEPROM_WriteString(u8 pageAddress, u8 dataAddress, u8* string)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <EEPROM_WriteString+0x6>
    362c:	00 d0       	rcall	.+0      	; 0x362e <EEPROM_WriteString+0x8>
    362e:	00 d0       	rcall	.+0      	; 0x3630 <EEPROM_WriteString+0xa>
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	8b 83       	std	Y+3, r24	; 0x03
    3636:	6c 83       	std	Y+4, r22	; 0x04
    3638:	5e 83       	std	Y+6, r21	; 0x06
    363a:	4d 83       	std	Y+5, r20	; 0x05

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	10 c0       	rjmp	.+32     	; 0x3666 <EEPROM_WriteString+0x40>
	{

		EEPROM_WriteByte(pageAddress, dataAddress, *ptr);
    3646:	e9 81       	ldd	r30, Y+1	; 0x01
    3648:	fa 81       	ldd	r31, Y+2	; 0x02
    364a:	90 81       	ld	r25, Z
    364c:	8b 81       	ldd	r24, Y+3	; 0x03
    364e:	6c 81       	ldd	r22, Y+4	; 0x04
    3650:	49 2f       	mov	r20, r25
    3652:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <EEPROM_WriteByte>
		dataAddress++;
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	8f 5f       	subi	r24, 0xFF	; 255
    365a:	8c 83       	std	Y+4, r24	; 0x04
}

void EEPROM_WriteString(u8 pageAddress, u8 dataAddress, u8* string)
{

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	9a 81       	ldd	r25, Y+2	; 0x02
    3660:	01 96       	adiw	r24, 0x01	; 1
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	89 83       	std	Y+1, r24	; 0x01
    3666:	e9 81       	ldd	r30, Y+1	; 0x01
    3668:	fa 81       	ldd	r31, Y+2	; 0x02
    366a:	80 81       	ld	r24, Z
    366c:	88 23       	and	r24, r24
    366e:	59 f7       	brne	.-42     	; 0x3646 <EEPROM_WriteString+0x20>
		EEPROM_WriteByte(pageAddress, dataAddress, *ptr);
		dataAddress++;

	}

}
    3670:	26 96       	adiw	r28, 0x06	; 6
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <EEPROM_ReadString>:

void EEPROM_ReadString(u8 pageAddress, u8 dataAddress, u8* string, u8 size)
{
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	00 d0       	rcall	.+0      	; 0x368c <EEPROM_ReadString+0xa>
    368c:	00 d0       	rcall	.+0      	; 0x368e <EEPROM_ReadString+0xc>
    368e:	00 d0       	rcall	.+0      	; 0x3690 <EEPROM_ReadString+0xe>
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	8a 83       	std	Y+2, r24	; 0x02
    3696:	6b 83       	std	Y+3, r22	; 0x03
    3698:	5d 83       	std	Y+5, r21	; 0x05
    369a:	4c 83       	std	Y+4, r20	; 0x04
    369c:	2e 83       	std	Y+6, r18	; 0x06

	for (u8 i = 0; i < size - 1; i++)
    369e:	19 82       	std	Y+1, r1	; 0x01
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <EEPROM_ReadString+0x48>
	{

		string[i] = EEPROM_ReadByte(pageAddress, dataAddress);
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	28 2f       	mov	r18, r24
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	8c 81       	ldd	r24, Y+4	; 0x04
    36aa:	9d 81       	ldd	r25, Y+5	; 0x05
    36ac:	8c 01       	movw	r16, r24
    36ae:	02 0f       	add	r16, r18
    36b0:	13 1f       	adc	r17, r19
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	6b 81       	ldd	r22, Y+3	; 0x03
    36b6:	0e 94 6f 1a 	call	0x34de	; 0x34de <EEPROM_ReadByte>
    36ba:	f8 01       	movw	r30, r16
    36bc:	80 83       	st	Z, r24
//		LCD_displayInt(i);
		dataAddress++;
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	8f 5f       	subi	r24, 0xFF	; 255
    36c2:	8b 83       	std	Y+3, r24	; 0x03
}

void EEPROM_ReadString(u8 pageAddress, u8 dataAddress, u8* string, u8 size)
{

	for (u8 i = 0; i < size - 1; i++)
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	8f 5f       	subi	r24, 0xFF	; 255
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	8e 81       	ldd	r24, Y+6	; 0x06
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	28 17       	cp	r18, r24
    36da:	39 07       	cpc	r19, r25
    36dc:	14 f3       	brlt	.-60     	; 0x36a2 <EEPROM_ReadString+0x20>
//		LCD_displayInt(i);
		dataAddress++;

	}

	string[size - 1] = '\0';
    36de:	8e 81       	ldd	r24, Y+6	; 0x06
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	9c 01       	movw	r18, r24
    36e6:	21 50       	subi	r18, 0x01	; 1
    36e8:	30 40       	sbci	r19, 0x00	; 0
    36ea:	8c 81       	ldd	r24, Y+4	; 0x04
    36ec:	9d 81       	ldd	r25, Y+5	; 0x05
    36ee:	fc 01       	movw	r30, r24
    36f0:	e2 0f       	add	r30, r18
    36f2:	f3 1f       	adc	r31, r19
    36f4:	10 82       	st	Z, r1

}
    36f6:	26 96       	adiw	r28, 0x06	; 6
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	08 95       	ret

0000370c <EEPROM_Search>:

u16 EEPROM_Search(u8* string, u8 dataSize)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	60 97       	sbiw	r28, 0x10	; 16
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	9f 83       	std	Y+7, r25	; 0x07
    3722:	8e 83       	std	Y+6, r24	; 0x06
    3724:	68 87       	std	Y+8, r22	; 0x08
		}
	}

	return 0;

}
    3726:	2d b7       	in	r18, 0x3d	; 61
    3728:	3e b7       	in	r19, 0x3e	; 62
    372a:	38 8b       	std	Y+16, r19	; 0x10
    372c:	2f 87       	std	Y+15, r18	; 0x0f
	string[size - 1] = '\0';

}

u16 EEPROM_Search(u8* string, u8 dataSize)
{
    372e:	8d b7       	in	r24, 0x3d	; 61
    3730:	9e b7       	in	r25, 0x3e	; 62
    3732:	9a 87       	std	Y+10, r25	; 0x0a
    3734:	89 87       	std	Y+9, r24	; 0x09


	// Page 1 contains Memory details
	u8 pageAddress = EEPROM_PAGE2;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	8b 83       	std	Y+3, r24	; 0x03
	u8 tmp[dataSize];
    373a:	88 85       	ldd	r24, Y+8	; 0x08
    373c:	88 2f       	mov	r24, r24
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	2d b7       	in	r18, 0x3d	; 61
    3742:	3e b7       	in	r19, 0x3e	; 62
    3744:	28 1b       	sub	r18, r24
    3746:	39 0b       	sbc	r19, r25
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	3e bf       	out	0x3e, r19	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	2d bf       	out	0x3d, r18	; 61
    3752:	8d b7       	in	r24, 0x3d	; 61
    3754:	9e b7       	in	r25, 0x3e	; 62
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	9e 87       	std	Y+14, r25	; 0x0e
    375a:	8d 87       	std	Y+13, r24	; 0x0d
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	00 96       	adiw	r24, 0x00	; 0
    3762:	9e 87       	std	Y+14, r25	; 0x0e
    3764:	8d 87       	std	Y+13, r24	; 0x0d
    3766:	2d 85       	ldd	r18, Y+13	; 0x0d
    3768:	3e 85       	ldd	r19, Y+14	; 0x0e
    376a:	3d 83       	std	Y+5, r19	; 0x05
    376c:	2c 83       	std	Y+4, r18	; 0x04

	for (u8 i = pageAddress; i < MAX_NUM_OF_PAGES; i++)
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	8a 83       	std	Y+2, r24	; 0x02
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	88 30       	cpi	r24, 0x08	; 8
    3776:	20 f5       	brcc	.+72     	; 0x37c0 <EEPROM_Search+0xb4>
	{

		for (u8 j = 0; j < MAX_NUM_OF_BYTES; j += dataSize)
    3778:	19 82       	std	Y+1, r1	; 0x01
		{

			EEPROM_ReadString(i, j, tmp, dataSize);
    377a:	2c 81       	ldd	r18, Y+4	; 0x04
    377c:	3d 81       	ldd	r19, Y+5	; 0x05
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	69 81       	ldd	r22, Y+1	; 0x01
    3782:	a9 01       	movw	r20, r18
    3784:	28 85       	ldd	r18, Y+8	; 0x08
    3786:	0e 94 41 1b 	call	0x3682	; 0x3682 <EEPROM_ReadString>

			if ( strcmp(string, tmp) == 0 )
    378a:	2c 81       	ldd	r18, Y+4	; 0x04
    378c:	3d 81       	ldd	r19, Y+5	; 0x05
    378e:	8e 81       	ldd	r24, Y+6	; 0x06
    3790:	9f 81       	ldd	r25, Y+7	; 0x07
    3792:	b9 01       	movw	r22, r18
    3794:	0e 94 66 2a 	call	0x54cc	; 0x54cc <strcmp>
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	69 f4       	brne	.+26     	; 0x37b6 <EEPROM_Search+0xaa>
			{
				// Page Address | Byte Address
				return  ( i << 8 | j);
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	88 2f       	mov	r24, r24
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	38 2f       	mov	r19, r24
    37a4:	22 27       	eor	r18, r18
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	88 2f       	mov	r24, r24
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	82 2b       	or	r24, r18
    37ae:	93 2b       	or	r25, r19
    37b0:	9c 87       	std	Y+12, r25	; 0x0c
    37b2:	8b 87       	std	Y+11, r24	; 0x0b
    37b4:	07 c0       	rjmp	.+14     	; 0x37c4 <EEPROM_Search+0xb8>
	u8 tmp[dataSize];

	for (u8 i = pageAddress; i < MAX_NUM_OF_PAGES; i++)
	{

		for (u8 j = 0; j < MAX_NUM_OF_BYTES; j += dataSize)
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	98 85       	ldd	r25, Y+8	; 0x08
    37ba:	89 0f       	add	r24, r25
    37bc:	89 83       	std	Y+1, r24	; 0x01
    37be:	dd cf       	rjmp	.-70     	; 0x377a <EEPROM_Search+0x6e>
			}

		}
	}

	return 0;
    37c0:	1c 86       	std	Y+12, r1	; 0x0c
    37c2:	1b 86       	std	Y+11, r1	; 0x0b
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	9e bf       	out	0x3e, r25	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	8d bf       	out	0x3d, r24	; 61
    37d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    37d4:	9c 85       	ldd	r25, Y+12	; 0x0c

}
    37d6:	2f 85       	ldd	r18, Y+15	; 0x0f
    37d8:	38 89       	ldd	r19, Y+16	; 0x10
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	3e bf       	out	0x3e, r19	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	2d bf       	out	0x3d, r18	; 61
    37e4:	60 96       	adiw	r28, 0x10	; 16
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <DCMotor_Init>:
#define SOURCE_02_ECUA_DCMOTOR_SRC_DCMOTOR_C_

#include "DCMotor.h"

void DCMotor_Init(dcmotor_motorID_t motorID)
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <DCMotor_Init+0x6>
    37fc:	0f 92       	push	r0
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	89 83       	std	Y+1, r24	; 0x01

	switch (motorID)
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	3b 83       	std	Y+3, r19	; 0x03
    380c:	2a 83       	std	Y+2, r18	; 0x02
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	9b 81       	ldd	r25, Y+3	; 0x03
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	31 f0       	breq	.+12     	; 0x3822 <DCMotor_Init+0x2c>
    3816:	2a 81       	ldd	r18, Y+2	; 0x02
    3818:	3b 81       	ldd	r19, Y+3	; 0x03
    381a:	21 30       	cpi	r18, 0x01	; 1
    381c:	31 05       	cpc	r19, r1
    381e:	b1 f0       	breq	.+44     	; 0x384c <DCMotor_Init+0x56>
    3820:	29 c0       	rjmp	.+82     	; 0x3874 <DCMotor_Init+0x7e>
	{

	case DCMOTOR_1:
		// Enable
		Dio_configChanel(DIO_PORTD, DIO_PIN4, DIO_OUTPUT);
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	64 e0       	ldi	r22, 0x04	; 4
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
		// Motor is stop
		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_LOW);
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	64 e0       	ldi	r22, 0x04	; 4
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

		// Switches of H bridges
		Dio_configChanel(DIO_PORTD, DIO_PIN2, DIO_OUTPUT);
    3836:	83 e0       	ldi	r24, 0x03	; 3
    3838:	62 e0       	ldi	r22, 0x02	; 2
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
		Dio_configChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    3840:	83 e0       	ldi	r24, 0x03	; 3
    3842:	63 e0       	ldi	r22, 0x03	; 3
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <DCMotor_Init+0x7e>
		break;

	case DCMOTOR_2:
		// Enable
		Dio_configChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    384c:	82 e0       	ldi	r24, 0x02	; 2
    384e:	65 e0       	ldi	r22, 0x05	; 5
    3850:	41 e0       	ldi	r20, 0x01	; 1
    3852:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
		// Motor is stop
		Dio_writeChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	65 e0       	ldi	r22, 0x05	; 5
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

		// Switches of H bridges
		Dio_configChanel(DIO_PORTC, DIO_PIN3, DIO_OUTPUT);
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	63 e0       	ldi	r22, 0x03	; 3
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
		Dio_configChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    386a:	82 e0       	ldi	r24, 0x02	; 2
    386c:	64 e0       	ldi	r22, 0x04	; 4
    386e:	41 e0       	ldi	r20, 0x01	; 1
    3870:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
		break;

	}


}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <DCMotor_Start>:


void DCMotor_Start(dcmotor_motorID_t motor, dcmotor_direction_t direction)
{
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	28 97       	sbiw	r28, 0x08	; 8
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	89 83       	std	Y+1, r24	; 0x01
    3896:	6a 83       	std	Y+2, r22	; 0x02

	switch(motor)
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	38 87       	std	Y+8, r19	; 0x08
    38a0:	2f 83       	std	Y+7, r18	; 0x07
    38a2:	8f 81       	ldd	r24, Y+7	; 0x07
    38a4:	98 85       	ldd	r25, Y+8	; 0x08
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	31 f0       	breq	.+12     	; 0x38b6 <DCMotor_Start+0x36>
    38aa:	2f 81       	ldd	r18, Y+7	; 0x07
    38ac:	38 85       	ldd	r19, Y+8	; 0x08
    38ae:	21 30       	cpi	r18, 0x01	; 1
    38b0:	31 05       	cpc	r19, r1
    38b2:	59 f1       	breq	.+86     	; 0x390a <DCMotor_Start+0x8a>
    38b4:	53 c0       	rjmp	.+166    	; 0x395c <DCMotor_Start+0xdc>
	{

	case DCMOTOR_1:

		// Enable
		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_HIGH);
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	64 e0       	ldi	r22, 0x04	; 4
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		switch (direction)
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	28 2f       	mov	r18, r24
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	3e 83       	std	Y+6, r19	; 0x06
    38c8:	2d 83       	std	Y+5, r18	; 0x05
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	31 f0       	breq	.+12     	; 0x38de <DCMotor_Start+0x5e>
    38d2:	2d 81       	ldd	r18, Y+5	; 0x05
    38d4:	3e 81       	ldd	r19, Y+6	; 0x06
    38d6:	21 30       	cpi	r18, 0x01	; 1
    38d8:	31 05       	cpc	r19, r1
    38da:	61 f0       	breq	.+24     	; 0x38f4 <DCMotor_Start+0x74>
    38dc:	3f c0       	rjmp	.+126    	; 0x395c <DCMotor_Start+0xdc>
		{

		case DCMOTOR_CLOCKWISE:
			Dio_writeChanel(DIO_PORTD, DIO_PIN2, DIO_HIGH);
    38de:	83 e0       	ldi	r24, 0x03	; 3
    38e0:	62 e0       	ldi	r22, 0x02	; 2
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    38e8:	83 e0       	ldi	r24, 0x03	; 3
    38ea:	63 e0       	ldi	r22, 0x03	; 3
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    38f2:	34 c0       	rjmp	.+104    	; 0x395c <DCMotor_Start+0xdc>
			break;

		case DCMOTOR_ANTICLOCKWISE:
			Dio_writeChanel(DIO_PORTD, DIO_PIN2, DIO_LOW);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	62 e0       	ldi	r22, 0x02	; 2
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	63 e0       	ldi	r22, 0x03	; 3
    3902:	41 e0       	ldi	r20, 0x01	; 1
    3904:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    3908:	29 c0       	rjmp	.+82     	; 0x395c <DCMotor_Start+0xdc>
		}

		break;
	case DCMOTOR_2:

		Dio_writeChanel(DIO_PORTD, DIO_PIN5, DIO_HIGH);
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	65 e0       	ldi	r22, 0x05	; 5
    390e:	41 e0       	ldi	r20, 0x01	; 1
    3910:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		switch (direction)
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	3c 83       	std	Y+4, r19	; 0x04
    391c:	2b 83       	std	Y+3, r18	; 0x03
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	9c 81       	ldd	r25, Y+4	; 0x04
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	31 f0       	breq	.+12     	; 0x3932 <DCMotor_Start+0xb2>
    3926:	2b 81       	ldd	r18, Y+3	; 0x03
    3928:	3c 81       	ldd	r19, Y+4	; 0x04
    392a:	21 30       	cpi	r18, 0x01	; 1
    392c:	31 05       	cpc	r19, r1
    392e:	61 f0       	breq	.+24     	; 0x3948 <DCMotor_Start+0xc8>
    3930:	15 c0       	rjmp	.+42     	; 0x395c <DCMotor_Start+0xdc>
		{

		case DCMOTOR_CLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	65 e0       	ldi	r22, 0x05	; 5
    3936:	41 e0       	ldi	r20, 0x01	; 1
    3938:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	66 e0       	ldi	r22, 0x06	; 6
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    3946:	0a c0       	rjmp	.+20     	; 0x395c <DCMotor_Start+0xdc>
			break;

		case DCMOTOR_ANTICLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    3948:	82 e0       	ldi	r24, 0x02	; 2
    394a:	65 e0       	ldi	r22, 0x05	; 5
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    3952:	82 e0       	ldi	r24, 0x02	; 2
    3954:	66 e0       	ldi	r22, 0x06	; 6
    3956:	41 e0       	ldi	r20, 0x01	; 1
    3958:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

		break;

	}

}
    395c:	28 96       	adiw	r28, 0x08	; 8
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <DCMotor_Stop>:

void DCMotor_Stop(dcmotor_motorID_t motor)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	00 d0       	rcall	.+0      	; 0x3974 <DCMotor_Stop+0x6>
    3974:	0f 92       	push	r0
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	89 83       	std	Y+1, r24	; 0x01

	switch(motor)
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	3b 83       	std	Y+3, r19	; 0x03
    3984:	2a 83       	std	Y+2, r18	; 0x02
    3986:	8a 81       	ldd	r24, Y+2	; 0x02
    3988:	9b 81       	ldd	r25, Y+3	; 0x03
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	31 f0       	breq	.+12     	; 0x399a <DCMotor_Stop+0x2c>
    398e:	2a 81       	ldd	r18, Y+2	; 0x02
    3990:	3b 81       	ldd	r19, Y+3	; 0x03
    3992:	21 30       	cpi	r18, 0x01	; 1
    3994:	31 05       	cpc	r19, r1
    3996:	39 f0       	breq	.+14     	; 0x39a6 <DCMotor_Stop+0x38>
    3998:	0b c0       	rjmp	.+22     	; 0x39b0 <DCMotor_Stop+0x42>
	{

	case DCMOTOR_1:
		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_LOW);
    399a:	83 e0       	ldi	r24, 0x03	; 3
    399c:	64 e0       	ldi	r22, 0x04	; 4
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
    39a4:	05 c0       	rjmp	.+10     	; 0x39b0 <DCMotor_Stop+0x42>
		break;
	case DCMOTOR_2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN5, DIO_LOW);
    39a6:	83 e0       	ldi	r24, 0x03	; 3
    39a8:	65 e0       	ldi	r22, 0x05	; 5
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>
		break;

	}

}
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init()
{
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTA, DIO_PIN3, DIO_OUTPUT);
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	63 e0       	ldi	r22, 0x03	; 3
    39c8:	41 e0       	ldi	r20, 0x01	; 1
    39ca:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	08 95       	ret

000039d4 <Buzzer_turnOn>:

void Buzzer_turnOn()
{
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62

	Dio_writeChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	63 e0       	ldi	r22, 0x03	; 3
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

}
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <Buzzer_turnOff>:

void Buzzer_turnOff()
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62

	Dio_writeChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	63 e0       	ldi	r22, 0x03	; 3
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

}
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <Button_buttonInit>:
 */

#include "Button.h"

void Button_buttonInit()
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	66 e0       	ldi	r22, 0x06	; 6
    3a1a:	40 e0       	ldi	r20, 0x00	; 0
    3a1c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    3a20:	83 e0       	ldi	r24, 0x03	; 3
    3a22:	62 e0       	ldi	r22, 0x02	; 2
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <Button_udtisPressed>:

button_buttonState_t Button_udtisPressed(button_buttonId_t button)
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <Button_udtisPressed+0x6>
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <Button_udtisPressed+0x8>
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	8a 83       	std	Y+2, r24	; 0x02

	button_buttonState_t returnValue = 0;
    3a3e:	19 82       	std	Y+1, r1	; 0x01

	switch (button)
    3a40:	8a 81       	ldd	r24, Y+2	; 0x02
    3a42:	28 2f       	mov	r18, r24
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	3c 83       	std	Y+4, r19	; 0x04
    3a48:	2b 83       	std	Y+3, r18	; 0x03
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	81 30       	cpi	r24, 0x01	; 1
    3a50:	91 05       	cpc	r25, r1
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <Button_udtisPressed+0x42>
    3a54:	2b 81       	ldd	r18, Y+3	; 0x03
    3a56:	3c 81       	ldd	r19, Y+4	; 0x04
    3a58:	22 30       	cpi	r18, 0x02	; 2
    3a5a:	31 05       	cpc	r19, r1
    3a5c:	81 f0       	breq	.+32     	; 0x3a7e <Button_udtisPressed+0x4e>
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	9c 81       	ldd	r25, Y+4	; 0x04
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	89 f4       	brne	.+34     	; 0x3a88 <Button_udtisPressed+0x58>
	{
		case BUTTON0:
			returnValue = Dio_udtreadChanel(DIO_PORTB, DIO_PIN0);
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	0b c0       	rjmp	.+22     	; 0x3a88 <Button_udtisPressed+0x58>
			break;

		case BUTTON1:
			returnValue = Dio_udtreadChanel(DIO_PORTD, DIO_PIN6);
    3a72:	83 e0       	ldi	r24, 0x03	; 3
    3a74:	66 e0       	ldi	r22, 0x06	; 6
    3a76:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    3a7c:	05 c0       	rjmp	.+10     	; 0x3a88 <Button_udtisPressed+0x58>
			break;
		case BUTTON2:
			returnValue = Dio_udtreadChanel(DIO_PORTD, DIO_PIN2);
    3a7e:	83 e0       	ldi	r24, 0x03	; 3
    3a80:	62 e0       	ldi	r22, 0x02	; 2
    3a82:	0e 94 34 27 	call	0x4e68	; 0x4e68 <Dio_udtreadChanel>
    3a86:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return returnValue;
    3a88:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <Watchdog_ON>:
#include "watchdog.h"



void Watchdog_ON()
{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
	/*
	Watchdog timer enables with typical timeout period 2.1
	second.
	*/
	// One Second
	WDTCR = (1<<3)|(1<<2)|(1<<1);
    3aa0:	e1 e4       	ldi	r30, 0x41	; 65
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	8e e0       	ldi	r24, 0x0E	; 14
    3aa6:	80 83       	st	Z, r24
}
    3aa8:	cf 91       	pop	r28
    3aaa:	df 91       	pop	r29
    3aac:	08 95       	ret

00003aae <Watchdog_OFF>:

void Watchdog_OFF()
{
    3aae:	df 93       	push	r29
    3ab0:	cf 93       	push	r28
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
	/*
	This function use for disable the watchdog timer.
	*/
	WDTCR = (1<<4)|(1<<3);
    3ab6:	e1 e4       	ldi	r30, 0x41	; 65
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	88 e1       	ldi	r24, 0x18	; 24
    3abc:	80 83       	st	Z, r24
	WDTCR = 0x00;
    3abe:	e1 e4       	ldi	r30, 0x41	; 65
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	10 82       	st	Z, r1
}
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <UART_Init>:
#include "Led.h"
#include <util/delay.h>
#include <avr/io.h>

void UART_Init(u32 baudrate)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	28 97       	sbiw	r28, 0x08	; 8
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	6d 83       	std	Y+5, r22	; 0x05
    3ae0:	7e 83       	std	Y+6, r23	; 0x06
    3ae2:	8f 83       	std	Y+7, r24	; 0x07
    3ae4:	98 87       	std	Y+8, r25	; 0x08

	// Enable Tx, Rx
	UART_UCSRB_REG |= 3 << 3;
    3ae6:	aa e2       	ldi	r26, 0x2A	; 42
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	ea e2       	ldi	r30, 0x2A	; 42
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	88 61       	ori	r24, 0x18	; 24
    3af2:	8c 93       	st	X, r24

	// Set baudrate
	u32 ubrr = ( (16000000.0 / (16.0 * baudrate)) - 1);
    3af4:	6d 81       	ldd	r22, Y+5	; 0x05
    3af6:	7e 81       	ldd	r23, Y+6	; 0x06
    3af8:	8f 81       	ldd	r24, Y+7	; 0x07
    3afa:	98 85       	ldd	r25, Y+8	; 0x08
    3afc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	bc 01       	movw	r22, r24
    3b06:	cd 01       	movw	r24, r26
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	9c 01       	movw	r18, r24
    3b1a:	ad 01       	movw	r20, r26
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	74 e2       	ldi	r23, 0x24	; 36
    3b20:	84 e7       	ldi	r24, 0x74	; 116
    3b22:	9b e4       	ldi	r25, 0x4B	; 75
    3b24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	5f e3       	ldi	r21, 0x3F	; 63
    3b38:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	9a 83       	std	Y+2, r25	; 0x02
    3b50:	ab 83       	std	Y+3, r26	; 0x03
    3b52:	bc 83       	std	Y+4, r27	; 0x04
	UART_UBRRH_REG = ubrr >> 8;
    3b54:	e0 e4       	ldi	r30, 0x40	; 64
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b5e:	bc 81       	ldd	r27, Y+4	; 0x04
    3b60:	89 2f       	mov	r24, r25
    3b62:	9a 2f       	mov	r25, r26
    3b64:	ab 2f       	mov	r26, r27
    3b66:	bb 27       	eor	r27, r27
    3b68:	80 83       	st	Z, r24
	UART_UBRRL_REG = ubrr;
    3b6a:	e9 e2       	ldi	r30, 0x29	; 41
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	80 83       	st	Z, r24

	// Write in UCSRC, set frame size to 8-bit
	UART_UCSRC_REG |= (1 << 7) | (3 << 1);
    3b72:	a0 e4       	ldi	r26, 0x40	; 64
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	e0 e4       	ldi	r30, 0x40	; 64
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	86 68       	ori	r24, 0x86	; 134
    3b7e:	8c 93       	st	X, r24
	// By default parity bit is disabled

//	Dio_configChanel(DIO_PORTD, DIO_PIN0, DIO_INPUT);
//	Dio_configChanel(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);

}
    3b80:	28 96       	adiw	r28, 0x08	; 8
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <UART_Receive>:

u8 UART_Receive()
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62

	// Wait for unread data
	while ( !((UART_UCSRA_REG >> 7) & 1) );
    3b9a:	eb e2       	ldi	r30, 0x2B	; 43
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 23       	and	r24, r24
    3ba2:	dc f7       	brge	.-10     	; 0x3b9a <UART_Receive+0x8>
	return UART_UDR_REG;
    3ba4:	ec e2       	ldi	r30, 0x2C	; 44
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z

}
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <UART_ReceiveNonBlock>:

u8 UART_ReceiveNonBlock()
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	0f 92       	push	r0
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62

	if ( ((UART_UCSRA_REG >> 7) & 1) )
    3bba:	eb e2       	ldi	r30, 0x2B	; 43
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	88 23       	and	r24, r24
    3bc2:	2c f4       	brge	.+10     	; 0x3bce <UART_ReceiveNonBlock+0x1e>
	{
		return UART_UDR_REG;
    3bc4:	ec e2       	ldi	r30, 0x2C	; 44
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	80 81       	ld	r24, Z
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <UART_ReceiveNonBlock+0x20>
	}
	else
	{
		return '\0';
    3bce:	19 82       	std	Y+1, r1	; 0x01
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    3bd2:	0f 90       	pop	r0
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <UART_Transmit>:

void UART_Transmit(u8 data)
{
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	0f 92       	push	r0
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	89 83       	std	Y+1, r24	; 0x01
	// Wait for unread data (flag is 1 if it is ready)
	while ( !((UART_UCSRA_REG >> 5) & 1) );
    3be6:	eb e2       	ldi	r30, 0x2B	; 43
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	82 95       	swap	r24
    3bee:	86 95       	lsr	r24
    3bf0:	87 70       	andi	r24, 0x07	; 7
    3bf2:	88 2f       	mov	r24, r24
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	81 70       	andi	r24, 0x01	; 1
    3bf8:	90 70       	andi	r25, 0x00	; 0
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	a1 f3       	breq	.-24     	; 0x3be6 <UART_Transmit+0xc>

	UART_UDR_REG = data;
    3bfe:	ec e2       	ldi	r30, 0x2C	; 44
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	80 83       	st	Z, r24


}
    3c06:	0f 90       	pop	r0
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <UART_SendString>:

void UART_SendString(u8* string)
{
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <UART_SendString+0x6>
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <UART_SendString+0x8>
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	9c 83       	std	Y+4, r25	; 0x04
    3c1c:	8b 83       	std	Y+3, r24	; 0x03

	for (u8* i = string; *i != '\0'; i++)
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	9a 83       	std	Y+2, r25	; 0x02
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	0a c0       	rjmp	.+20     	; 0x3c3c <UART_SendString+0x2e>
	{

		UART_Transmit(*i);
    3c28:	e9 81       	ldd	r30, Y+1	; 0x01
    3c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c2c:	80 81       	ld	r24, Z
    3c2e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <UART_Transmit>
}

void UART_SendString(u8* string)
{

	for (u8* i = string; *i != '\0'; i++)
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	01 96       	adiw	r24, 0x01	; 1
    3c38:	9a 83       	std	Y+2, r25	; 0x02
    3c3a:	89 83       	std	Y+1, r24	; 0x01
    3c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c40:	80 81       	ld	r24, Z
    3c42:	88 23       	and	r24, r24
    3c44:	89 f7       	brne	.-30     	; 0x3c28 <UART_SendString+0x1a>

		UART_Transmit(*i);

	}

}
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <UART_ReciveString>:


void UART_ReciveString(u8* string, u8 size)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	00 d0       	rcall	.+0      	; 0x3c5a <UART_ReciveString+0x6>
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <UART_ReciveString+0x8>
    3c5c:	0f 92       	push	r0
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	9c 83       	std	Y+4, r25	; 0x04
    3c64:	8b 83       	std	Y+3, r24	; 0x03
    3c66:	6d 83       	std	Y+5, r22	; 0x05
	
	// Clear buffer for input more that required size from last prompt
	while (UART_ReceiveNonBlock() != '\0');
    3c68:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <UART_ReceiveNonBlock>
    3c6c:	88 23       	and	r24, r24
    3c6e:	e1 f7       	brne	.-8      	; 0x3c68 <UART_ReciveString+0x14>
	
	u8 tmp = UART_Receive();
    3c70:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_Receive>
    3c74:	8a 83       	std	Y+2, r24	; 0x02

	if (size == 1)
    3c76:	8d 81       	ldd	r24, Y+5	; 0x05
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	91 f1       	breq	.+100    	; 0x3ce0 <UART_ReciveString+0x8c>
	{
		return;
	}

	u8 i = 0;
    3c7c:	19 82       	std	Y+1, r1	; 0x01
    3c7e:	10 c0       	rjmp	.+32     	; 0x3ca0 <UART_ReciveString+0x4c>


	while ((tmp != '\n') && (tmp != '\r') && (tmp != '\0') && (i < size - 1))
	{

		string[i] = tmp;
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	28 2f       	mov	r18, r24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	e2 0f       	add	r30, r18
    3c8e:	f3 1f       	adc	r31, r19
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	80 83       	st	Z, r24
		tmp = UART_Receive();
    3c94:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_Receive>
    3c98:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	8f 5f       	subi	r24, 0xFF	; 255
    3c9e:	89 83       	std	Y+1, r24	; 0x01
	}

	u8 i = 0;


	while ((tmp != '\n') && (tmp != '\r') && (tmp != '\0') && (i < size - 1))
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	8a 30       	cpi	r24, 0x0A	; 10
    3ca4:	81 f0       	breq	.+32     	; 0x3cc6 <UART_ReciveString+0x72>
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	8d 30       	cpi	r24, 0x0D	; 13
    3caa:	69 f0       	breq	.+26     	; 0x3cc6 <UART_ReciveString+0x72>
    3cac:	8a 81       	ldd	r24, Y+2	; 0x02
    3cae:	88 23       	and	r24, r24
    3cb0:	51 f0       	breq	.+20     	; 0x3cc6 <UART_ReciveString+0x72>
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	28 2f       	mov	r18, r24
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cba:	88 2f       	mov	r24, r24
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	28 17       	cp	r18, r24
    3cc2:	39 07       	cpc	r19, r25
    3cc4:	ec f2       	brlt	.-70     	; 0x3c80 <UART_ReciveString+0x2c>
		i++;

	}

	// Clear buffer for input more that required size
	while (UART_ReceiveNonBlock() != '\0');
    3cc6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <UART_ReceiveNonBlock>
    3cca:	88 23       	and	r24, r24
    3ccc:	e1 f7       	brne	.-8      	; 0x3cc6 <UART_ReciveString+0x72>

	// For precise memory allocation, add 1 to the size of the array for the null char
	string[i] = '\0';
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd8:	fc 01       	movw	r30, r24
    3cda:	e2 0f       	add	r30, r18
    3cdc:	f3 1f       	adc	r31, r19
    3cde:	10 82       	st	Z, r1

}
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <Timer2_SetPWMPhaseControl>:

static u16 top = 0;
static f32 timerFreq = 0;

static void Timer2_SetPWMPhaseControl()
{
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR2_REG, 6);
    3cf8:	a5 e4       	ldi	r26, 0x45	; 69
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	e5 e4       	ldi	r30, 0x45	; 69
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	80 64       	ori	r24, 0x40	; 64
    3d04:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR2_REG |= 2 << 4;
    3d06:	a5 e4       	ldi	r26, 0x45	; 69
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	e5 e4       	ldi	r30, 0x45	; 69
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	80 62       	ori	r24, 0x20	; 32
    3d12:	8c 93       	st	X, r24

	// Set DDR as output
//	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
	Dio_configChanel(DIO_PORTD, DIO_PIN7, DIO_OUTPUT);
    3d14:	83 e0       	ldi	r24, 0x03	; 3
    3d16:	67 e0       	ldi	r22, 0x07	; 7
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <Timer2_SetNormal>:

static void Timer2_SetNormal()
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer2 Interrupt overflow
	TIMSK_REG |= 1;
    3d2c:	a9 e5       	ldi	r26, 0x59	; 89
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	e9 e5       	ldi	r30, 0x59	; 89
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	81 60       	ori	r24, 0x01	; 1
    3d38:	8c 93       	st	X, r24

}
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <Timer2_SetCTC>:
static void Timer2_SetCTC()
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer2 Interrupt overflow
	TIMSK_REG |= 2;
    3d48:	a9 e5       	ldi	r26, 0x59	; 89
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e9 e5       	ldi	r30, 0x59	; 89
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	82 60       	ori	r24, 0x02	; 2
    3d54:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG, 3);
    3d56:	a5 e4       	ldi	r26, 0x45	; 69
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e5 e4       	ldi	r30, 0x45	; 69
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	88 60       	ori	r24, 0x08	; 8
    3d62:	8c 93       	st	X, r24

}
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <Timer2_SetFastPWM>:

static void Timer2_SetFastPWM()
{
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR2_REG, 6);
    3d72:	a5 e4       	ldi	r26, 0x45	; 69
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	e5 e4       	ldi	r30, 0x45	; 69
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	80 64       	ori	r24, 0x40	; 64
    3d7e:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG, 3);
    3d80:	a5 e4       	ldi	r26, 0x45	; 69
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	e5 e4       	ldi	r30, 0x45	; 69
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	88 60       	ori	r24, 0x08	; 8
    3d8c:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR2_REG |= 2 << 4;
    3d8e:	a5 e4       	ldi	r26, 0x45	; 69
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	e5 e4       	ldi	r30, 0x45	; 69
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	80 62       	ori	r24, 0x20	; 32
    3d9a:	8c 93       	st	X, r24

	// Set DDR as output
	Dio_configChanel(DIO_PORTD, DIO_PIN7, DIO_OUTPUT);
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
    3d9e:	67 e0       	ldi	r22, 0x07	; 7
    3da0:	41 e0       	ldi	r20, 0x01	; 1
    3da2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <Timer2_Init>:

void Timer2_Init(timer2_waveform_t waveform)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <Timer2_Init+0x6>
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	89 83       	std	Y+1, r24	; 0x01

	// Global Interrupt
	GIE_EnableGlobalInterrupt();
    3dba:	0e 94 81 24 	call	0x4902	; 0x4902 <GIE_EnableGlobalInterrupt>

	// Select Mode (waveform)
	switch(waveform)
    3dbe:	89 81       	ldd	r24, Y+1	; 0x01
    3dc0:	28 2f       	mov	r18, r24
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	3b 83       	std	Y+3, r19	; 0x03
    3dc6:	2a 83       	std	Y+2, r18	; 0x02
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	91 05       	cpc	r25, r1
    3dd0:	c1 f0       	breq	.+48     	; 0x3e02 <Timer2_Init+0x56>
    3dd2:	2a 81       	ldd	r18, Y+2	; 0x02
    3dd4:	3b 81       	ldd	r19, Y+3	; 0x03
    3dd6:	22 30       	cpi	r18, 0x02	; 2
    3dd8:	31 05       	cpc	r19, r1
    3dda:	2c f4       	brge	.+10     	; 0x3de6 <Timer2_Init+0x3a>
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	9b 81       	ldd	r25, Y+3	; 0x03
    3de0:	00 97       	sbiw	r24, 0x00	; 0
    3de2:	61 f0       	breq	.+24     	; 0x3dfc <Timer2_Init+0x50>
    3de4:	16 c0       	rjmp	.+44     	; 0x3e12 <Timer2_Init+0x66>
    3de6:	2a 81       	ldd	r18, Y+2	; 0x02
    3de8:	3b 81       	ldd	r19, Y+3	; 0x03
    3dea:	22 30       	cpi	r18, 0x02	; 2
    3dec:	31 05       	cpc	r19, r1
    3dee:	61 f0       	breq	.+24     	; 0x3e08 <Timer2_Init+0x5c>
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	9b 81       	ldd	r25, Y+3	; 0x03
    3df4:	83 30       	cpi	r24, 0x03	; 3
    3df6:	91 05       	cpc	r25, r1
    3df8:	51 f0       	breq	.+20     	; 0x3e0e <Timer2_Init+0x62>
    3dfa:	0b c0       	rjmp	.+22     	; 0x3e12 <Timer2_Init+0x66>
	{

	case TIMER2_NORMAL:
		Timer2_SetNormal();
    3dfc:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <Timer2_SetNormal>
    3e00:	08 c0       	rjmp	.+16     	; 0x3e12 <Timer2_Init+0x66>
		break;
	case TIMER2_PWM_PHASE_CORRECT:
		Timer2_SetPWMPhaseControl();
    3e02:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <Timer2_SetPWMPhaseControl>
    3e06:	05 c0       	rjmp	.+10     	; 0x3e12 <Timer2_Init+0x66>
		break;
	case TIMER2_CTC:
		Timer2_SetCTC();
    3e08:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <Timer2_SetCTC>
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <Timer2_Init+0x66>
		break;
	case TIMER2_FAST_PWM:
		Timer2_SetFastPWM();
    3e0e:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <Timer2_SetFastPWM>
		break;

	}

}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <Timer2_SetPreload>:
// Normal | CTC



void Timer2_SetPreload(u8 preload)
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	0f 92       	push	r0
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	89 83       	std	Y+1, r24	; 0x01
	if (preload > 256)
	{
		return;
	}

	TCNT2_REG |= preload;
    3e2a:	a4 e4       	ldi	r26, 0x44	; 68
    3e2c:	b0 e0       	ldi	r27, 0x00	; 0
    3e2e:	e4 e4       	ldi	r30, 0x44	; 68
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	90 81       	ld	r25, Z
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	89 2b       	or	r24, r25
    3e38:	8c 93       	st	X, r24

}
    3e3a:	0f 90       	pop	r0
    3e3c:	cf 91       	pop	r28
    3e3e:	df 91       	pop	r29
    3e40:	08 95       	ret

00003e42 <Timer2_SetTime>:

void Timer2_SetTime(u16 time)
{
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <Timer2_SetTime+0x6>
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <Timer2_SetTime+0x8>
    3e4a:	0f 92       	push	r0
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	9d 83       	std	Y+5, r25	; 0x05
    3e52:	8c 83       	std	Y+4, r24	; 0x04

	// Tick time = 1/prescale
	// Overload time = (256 - preload value) * Tick time
	// Preload = 256 - (time/Tick Time)

	u8 prescale = TCCR2_REG & 0x07;		// 0000 0111
    3e54:	e5 e4       	ldi	r30, 0x45	; 69
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	87 70       	andi	r24, 0x07	; 7
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 tickTime = 1 / prescale;
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	28 2f       	mov	r18, r24
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	b9 01       	movw	r22, r18
    3e6a:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <__divmodhi4>
    3e6e:	cb 01       	movw	r24, r22
    3e70:	8a 83       	std	Y+2, r24	; 0x02
	u8 preload = 256 - (time / tickTime);
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	28 2f       	mov	r18, r24
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	8c 81       	ldd	r24, Y+4	; 0x04
    3e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e7c:	b9 01       	movw	r22, r18
    3e7e:	0e 94 c8 28 	call	0x5190	; 0x5190 <__udivmodhi4>
    3e82:	cb 01       	movw	r24, r22
    3e84:	81 95       	neg	r24
    3e86:	89 83       	std	Y+1, r24	; 0x01

	Timer2_SetPreload(preload);
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <Timer2_SetPreload>

}
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <Timer2_Start>:

void Timer2_Start(timer2_clockSelect_t clockSelect)
{
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <Timer2_Start+0x6>
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	8a 83       	std	Y+2, r24	; 0x02

	// Clock select (Prescale)
	TCCR2_REG |= clockSelect;
    3eaa:	a5 e4       	ldi	r26, 0x45	; 69
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	e5 e4       	ldi	r30, 0x45	; 69
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	90 81       	ld	r25, Z
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	89 2b       	or	r24, r25
    3eb8:	8c 93       	st	X, r24

	u8 prescale = TCCR2_REG & 0x07;		// 0000 0111
    3eba:	e5 e4       	ldi	r30, 0x45	; 69
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	87 70       	andi	r24, 0x07	; 7
    3ec2:	89 83       	std	Y+1, r24	; 0x01
	timerFreq = 16000000.0 / prescale;
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	88 2f       	mov	r24, r24
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	aa 27       	eor	r26, r26
    3ecc:	97 fd       	sbrc	r25, 7
    3ece:	a0 95       	com	r26
    3ed0:	ba 2f       	mov	r27, r26
    3ed2:	bc 01       	movw	r22, r24
    3ed4:	cd 01       	movw	r24, r26
    3ed6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3eda:	9b 01       	movw	r18, r22
    3edc:	ac 01       	movw	r20, r24
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	74 e2       	ldi	r23, 0x24	; 36
    3ee2:	84 e7       	ldi	r24, 0x74	; 116
    3ee4:	9b e4       	ldi	r25, 0x4B	; 75
    3ee6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	80 93 54 03 	sts	0x0354, r24
    3ef2:	90 93 55 03 	sts	0x0355, r25
    3ef6:	a0 93 56 03 	sts	0x0356, r26
    3efa:	b0 93 57 03 	sts	0x0357, r27

}
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <Timer2_Stop>:

void Timer2_Stop()
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62

	// Stop Timer/Counter by clearing prescaler
	TCCR2_REG &= 0xf8;
    3f10:	a5 e4       	ldi	r26, 0x45	; 69
    3f12:	b0 e0       	ldi	r27, 0x00	; 0
    3f14:	e5 e4       	ldi	r30, 0x45	; 69
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	80 81       	ld	r24, Z
    3f1a:	88 7f       	andi	r24, 0xF8	; 248
    3f1c:	8c 93       	st	X, r24

}
    3f1e:	cf 91       	pop	r28
    3f20:	df 91       	pop	r29
    3f22:	08 95       	ret

00003f24 <Timer2_SetDuty>:


// For PWM Modes
void Timer2_SetDuty(u8 percentage)
{
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	0f 92       	push	r0
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	89 83       	std	Y+1, r24	; 0x01


	// OCR2 is 8bit -> 255 max
	OCR2_REG = (u8) 255 * (percentage / 100.0);
    3f34:	03 e4       	ldi	r16, 0x43	; 67
    3f36:	10 e0       	ldi	r17, 0x00	; 0
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	88 2f       	mov	r24, r24
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	aa 27       	eor	r26, r26
    3f40:	97 fd       	sbrc	r25, 7
    3f42:	a0 95       	com	r26
    3f44:	ba 2f       	mov	r27, r26
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	bc 01       	movw	r22, r24
    3f54:	cd 01       	movw	r24, r26
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	48 ec       	ldi	r20, 0xC8	; 200
    3f5c:	52 e4       	ldi	r21, 0x42	; 66
    3f5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	bc 01       	movw	r22, r24
    3f68:	cd 01       	movw	r24, r26
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	4f e7       	ldi	r20, 0x7F	; 127
    3f70:	53 e4       	ldi	r21, 0x43	; 67
    3f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	f8 01       	movw	r30, r16
    3f88:	80 83       	st	Z, r24


}
    3f8a:	0f 90       	pop	r0
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	08 95       	ret

00003f96 <Timer1_SetFastPWM>:

static u16 top = 0;
static f32 timerFreq = 0;

static void Timer1_SetFastPWM()
{
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62

	// Set Fast PWM, TOP in ICR1, Clear OC1A on compare match
	TCCR1A_REG = (1<<1)|(1<<7);
    3f9e:	ef e4       	ldi	r30, 0x4F	; 79
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	82 e8       	ldi	r24, 0x82	; 130
    3fa4:	80 83       	st	Z, r24
	TCCR1B_REG = (1<<3)|(1<<4);
    3fa6:	ee e4       	ldi	r30, 0x4E	; 78
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	88 e1       	ldi	r24, 0x18	; 24
    3fac:	80 83       	st	Z, r24

	TCNT1L_REG = 0;
    3fae:	ec e4       	ldi	r30, 0x4C	; 76
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	10 82       	st	Z, r1
	TCNT1H_REG = 0;
    3fb4:	ed e4       	ldi	r30, 0x4D	; 77
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	10 82       	st	Z, r1

	// Set DDR as output
	Dio_configChanel(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    3fba:	83 e0       	ldi	r24, 0x03	; 3
    3fbc:	65 e0       	ldi	r22, 0x05	; 5
    3fbe:	41 e0       	ldi	r20, 0x01	; 1
    3fc0:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <Timer1_Init>:

void Timer1_Init(timer1_waveform_t waveform)
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	0f 92       	push	r0
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	89 83       	std	Y+1, r24	; 0x01

	// Global Interrupt
	GIE_EnableGlobalInterrupt();
    3fd6:	0e 94 81 24 	call	0x4902	; 0x4902 <GIE_EnableGlobalInterrupt>

	// Select Mode (waveform)
	switch(waveform)
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	83 30       	cpi	r24, 0x03	; 3
    3fe2:	91 05       	cpc	r25, r1
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <Timer1_Init+0x20>
//	case TIMER1_CTC:
//		Timer1_SetCTC();
//		break;

	case TIMER1_FAST_PWM:
		Timer1_SetFastPWM();
    3fe6:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <Timer1_SetFastPWM>
		break;

	}

}
    3fea:	0f 90       	pop	r0
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <Timer1_Start>:

void Timer1_Start(timer1_clockSelect_t clockSelect)
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	0f 92       	push	r0
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	89 83       	std	Y+1, r24	; 0x01

	// Prescale to 0 to use the OR properly
	Timer1_Stop();
    3ffe:	0e 94 0d 20 	call	0x401a	; 0x401a <Timer1_Stop>
	// Clock select (Prescale)
	TCCR1B_REG |= clockSelect;
    4002:	ae e4       	ldi	r26, 0x4E	; 78
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	ee e4       	ldi	r30, 0x4E	; 78
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	90 81       	ld	r25, Z
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	89 2b       	or	r24, r25
    4010:	8c 93       	st	X, r24

}
    4012:	0f 90       	pop	r0
    4014:	cf 91       	pop	r28
    4016:	df 91       	pop	r29
    4018:	08 95       	ret

0000401a <Timer1_Stop>:

void Timer1_Stop()
{
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62

	// Stop Timer/Counter by clearing prescaler
	TCCR1B_REG &= 0xf8;
    4022:	ae e4       	ldi	r26, 0x4E	; 78
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	ee e4       	ldi	r30, 0x4E	; 78
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	88 7f       	andi	r24, 0xF8	; 248
    402e:	8c 93       	st	X, r24

}
    4030:	cf 91       	pop	r28
    4032:	df 91       	pop	r29
    4034:	08 95       	ret

00004036 <Timer1_SetDuty>:



// For PWM Modes
void Timer1_SetDuty(f32 Ton)
{
    4036:	df 93       	push	r29
    4038:	cf 93       	push	r28
    403a:	00 d0       	rcall	.+0      	; 0x403c <Timer1_SetDuty+0x6>
    403c:	00 d0       	rcall	.+0      	; 0x403e <Timer1_SetDuty+0x8>
    403e:	00 d0       	rcall	.+0      	; 0x4040 <Timer1_SetDuty+0xa>
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	6b 83       	std	Y+3, r22	; 0x03
    4046:	7c 83       	std	Y+4, r23	; 0x04
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	9e 83       	std	Y+6, r25	; 0x06

	// Timer freq = 16000000/prescale
	u16 tmp = Ton * timerFreq;
    404c:	80 91 5a 03 	lds	r24, 0x035A
    4050:	90 91 5b 03 	lds	r25, 0x035B
    4054:	a0 91 5c 03 	lds	r26, 0x035C
    4058:	b0 91 5d 03 	lds	r27, 0x035D
    405c:	bc 01       	movw	r22, r24
    405e:	cd 01       	movw	r24, r26
    4060:	2b 81       	ldd	r18, Y+3	; 0x03
    4062:	3c 81       	ldd	r19, Y+4	; 0x04
    4064:	4d 81       	ldd	r20, Y+5	; 0x05
    4066:	5e 81       	ldd	r21, Y+6	; 0x06
    4068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	89 83       	std	Y+1, r24	; 0x01

	OCR1AL_REG = tmp;
    4080:	ea e4       	ldi	r30, 0x4A	; 74
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	80 83       	st	Z, r24
	OCR1AH_REG = tmp >> 8;
    4088:	eb e4       	ldi	r30, 0x4B	; 75
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	9a 81       	ldd	r25, Y+2	; 0x02
    4090:	89 2f       	mov	r24, r25
    4092:	99 27       	eor	r25, r25
    4094:	80 83       	st	Z, r24

}
    4096:	26 96       	adiw	r28, 0x06	; 6
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	cf 91       	pop	r28
    40a4:	df 91       	pop	r29
    40a6:	08 95       	ret

000040a8 <Timer1_SetFrequency>:

void Timer1_SetFrequency(u16 frequency)
{
    40a8:	ef 92       	push	r14
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	df 93       	push	r29
    40b2:	cf 93       	push	r28
    40b4:	00 d0       	rcall	.+0      	; 0x40b6 <Timer1_SetFrequency+0xe>
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	9a 83       	std	Y+2, r25	; 0x02
    40bc:	89 83       	std	Y+1, r24	; 0x01

	timerFreq = 16000000.0 / 256.0;
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	94 e2       	ldi	r25, 0x24	; 36
    40c2:	a4 e7       	ldi	r26, 0x74	; 116
    40c4:	b7 e4       	ldi	r27, 0x47	; 71
    40c6:	80 93 5a 03 	sts	0x035A, r24
    40ca:	90 93 5b 03 	sts	0x035B, r25
    40ce:	a0 93 5c 03 	sts	0x035C, r26
    40d2:	b0 93 5d 03 	sts	0x035D, r27
	top = ( timerFreq / frequency ) - 1;
    40d6:	e0 90 5a 03 	lds	r14, 0x035A
    40da:	f0 90 5b 03 	lds	r15, 0x035B
    40de:	00 91 5c 03 	lds	r16, 0x035C
    40e2:	10 91 5d 03 	lds	r17, 0x035D
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ea:	cc 01       	movw	r24, r24
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	bc 01       	movw	r22, r24
    40f2:	cd 01       	movw	r24, r26
    40f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    40f8:	9b 01       	movw	r18, r22
    40fa:	ac 01       	movw	r20, r24
    40fc:	c8 01       	movw	r24, r16
    40fe:	b7 01       	movw	r22, r14
    4100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	40 e8       	ldi	r20, 0x80	; 128
    4112:	5f e3       	ldi	r21, 0x3F	; 63
    4114:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	bc 01       	movw	r22, r24
    411e:	cd 01       	movw	r24, r26
    4120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	90 93 59 03 	sts	0x0359, r25
    412c:	80 93 58 03 	sts	0x0358, r24

	ICR1L_REG = top;
    4130:	e6 e4       	ldi	r30, 0x46	; 70
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 91 58 03 	lds	r24, 0x0358
    4138:	90 91 59 03 	lds	r25, 0x0359
    413c:	80 83       	st	Z, r24
	ICR1H_REG = top >> 8;
    413e:	e7 e4       	ldi	r30, 0x47	; 71
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	80 91 58 03 	lds	r24, 0x0358
    4146:	90 91 59 03 	lds	r25, 0x0359
    414a:	89 2f       	mov	r24, r25
    414c:	99 27       	eor	r25, r25
    414e:	80 83       	st	Z, r24

}
    4150:	0f 90       	pop	r0
    4152:	0f 90       	pop	r0
    4154:	cf 91       	pop	r28
    4156:	df 91       	pop	r29
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	ff 90       	pop	r15
    415e:	ef 90       	pop	r14
    4160:	08 95       	ret

00004162 <Timer0_SetPWMPhaseControl>:
 */

#include "Timer0.h"

static void Timer0_SetPWMPhaseControl()
{
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR0_REG, 6);
    416a:	a3 e5       	ldi	r26, 0x53	; 83
    416c:	b0 e0       	ldi	r27, 0x00	; 0
    416e:	e3 e5       	ldi	r30, 0x53	; 83
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	80 81       	ld	r24, Z
    4174:	80 64       	ori	r24, 0x40	; 64
    4176:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR0_REG |= 2 << 4;
    4178:	a3 e5       	ldi	r26, 0x53	; 83
    417a:	b0 e0       	ldi	r27, 0x00	; 0
    417c:	e3 e5       	ldi	r30, 0x53	; 83
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	80 81       	ld	r24, Z
    4182:	80 62       	ori	r24, 0x20	; 32
    4184:	8c 93       	st	X, r24

	// Set DDR as output
//	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	63 e0       	ldi	r22, 0x03	; 3
    418a:	41 e0       	ldi	r20, 0x01	; 1
    418c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

}
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <Timer0_SetNormal>:

static void Timer0_SetNormal()
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer0 Interrupt overflow
	TIMSK_REG |= 1;
    419e:	a9 e5       	ldi	r26, 0x59	; 89
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	e9 e5       	ldi	r30, 0x59	; 89
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	81 60       	ori	r24, 0x01	; 1
    41aa:	8c 93       	st	X, r24

}
    41ac:	cf 91       	pop	r28
    41ae:	df 91       	pop	r29
    41b0:	08 95       	ret

000041b2 <Timer0_SetCTC>:
static void Timer0_SetCTC()
{
    41b2:	df 93       	push	r29
    41b4:	cf 93       	push	r28
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer0 Interrupt overflow
	TIMSK_REG |= 2;
    41ba:	a9 e5       	ldi	r26, 0x59	; 89
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	e9 e5       	ldi	r30, 0x59	; 89
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	82 60       	ori	r24, 0x02	; 2
    41c6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 3);
    41c8:	a3 e5       	ldi	r26, 0x53	; 83
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	e3 e5       	ldi	r30, 0x53	; 83
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	88 60       	ori	r24, 0x08	; 8
    41d4:	8c 93       	st	X, r24

}
    41d6:	cf 91       	pop	r28
    41d8:	df 91       	pop	r29
    41da:	08 95       	ret

000041dc <Timer0_SetFastPWM>:

static void Timer0_SetFastPWM()
{
    41dc:	df 93       	push	r29
    41de:	cf 93       	push	r28
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR0_REG, 6);
    41e4:	a3 e5       	ldi	r26, 0x53	; 83
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	e3 e5       	ldi	r30, 0x53	; 83
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	80 64       	ori	r24, 0x40	; 64
    41f0:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 3);
    41f2:	a3 e5       	ldi	r26, 0x53	; 83
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	e3 e5       	ldi	r30, 0x53	; 83
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	80 81       	ld	r24, Z
    41fc:	88 60       	ori	r24, 0x08	; 8
    41fe:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR0_REG |= 2 << 4;
    4200:	a3 e5       	ldi	r26, 0x53	; 83
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e3 e5       	ldi	r30, 0x53	; 83
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	80 62       	ori	r24, 0x20	; 32
    420c:	8c 93       	st	X, r24

	// Set DDR as output
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	63 e0       	ldi	r22, 0x03	; 3
    4212:	41 e0       	ldi	r20, 0x01	; 1
    4214:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
//	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);

}
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <Timer0_Init>:

void Timer0_Init(timer0_waveform_t waveform)
{
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	00 d0       	rcall	.+0      	; 0x4224 <Timer0_Init+0x6>
    4224:	0f 92       	push	r0
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	89 83       	std	Y+1, r24	; 0x01

	// Global Interrupt
	GIE_EnableGlobalInterrupt();
    422c:	0e 94 81 24 	call	0x4902	; 0x4902 <GIE_EnableGlobalInterrupt>

	// Select Mode (waveform)
	switch(waveform)
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	3b 83       	std	Y+3, r19	; 0x03
    4238:	2a 83       	std	Y+2, r18	; 0x02
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	91 05       	cpc	r25, r1
    4242:	c1 f0       	breq	.+48     	; 0x4274 <Timer0_Init+0x56>
    4244:	2a 81       	ldd	r18, Y+2	; 0x02
    4246:	3b 81       	ldd	r19, Y+3	; 0x03
    4248:	22 30       	cpi	r18, 0x02	; 2
    424a:	31 05       	cpc	r19, r1
    424c:	2c f4       	brge	.+10     	; 0x4258 <Timer0_Init+0x3a>
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	9b 81       	ldd	r25, Y+3	; 0x03
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	61 f0       	breq	.+24     	; 0x426e <Timer0_Init+0x50>
    4256:	16 c0       	rjmp	.+44     	; 0x4284 <Timer0_Init+0x66>
    4258:	2a 81       	ldd	r18, Y+2	; 0x02
    425a:	3b 81       	ldd	r19, Y+3	; 0x03
    425c:	22 30       	cpi	r18, 0x02	; 2
    425e:	31 05       	cpc	r19, r1
    4260:	61 f0       	breq	.+24     	; 0x427a <Timer0_Init+0x5c>
    4262:	8a 81       	ldd	r24, Y+2	; 0x02
    4264:	9b 81       	ldd	r25, Y+3	; 0x03
    4266:	83 30       	cpi	r24, 0x03	; 3
    4268:	91 05       	cpc	r25, r1
    426a:	51 f0       	breq	.+20     	; 0x4280 <Timer0_Init+0x62>
    426c:	0b c0       	rjmp	.+22     	; 0x4284 <Timer0_Init+0x66>
	{

	case TIMER0_NORMAL:
		Timer0_SetNormal();
    426e:	0e 94 cb 20 	call	0x4196	; 0x4196 <Timer0_SetNormal>
    4272:	08 c0       	rjmp	.+16     	; 0x4284 <Timer0_Init+0x66>
		break;
	case TIMER0_PWM_PHASE_CORRECT:
		Timer0_SetPWMPhaseControl();
    4274:	0e 94 b1 20 	call	0x4162	; 0x4162 <Timer0_SetPWMPhaseControl>
    4278:	05 c0       	rjmp	.+10     	; 0x4284 <Timer0_Init+0x66>
		break;
	case TIMER0_CTC:
		Timer0_SetCTC();
    427a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Timer0_SetCTC>
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <Timer0_Init+0x66>
		break;
	case TIMER0_FAST_PWM:
		Timer0_SetFastPWM();
    4280:	0e 94 ee 20 	call	0x41dc	; 0x41dc <Timer0_SetFastPWM>
		break;

	}

}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <Timer0_SetPreload>:
// Normal | CTC



void Timer0_SetPreload(u8 preload)
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	0f 92       	push	r0
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	89 83       	std	Y+1, r24	; 0x01
	if (preload > 256)
	{
		return;
	}

	TCNT0_REG |= preload;
    429c:	a2 e5       	ldi	r26, 0x52	; 82
    429e:	b0 e0       	ldi	r27, 0x00	; 0
    42a0:	e2 e5       	ldi	r30, 0x52	; 82
    42a2:	f0 e0       	ldi	r31, 0x00	; 0
    42a4:	90 81       	ld	r25, Z
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	89 2b       	or	r24, r25
    42aa:	8c 93       	st	X, r24

}
    42ac:	0f 90       	pop	r0
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <Timer0_SetTime>:

void Timer0_SetTime(u16 time)
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <Timer0_SetTime+0x6>
    42ba:	00 d0       	rcall	.+0      	; 0x42bc <Timer0_SetTime+0x8>
    42bc:	0f 92       	push	r0
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	9d 83       	std	Y+5, r25	; 0x05
    42c4:	8c 83       	std	Y+4, r24	; 0x04

	// Tick time = 1/prescale
	// Overload time = (256 - preload value) * Tick time
	// Preload = 256 - (time/Tick Time)

	u8 prescale = TCCR0_REG & 0x07;		// 0000 0111
    42c6:	e3 e5       	ldi	r30, 0x53	; 83
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	87 70       	andi	r24, 0x07	; 7
    42ce:	8b 83       	std	Y+3, r24	; 0x03
	u8 tickTime = 1 / prescale;
    42d0:	8b 81       	ldd	r24, Y+3	; 0x03
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	b9 01       	movw	r22, r18
    42dc:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <__divmodhi4>
    42e0:	cb 01       	movw	r24, r22
    42e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 preload = 256 - (time / tickTime);
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	28 2f       	mov	r18, r24
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	8c 81       	ldd	r24, Y+4	; 0x04
    42ec:	9d 81       	ldd	r25, Y+5	; 0x05
    42ee:	b9 01       	movw	r22, r18
    42f0:	0e 94 c8 28 	call	0x5190	; 0x5190 <__udivmodhi4>
    42f4:	cb 01       	movw	r24, r22
    42f6:	81 95       	neg	r24
    42f8:	89 83       	std	Y+1, r24	; 0x01

	Timer0_SetPreload(preload);
    42fa:	89 81       	ldd	r24, Y+1	; 0x01
    42fc:	0e 94 48 21 	call	0x4290	; 0x4290 <Timer0_SetPreload>

}
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	08 95       	ret

00004310 <Timer0_Start>:

void Timer0_Start(timer0_clockSelect_t clockSelect)
{
    4310:	df 93       	push	r29
    4312:	cf 93       	push	r28
    4314:	0f 92       	push	r0
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    431a:	89 83       	std	Y+1, r24	; 0x01

	// Clock select (Prescale)
	TCCR0_REG |= clockSelect;
    431c:	a3 e5       	ldi	r26, 0x53	; 83
    431e:	b0 e0       	ldi	r27, 0x00	; 0
    4320:	e3 e5       	ldi	r30, 0x53	; 83
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	90 81       	ld	r25, Z
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	89 2b       	or	r24, r25
    432a:	8c 93       	st	X, r24

}
    432c:	0f 90       	pop	r0
    432e:	cf 91       	pop	r28
    4330:	df 91       	pop	r29
    4332:	08 95       	ret

00004334 <Timer0_Stop>:

void Timer0_Stop()
{
    4334:	df 93       	push	r29
    4336:	cf 93       	push	r28
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62

	// Stop Timer/Counter by clearing prescaler
	TCCR0_REG &= 0xf8;
    433c:	a3 e5       	ldi	r26, 0x53	; 83
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	e3 e5       	ldi	r30, 0x53	; 83
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	88 7f       	andi	r24, 0xF8	; 248
    4348:	8c 93       	st	X, r24

}
    434a:	cf 91       	pop	r28
    434c:	df 91       	pop	r29
    434e:	08 95       	ret

00004350 <Timer0_SetDuty>:


// For PWM Modes
void Timer0_SetDuty(u8 dutyPercentage)
{
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	df 93       	push	r29
    4356:	cf 93       	push	r28
    4358:	0f 92       	push	r0
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
    435e:	89 83       	std	Y+1, r24	; 0x01

	OCR0_REG = (u8) (255 * ((f32) dutyPercentage / 100));
    4360:	0c e5       	ldi	r16, 0x5C	; 92
    4362:	10 e0       	ldi	r17, 0x00	; 0
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	88 2f       	mov	r24, r24
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	a0 e0       	ldi	r26, 0x00	; 0
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	bc 01       	movw	r22, r24
    437c:	cd 01       	movw	r24, r26
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	48 ec       	ldi	r20, 0xC8	; 200
    4384:	52 e4       	ldi	r21, 0x42	; 66
    4386:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	4f e7       	ldi	r20, 0x7F	; 127
    4398:	53 e4       	ldi	r21, 0x43	; 67
    439a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	bc 01       	movw	r22, r24
    43a4:	cd 01       	movw	r24, r26
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	f8 01       	movw	r30, r16
    43b0:	80 83       	st	Z, r24

}
    43b2:	0f 90       	pop	r0
    43b4:	cf 91       	pop	r28
    43b6:	df 91       	pop	r29
    43b8:	1f 91       	pop	r17
    43ba:	0f 91       	pop	r16
    43bc:	08 95       	ret

000043be <Timer0_SetFrequency>:

void Timer0_SetFrequency(u8 frequency)
{
    43be:	df 93       	push	r29
    43c0:	cf 93       	push	r28
    43c2:	0f 92       	push	r0
    43c4:	cd b7       	in	r28, 0x3d	; 61
    43c6:	de b7       	in	r29, 0x3e	; 62
    43c8:	89 83       	std	Y+1, r24	; 0x01



}
    43ca:	0f 90       	pop	r0
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <TWI_initMaster>:
#define TWEN	2
#define TWINT	7
#define TWEA	6

void TWI_initMaster(void)
{
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
	// Set Prescaller = 1
	CLR_BIT(TWSR,0);
    43da:	a1 e2       	ldi	r26, 0x21	; 33
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	e1 e2       	ldi	r30, 0x21	; 33
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	80 81       	ld	r24, Z
    43e4:	8e 7f       	andi	r24, 0xFE	; 254
    43e6:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    43e8:	a1 e2       	ldi	r26, 0x21	; 33
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	e1 e2       	ldi	r30, 0x21	; 33
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	8d 7f       	andi	r24, 0xFD	; 253
    43f4:	8c 93       	st	X, r24
//	// Set Freq. = 400KHZ
//	TWBR = 12;

	// This solved the setup and hold time warnings
	// Set Freq. = 100KHZ
	TWBR = 72;
    43f6:	e0 e2       	ldi	r30, 0x20	; 32
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	88 e4       	ldi	r24, 0x48	; 72
    43fc:	80 83       	st	Z, r24

	// Enable ACK
	SET_BIT(TWCR,TWEA);
    43fe:	a6 e5       	ldi	r26, 0x56	; 86
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	e6 e5       	ldi	r30, 0x56	; 86
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	80 81       	ld	r24, Z
    4408:	80 64       	ori	r24, 0x40	; 64
    440a:	8c 93       	st	X, r24

	// Enable TWI
    SET_BIT(TWCR,TWEN);
    440c:	a6 e5       	ldi	r26, 0x56	; 86
    440e:	b0 e0       	ldi	r27, 0x00	; 0
    4410:	e6 e5       	ldi	r30, 0x56	; 86
    4412:	f0 e0       	ldi	r31, 0x00	; 0
    4414:	80 81       	ld	r24, Z
    4416:	84 60       	ori	r24, 0x04	; 4
    4418:	8c 93       	st	X, r24

}
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	08 95       	ret

00004420 <TWI_initSlave>:


void TWI_initSlave(u8 slaveAdd)
{
    4420:	df 93       	push	r29
    4422:	cf 93       	push	r28
    4424:	0f 92       	push	r0
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
    442a:	89 83       	std	Y+1, r24	; 0x01
	// Set Slave Address
	TWAR = slaveAdd<<1;
    442c:	e2 e2       	ldi	r30, 0x22	; 34
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	88 0f       	add	r24, r24
    4434:	80 83       	st	Z, r24

	// Disable General Call
	CLR_BIT(TWAR,0);
    4436:	a2 e2       	ldi	r26, 0x22	; 34
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	e2 e2       	ldi	r30, 0x22	; 34
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	8e 7f       	andi	r24, 0xFE	; 254
    4442:	8c 93       	st	X, r24

	// Enable ACK
	SET_BIT(TWCR,TWEA);
    4444:	a6 e5       	ldi	r26, 0x56	; 86
    4446:	b0 e0       	ldi	r27, 0x00	; 0
    4448:	e6 e5       	ldi	r30, 0x56	; 86
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	80 81       	ld	r24, Z
    444e:	80 64       	ori	r24, 0x40	; 64
    4450:	8c 93       	st	X, r24

	// Enable TWI
    SET_BIT(TWCR,TWEN);
    4452:	a6 e5       	ldi	r26, 0x56	; 86
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	e6 e5       	ldi	r30, 0x56	; 86
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	80 81       	ld	r24, Z
    445c:	84 60       	ori	r24, 0x04	; 4
    445e:	8c 93       	st	X, r24

}
    4460:	0f 90       	pop	r0
    4462:	cf 91       	pop	r28
    4464:	df 91       	pop	r29
    4466:	08 95       	ret

00004468 <TWI_sendStartCondition>:


void TWI_sendStartCondition(void)
{
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62

	// Send Start Condition
	SET_BIT(TWCR,5);
    4470:	a6 e5       	ldi	r26, 0x56	; 86
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	e6 e5       	ldi	r30, 0x56	; 86
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	80 81       	ld	r24, Z
    447a:	80 62       	ori	r24, 0x20	; 32
    447c:	8c 93       	st	X, r24

	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);	/* Enable TWI and clear interrupt flag, ACK */
    447e:	e6 e5       	ldi	r30, 0x56	; 86
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	84 ec       	ldi	r24, 0xC4	; 196
    4484:	80 83       	st	Z, r24
//	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */

	// Wait for the flag
	while(CHECK_BIT(TWCR, TWINT) == 0);
    4486:	e6 e5       	ldi	r30, 0x56	; 86
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	88 23       	and	r24, r24
    448e:	dc f7       	brge	.-10     	; 0x4486 <TWI_sendStartCondition+0x1e>

	LCD_displayChar('C');
    4490:	83 e4       	ldi	r24, 0x43	; 67
    4492:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayChar>

	// Check ACK = SC ACK
	while((TWSR & 0xF8) != 0x08);
    4496:	e1 e2       	ldi	r30, 0x21	; 33
    4498:	f0 e0       	ldi	r31, 0x00	; 0
    449a:	80 81       	ld	r24, Z
    449c:	88 2f       	mov	r24, r24
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	88 7f       	andi	r24, 0xF8	; 248
    44a2:	90 70       	andi	r25, 0x00	; 0
    44a4:	88 30       	cpi	r24, 0x08	; 8
    44a6:	91 05       	cpc	r25, r1
    44a8:	b1 f7       	brne	.-20     	; 0x4496 <TWI_sendStartCondition+0x2e>


}
    44aa:	cf 91       	pop	r28
    44ac:	df 91       	pop	r29
    44ae:	08 95       	ret

000044b0 <TWI_sendRepStartCondition>:


void TWI_sendRepStartCondition(void)
{
    44b0:	df 93       	push	r29
    44b2:	cf 93       	push	r28
    44b4:	cd b7       	in	r28, 0x3d	; 61
    44b6:	de b7       	in	r29, 0x3e	; 62

	// Send Start Condition
	SET_BIT(TWCR,5);
    44b8:	a6 e5       	ldi	r26, 0x56	; 86
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	e6 e5       	ldi	r30, 0x56	; 86
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	80 62       	ori	r24, 0x20	; 32
    44c4:	8c 93       	st	X, r24

	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);	/* Enable TWI and clear interrupt flag, ACK */
    44c6:	e6 e5       	ldi	r30, 0x56	; 86
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	84 ec       	ldi	r24, 0xC4	; 196
    44cc:	80 83       	st	Z, r24

	// Wait for the flag
	while(0 == GET_BIT(TWCR,TWINT));
    44ce:	e6 e5       	ldi	r30, 0x56	; 86
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	88 23       	and	r24, r24
    44d6:	dc f7       	brge	.-10     	; 0x44ce <TWI_sendRepStartCondition+0x1e>

	// Check ACK = Repeated SC ACK
	while((TWSR & 0xF8) != 0x10);
    44d8:	e1 e2       	ldi	r30, 0x21	; 33
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	88 2f       	mov	r24, r24
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	88 7f       	andi	r24, 0xF8	; 248
    44e4:	90 70       	andi	r25, 0x00	; 0
    44e6:	80 31       	cpi	r24, 0x10	; 16
    44e8:	91 05       	cpc	r25, r1
    44ea:	b1 f7       	brne	.-20     	; 0x44d8 <TWI_sendRepStartCondition+0x28>
}
    44ec:	cf 91       	pop	r28
    44ee:	df 91       	pop	r29
    44f0:	08 95       	ret

000044f2 <TWI_sendStopCondition>:


void TWI_sendStopCondition(void)
{
    44f2:	df 93       	push	r29
    44f4:	cf 93       	push	r28
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62

	// Send Stop Condition
	SET_BIT(TWCR,4);
    44fa:	a6 e5       	ldi	r26, 0x56	; 86
    44fc:	b0 e0       	ldi	r27, 0x00	; 0
    44fe:	e6 e5       	ldi	r30, 0x56	; 86
    4500:	f0 e0       	ldi	r31, 0x00	; 0
    4502:	80 81       	ld	r24, Z
    4504:	80 61       	ori	r24, 0x10	; 16
    4506:	8c 93       	st	X, r24

	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);	/* Enable TWI and clear interrupt flag, ACK */
    4508:	e6 e5       	ldi	r30, 0x56	; 86
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	84 ec       	ldi	r24, 0xC4	; 196
    450e:	80 83       	st	Z, r24

	while (GET_BIT(TWCR, 4) == 1);
    4510:	e6 e5       	ldi	r30, 0x56	; 86
    4512:	f0 e0       	ldi	r31, 0x00	; 0
    4514:	80 81       	ld	r24, Z
    4516:	82 95       	swap	r24
    4518:	8f 70       	andi	r24, 0x0F	; 15
    451a:	88 2f       	mov	r24, r24
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	81 70       	andi	r24, 0x01	; 1
    4520:	90 70       	andi	r25, 0x00	; 0
    4522:	88 23       	and	r24, r24
    4524:	a9 f7       	brne	.-22     	; 0x4510 <TWI_sendStopCondition+0x1e>

}
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <TWI_sendSlaveAddwithWrite>:


void TWI_sendSlaveAddwithWrite(u8 slaveAdd)
{
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	0f 92       	push	r0
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	89 83       	std	Y+1, r24	; 0x01
	// Set slave address
	TWDR = slaveAdd<<1;
    4538:	e3 e2       	ldi	r30, 0x23	; 35
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	88 0f       	add	r24, r24
    4540:	80 83       	st	Z, r24

	// Select write operation
	CLR_BIT(TWDR,0);
    4542:	a3 e2       	ldi	r26, 0x23	; 35
    4544:	b0 e0       	ldi	r27, 0x00	; 0
    4546:	e3 e2       	ldi	r30, 0x23	; 35
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	80 81       	ld	r24, Z
    454c:	8e 7f       	andi	r24, 0xFE	; 254
    454e:	8c 93       	st	X, r24

	// Clear SC bit
	CLR_BIT(TWCR,5);
    4550:	a6 e5       	ldi	r26, 0x56	; 86
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	e6 e5       	ldi	r30, 0x56	; 86
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	8f 7d       	andi	r24, 0xDF	; 223
    455c:	8c 93       	st	X, r24

	// Clear flag to start next job
	SET_BIT(TWCR,TWINT);
    455e:	a6 e5       	ldi	r26, 0x56	; 86
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	e6 e5       	ldi	r30, 0x56	; 86
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	80 68       	ori	r24, 0x80	; 128
    456a:	8c 93       	st	X, r24
	// Enable TWI
	SET_BIT(TWCR,TWEN);
    456c:	a6 e5       	ldi	r26, 0x56	; 86
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	e6 e5       	ldi	r30, 0x56	; 86
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	84 60       	ori	r24, 0x04	; 4
    4578:	8c 93       	st	X, r24

	// Wait for the flag
	while(0 == GET_BIT(TWCR,TWINT));
    457a:	e6 e5       	ldi	r30, 0x56	; 86
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	88 23       	and	r24, r24
    4582:	dc f7       	brge	.-10     	; 0x457a <TWI_sendSlaveAddwithWrite+0x4e>

	// Check ACK = Master transmit ( slave address + Write request ) ACK
	while((TWSR & 0xF8) != 0x18);
    4584:	e1 e2       	ldi	r30, 0x21	; 33
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	88 2f       	mov	r24, r24
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	88 7f       	andi	r24, 0xF8	; 248
    4590:	90 70       	andi	r25, 0x00	; 0
    4592:	88 31       	cpi	r24, 0x18	; 24
    4594:	91 05       	cpc	r25, r1
    4596:	b1 f7       	brne	.-20     	; 0x4584 <TWI_sendSlaveAddwithWrite+0x58>
}
    4598:	0f 90       	pop	r0
    459a:	cf 91       	pop	r28
    459c:	df 91       	pop	r29
    459e:	08 95       	ret

000045a0 <TWI_sendSlaveAddwithRead>:


void TWI_sendSlaveAddwithRead(u8 slaveAdd)
{
    45a0:	df 93       	push	r29
    45a2:	cf 93       	push	r28
    45a4:	0f 92       	push	r0
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	89 83       	std	Y+1, r24	; 0x01
	// Set slave address
	TWDR = slaveAdd<<1;
    45ac:	e3 e2       	ldi	r30, 0x23	; 35
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	89 81       	ldd	r24, Y+1	; 0x01
    45b2:	88 0f       	add	r24, r24
    45b4:	80 83       	st	Z, r24

	// Select read operation
	SET_BIT(TWDR,0);
    45b6:	a3 e2       	ldi	r26, 0x23	; 35
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	e3 e2       	ldi	r30, 0x23	; 35
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	81 60       	ori	r24, 0x01	; 1
    45c2:	8c 93       	st	X, r24

	// Clear SC bit
	CLR_BIT(TWCR,5);
    45c4:	a6 e5       	ldi	r26, 0x56	; 86
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e6 e5       	ldi	r30, 0x56	; 86
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	8f 7d       	andi	r24, 0xDF	; 223
    45d0:	8c 93       	st	X, r24

	// Clear flag to start next job
	SET_BIT(TWCR,TWINT);
    45d2:	a6 e5       	ldi	r26, 0x56	; 86
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	e6 e5       	ldi	r30, 0x56	; 86
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	80 81       	ld	r24, Z
    45dc:	80 68       	ori	r24, 0x80	; 128
    45de:	8c 93       	st	X, r24
	// Enable TWI
	SET_BIT(TWCR,TWEN);
    45e0:	a6 e5       	ldi	r26, 0x56	; 86
    45e2:	b0 e0       	ldi	r27, 0x00	; 0
    45e4:	e6 e5       	ldi	r30, 0x56	; 86
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	80 81       	ld	r24, Z
    45ea:	84 60       	ori	r24, 0x04	; 4
    45ec:	8c 93       	st	X, r24

	// Wait for the flagz
	while(0 == GET_BIT(TWCR,TWINT));
    45ee:	e6 e5       	ldi	r30, 0x56	; 86
    45f0:	f0 e0       	ldi	r31, 0x00	; 0
    45f2:	80 81       	ld	r24, Z
    45f4:	88 23       	and	r24, r24
    45f6:	dc f7       	brge	.-10     	; 0x45ee <TWI_sendSlaveAddwithRead+0x4e>

	// Check ACK = Master transmit ( slave address + Read request ) ACK
	while((TWSR & 0xF8) != 0x40);
    45f8:	e1 e2       	ldi	r30, 0x21	; 33
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	88 7f       	andi	r24, 0xF8	; 248
    4604:	90 70       	andi	r25, 0x00	; 0
    4606:	80 34       	cpi	r24, 0x40	; 64
    4608:	91 05       	cpc	r25, r1
    460a:	b1 f7       	brne	.-20     	; 0x45f8 <TWI_sendSlaveAddwithRead+0x58>
}
    460c:	0f 90       	pop	r0
    460e:	cf 91       	pop	r28
    4610:	df 91       	pop	r29
    4612:	08 95       	ret

00004614 <TWI_sendMasterDataByte>:


void TWI_sendMasterDataByte(u8 data)
{
    4614:	df 93       	push	r29
    4616:	cf 93       	push	r28
    4618:	0f 92       	push	r0
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	89 83       	std	Y+1, r24	; 0x01

	// Write Data into data register
	TWDR = data;
    4620:	e3 e2       	ldi	r30, 0x23	; 35
    4622:	f0 e0       	ldi	r31, 0x00	; 0
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	80 83       	st	Z, r24

	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);	/* Enable TWI and clear interrupt flag, ACK */
    4628:	e6 e5       	ldi	r30, 0x56	; 86
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	84 ec       	ldi	r24, 0xC4	; 196
    462e:	80 83       	st	Z, r24
	// Wait for the flag
	while(0 == GET_BIT(TWCR,TWINT));
    4630:	e6 e5       	ldi	r30, 0x56	; 86
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	80 81       	ld	r24, Z
    4636:	88 23       	and	r24, r24
    4638:	dc f7       	brge	.-10     	; 0x4630 <TWI_sendMasterDataByte+0x1c>

	// Check ACK = Master transmit data ACK
	while((TWSR & 0xF8) != 0x28);
    463a:	e1 e2       	ldi	r30, 0x21	; 33
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	88 2f       	mov	r24, r24
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	88 7f       	andi	r24, 0xF8	; 248
    4646:	90 70       	andi	r25, 0x00	; 0
    4648:	88 32       	cpi	r24, 0x28	; 40
    464a:	91 05       	cpc	r25, r1
    464c:	b1 f7       	brne	.-20     	; 0x463a <TWI_sendMasterDataByte+0x26>
}
    464e:	0f 90       	pop	r0
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <TWI_readMasterDataByte>:


void TWI_readMasterDataByte(u8* returnedData)
{
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	00 d0       	rcall	.+0      	; 0x465c <TWI_readMasterDataByte+0x6>
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	9a 83       	std	Y+2, r25	; 0x02
    4662:	89 83       	std	Y+1, r24	; 0x01
	if(returnedData != 0)
    4664:	89 81       	ldd	r24, Y+1	; 0x01
    4666:	9a 81       	ldd	r25, Y+2	; 0x02
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	a1 f0       	breq	.+40     	; 0x4694 <TWI_readMasterDataByte+0x3e>
	{

		TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);	/* Enable TWI and clear interrupt flag, ACK */
    466c:	e6 e5       	ldi	r30, 0x56	; 86
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	84 ec       	ldi	r24, 0xC4	; 196
    4672:	80 83       	st	Z, r24

	    // Check ACK = Master received data with ACK
		while((TWSR & 0xF8) != 0x50);
    4674:	e1 e2       	ldi	r30, 0x21	; 33
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	80 81       	ld	r24, Z
    467a:	88 2f       	mov	r24, r24
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	88 7f       	andi	r24, 0xF8	; 248
    4680:	90 70       	andi	r25, 0x00	; 0
    4682:	80 35       	cpi	r24, 0x50	; 80
    4684:	91 05       	cpc	r25, r1
    4686:	b1 f7       	brne	.-20     	; 0x4674 <TWI_readMasterDataByte+0x1e>

		// Read Data from data register
		*returnedData = TWDR;
    4688:	e3 e2       	ldi	r30, 0x23	; 35
    468a:	f0 e0       	ldi	r31, 0x00	; 0
    468c:	80 81       	ld	r24, Z
    468e:	e9 81       	ldd	r30, Y+1	; 0x01
    4690:	fa 81       	ldd	r31, Y+2	; 0x02
    4692:	80 83       	st	Z, r24
	}
}
    4694:	0f 90       	pop	r0
    4696:	0f 90       	pop	r0
    4698:	cf 91       	pop	r28
    469a:	df 91       	pop	r29
    469c:	08 95       	ret

0000469e <SPI_MasterInit>:
 */

#include "SPI.h"

void SPI_MasterInit()
{
    469e:	df 93       	push	r29
    46a0:	cf 93       	push	r28
    46a2:	cd b7       	in	r28, 0x3d	; 61
    46a4:	de b7       	in	r29, 0x3e	; 62

	// SS should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	64 e0       	ldi	r22, 0x04	; 4
    46aa:	41 e0       	ldi	r20, 0x01	; 1
    46ac:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	// SS set to high (No Slave Selected)
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	64 e0       	ldi	r22, 0x04	; 4
    46b4:	41 e0       	ldi	r20, 0x01	; 1
    46b6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <Dio_writeChanel>

	// MOSI should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	65 e0       	ldi	r22, 0x05	; 5
    46be:	41 e0       	ldi	r20, 0x01	; 1
    46c0:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>
	// MISO should be input
	// SCK should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	67 e0       	ldi	r22, 0x07	; 7
    46c8:	41 e0       	ldi	r20, 0x01	; 1
    46ca:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// Enable SPI
	SPI_SPCR_REG |= 1 << 6;
    46ce:	ad e2       	ldi	r26, 0x2D	; 45
    46d0:	b0 e0       	ldi	r27, 0x00	; 0
    46d2:	ed e2       	ldi	r30, 0x2D	; 45
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	80 64       	ori	r24, 0x40	; 64
    46da:	8c 93       	st	X, r24

	// Master Mode
	SPI_SPCR_REG |= 1 << 4;
    46dc:	ad e2       	ldi	r26, 0x2D	; 45
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	ed e2       	ldi	r30, 0x2D	; 45
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	80 61       	ori	r24, 0x10	; 16
    46e8:	8c 93       	st	X, r24
	// MSB is transmitted first
	// Clock rising by default
	// Clock frequency is by default F_CPU / 4 -> 4 MHZ

	// Set clock as 1 MHZ
	SPI_SPCR_REG |= 1;
    46ea:	ad e2       	ldi	r26, 0x2D	; 45
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	ed e2       	ldi	r30, 0x2D	; 45
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	80 81       	ld	r24, Z
    46f4:	81 60       	ori	r24, 0x01	; 1
    46f6:	8c 93       	st	X, r24

}
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <SPI_SlaveInit>:

void SPI_SlaveInit()
{
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62

//	// SS should be output
//	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
	// MISO should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	66 e0       	ldi	r22, 0x06	; 6
    470a:	41 e0       	ldi	r20, 0x01	; 1
    470c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <Dio_configChanel>

	// Enable SPI
	SPI_SPCR_REG |= 1 << 6;
    4710:	ad e2       	ldi	r26, 0x2D	; 45
    4712:	b0 e0       	ldi	r27, 0x00	; 0
    4714:	ed e2       	ldi	r30, 0x2D	; 45
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	80 81       	ld	r24, Z
    471a:	80 64       	ori	r24, 0x40	; 64
    471c:	8c 93       	st	X, r24

	// MSB is transmitted first
	// Clock rising by default
	// Clock frequency is by default F_CPU / 4

}
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	08 95       	ret

00004724 <SPI_MasterTranser>:

u8 SPI_MasterTranser(u8 data)
{
    4724:	df 93       	push	r29
    4726:	cf 93       	push	r28
    4728:	0f 92       	push	r0
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	89 83       	std	Y+1, r24	; 0x01

	SPI_SPDR_REG = data;
    4730:	ef e2       	ldi	r30, 0x2F	; 47
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	80 83       	st	Z, r24

	// Wait for the flag
	while ( (SPI_SPSR_REG >> 7) & 1 == 0);

	return SPI_SPDR_REG;
    4738:	ef e2       	ldi	r30, 0x2F	; 47
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	80 81       	ld	r24, Z

}
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <SPI_MasterSend>:

void SPI_MasterSend(u8 data)
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	0f 92       	push	r0
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	89 83       	std	Y+1, r24	; 0x01

	SPI_MasterTranser(data);
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	0e 94 92 23 	call	0x4724	; 0x4724 <SPI_MasterTranser>

}
    4758:	0f 90       	pop	r0
    475a:	cf 91       	pop	r28
    475c:	df 91       	pop	r29
    475e:	08 95       	ret

00004760 <SPI_MasterReceive>:

u8 SPI_MasterReceive()
{
    4760:	df 93       	push	r29
    4762:	cf 93       	push	r28
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62

	return SPI_MasterTranser(0);
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	0e 94 92 23 	call	0x4724	; 0x4724 <SPI_MasterTranser>


}
    476e:	cf 91       	pop	r28
    4770:	df 91       	pop	r29
    4772:	08 95       	ret

00004774 <SPI_SlaveSend>:

void SPI_SlaveSend(u8 data)
{
    4774:	df 93       	push	r29
    4776:	cf 93       	push	r28
    4778:	0f 92       	push	r0
    477a:	cd b7       	in	r28, 0x3d	; 61
    477c:	de b7       	in	r29, 0x3e	; 62
    477e:	89 83       	std	Y+1, r24	; 0x01

	SPI_SPDR_REG = data;
    4780:	ef e2       	ldi	r30, 0x2F	; 47
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	80 83       	st	Z, r24

}
    4788:	0f 90       	pop	r0
    478a:	cf 91       	pop	r28
    478c:	df 91       	pop	r29
    478e:	08 95       	ret

00004790 <SPI_SlaveReceive>:

u8 SPI_SlaveReceive()
{
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62

	return SPI_MasterTranser(0);
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	0e 94 92 23 	call	0x4724	; 0x4724 <SPI_MasterTranser>

}
    479e:	cf 91       	pop	r28
    47a0:	df 91       	pop	r29
    47a2:	08 95       	ret

000047a4 <IEEPROM_Init>:
#define EEWE	1
#define EERE	0
#define SPMEN	0

void IEEPROM_Init()
{
    47a4:	df 93       	push	r29
    47a6:	cf 93       	push	r28
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62

	GIE_DisableGlobalInterrupt();
    47ac:	0e 94 8f 24 	call	0x491e	; 0x491e <GIE_DisableGlobalInterrupt>
	EECR = 0;
    47b0:	ec e3       	ldi	r30, 0x3C	; 60
    47b2:	f0 e0       	ldi	r31, 0x00	; 0
    47b4:	10 82       	st	Z, r1

}
    47b6:	cf 91       	pop	r28
    47b8:	df 91       	pop	r29
    47ba:	08 95       	ret

000047bc <IEEPROM_Write>:

void IEEPROM_Write(u16 uiAddress, u16 ucData)
{
    47bc:	df 93       	push	r29
    47be:	cf 93       	push	r28
    47c0:	00 d0       	rcall	.+0      	; 0x47c2 <IEEPROM_Write+0x6>
    47c2:	00 d0       	rcall	.+0      	; 0x47c4 <IEEPROM_Write+0x8>
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
    47c8:	9a 83       	std	Y+2, r25	; 0x02
    47ca:	89 83       	std	Y+1, r24	; 0x01
    47cc:	7c 83       	std	Y+4, r23	; 0x04
    47ce:	6b 83       	std	Y+3, r22	; 0x03

	eeprom_write_byte(uiAddress, ucData);
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	9a 81       	ldd	r25, Y+2	; 0x02
    47d4:	2b 81       	ldd	r18, Y+3	; 0x03
    47d6:	62 2f       	mov	r22, r18
    47d8:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__eewr_byte_m32>

}
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	cf 91       	pop	r28
    47e6:	df 91       	pop	r29
    47e8:	08 95       	ret

000047ea <IEEPROM_Read>:

u8 IEEPROM_Read(u16 uiAddress)
{
    47ea:	df 93       	push	r29
    47ec:	cf 93       	push	r28
    47ee:	00 d0       	rcall	.+0      	; 0x47f0 <IEEPROM_Read+0x6>
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62
    47f4:	9a 83       	std	Y+2, r25	; 0x02
    47f6:	89 83       	std	Y+1, r24	; 0x01

	return eeprom_read_byte(uiAddress);
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	9a 81       	ldd	r25, Y+2	; 0x02
    47fc:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eerd_byte_m32>

}
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <IEEPROM_WriteString>:

void IEEPROM_WriteString(u16 address, u8* string)
{
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	00 d0       	rcall	.+0      	; 0x4810 <IEEPROM_WriteString+0x6>
    4810:	00 d0       	rcall	.+0      	; 0x4812 <IEEPROM_WriteString+0x8>
    4812:	00 d0       	rcall	.+0      	; 0x4814 <IEEPROM_WriteString+0xa>
    4814:	cd b7       	in	r28, 0x3d	; 61
    4816:	de b7       	in	r29, 0x3e	; 62
    4818:	9c 83       	std	Y+4, r25	; 0x04
    481a:	8b 83       	std	Y+3, r24	; 0x03
    481c:	7e 83       	std	Y+6, r23	; 0x06
    481e:	6d 83       	std	Y+5, r22	; 0x05

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    4820:	8d 81       	ldd	r24, Y+5	; 0x05
    4822:	9e 81       	ldd	r25, Y+6	; 0x06
    4824:	9a 83       	std	Y+2, r25	; 0x02
    4826:	89 83       	std	Y+1, r24	; 0x01
    4828:	12 c0       	rjmp	.+36     	; 0x484e <IEEPROM_WriteString+0x44>
	{

		eeprom_write_byte(address, *ptr);
    482a:	8b 81       	ldd	r24, Y+3	; 0x03
    482c:	9c 81       	ldd	r25, Y+4	; 0x04
    482e:	e9 81       	ldd	r30, Y+1	; 0x01
    4830:	fa 81       	ldd	r31, Y+2	; 0x02
    4832:	20 81       	ld	r18, Z
    4834:	62 2f       	mov	r22, r18
    4836:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__eewr_byte_m32>
		address++;
    483a:	8b 81       	ldd	r24, Y+3	; 0x03
    483c:	9c 81       	ldd	r25, Y+4	; 0x04
    483e:	01 96       	adiw	r24, 0x01	; 1
    4840:	9c 83       	std	Y+4, r25	; 0x04
    4842:	8b 83       	std	Y+3, r24	; 0x03
}

void IEEPROM_WriteString(u16 address, u8* string)
{

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	9a 81       	ldd	r25, Y+2	; 0x02
    4848:	01 96       	adiw	r24, 0x01	; 1
    484a:	9a 83       	std	Y+2, r25	; 0x02
    484c:	89 83       	std	Y+1, r24	; 0x01
    484e:	e9 81       	ldd	r30, Y+1	; 0x01
    4850:	fa 81       	ldd	r31, Y+2	; 0x02
    4852:	80 81       	ld	r24, Z
    4854:	88 23       	and	r24, r24
    4856:	49 f7       	brne	.-46     	; 0x482a <IEEPROM_WriteString+0x20>

		eeprom_write_byte(address, *ptr);
		address++;

	}
	eeprom_write_byte(address, '\0');
    4858:	8b 81       	ldd	r24, Y+3	; 0x03
    485a:	9c 81       	ldd	r25, Y+4	; 0x04
    485c:	60 e0       	ldi	r22, 0x00	; 0
    485e:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__eewr_byte_m32>

}
    4862:	26 96       	adiw	r28, 0x06	; 6
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <IEEPROM_ReadString>:

void IEEPROM_ReadString(u16 address, u8* string, u8 size)
{
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	df 93       	push	r29
    487a:	cf 93       	push	r28
    487c:	00 d0       	rcall	.+0      	; 0x487e <IEEPROM_ReadString+0xa>
    487e:	00 d0       	rcall	.+0      	; 0x4880 <IEEPROM_ReadString+0xc>
    4880:	00 d0       	rcall	.+0      	; 0x4882 <IEEPROM_ReadString+0xe>
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	9b 83       	std	Y+3, r25	; 0x03
    4888:	8a 83       	std	Y+2, r24	; 0x02
    488a:	7d 83       	std	Y+5, r23	; 0x05
    488c:	6c 83       	std	Y+4, r22	; 0x04
    488e:	4e 83       	std	Y+6, r20	; 0x06

	for (u8 i = 0; i < size - 1; i++)
    4890:	19 82       	std	Y+1, r1	; 0x01
    4892:	16 c0       	rjmp	.+44     	; 0x48c0 <IEEPROM_ReadString+0x4c>
	{

		string[i] = eeprom_read_byte(address);
    4894:	89 81       	ldd	r24, Y+1	; 0x01
    4896:	28 2f       	mov	r18, r24
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	8c 81       	ldd	r24, Y+4	; 0x04
    489c:	9d 81       	ldd	r25, Y+5	; 0x05
    489e:	8c 01       	movw	r16, r24
    48a0:	02 0f       	add	r16, r18
    48a2:	13 1f       	adc	r17, r19
    48a4:	8a 81       	ldd	r24, Y+2	; 0x02
    48a6:	9b 81       	ldd	r25, Y+3	; 0x03
    48a8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eerd_byte_m32>
    48ac:	f8 01       	movw	r30, r16
    48ae:	80 83       	st	Z, r24
		address++;
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	9b 81       	ldd	r25, Y+3	; 0x03
    48b4:	01 96       	adiw	r24, 0x01	; 1
    48b6:	9b 83       	std	Y+3, r25	; 0x03
    48b8:	8a 83       	std	Y+2, r24	; 0x02
}

void IEEPROM_ReadString(u16 address, u8* string, u8 size)
{

	for (u8 i = 0; i < size - 1; i++)
    48ba:	89 81       	ldd	r24, Y+1	; 0x01
    48bc:	8f 5f       	subi	r24, 0xFF	; 255
    48be:	89 83       	std	Y+1, r24	; 0x01
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	28 2f       	mov	r18, r24
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	8e 81       	ldd	r24, Y+6	; 0x06
    48c8:	88 2f       	mov	r24, r24
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	28 17       	cp	r18, r24
    48d0:	39 07       	cpc	r19, r25
    48d2:	04 f3       	brlt	.-64     	; 0x4894 <IEEPROM_ReadString+0x20>
		string[i] = eeprom_read_byte(address);
		address++;

	}

	string[size - 1] = '\0';
    48d4:	8e 81       	ldd	r24, Y+6	; 0x06
    48d6:	88 2f       	mov	r24, r24
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	9c 01       	movw	r18, r24
    48dc:	21 50       	subi	r18, 0x01	; 1
    48de:	30 40       	sbci	r19, 0x00	; 0
    48e0:	8c 81       	ldd	r24, Y+4	; 0x04
    48e2:	9d 81       	ldd	r25, Y+5	; 0x05
    48e4:	fc 01       	movw	r30, r24
    48e6:	e2 0f       	add	r30, r18
    48e8:	f3 1f       	adc	r31, r19
    48ea:	10 82       	st	Z, r1

}
    48ec:	26 96       	adiw	r28, 0x06	; 6
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	cf 91       	pop	r28
    48fa:	df 91       	pop	r29
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	08 95       	ret

00004902 <GIE_EnableGlobalInterrupt>:
 */

#include "GIE.h"

void GIE_EnableGlobalInterrupt()
{
    4902:	df 93       	push	r29
    4904:	cf 93       	push	r28
    4906:	cd b7       	in	r28, 0x3d	; 61
    4908:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GIE_SREG, GIE_l_bit);
    490a:	af e5       	ldi	r26, 0x5F	; 95
    490c:	b0 e0       	ldi	r27, 0x00	; 0
    490e:	ef e5       	ldi	r30, 0x5F	; 95
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	80 68       	ori	r24, 0x80	; 128
    4916:	8c 93       	st	X, r24

}
    4918:	cf 91       	pop	r28
    491a:	df 91       	pop	r29
    491c:	08 95       	ret

0000491e <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt()
{
    491e:	df 93       	push	r29
    4920:	cf 93       	push	r28
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(GIE_SREG, GIE_l_bit);
    4926:	af e5       	ldi	r26, 0x5F	; 95
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	ef e5       	ldi	r30, 0x5F	; 95
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	80 81       	ld	r24, Z
    4930:	8f 77       	andi	r24, 0x7F	; 127
    4932:	8c 93       	st	X, r24

}
    4934:	cf 91       	pop	r28
    4936:	df 91       	pop	r29
    4938:	08 95       	ret

0000493a <EXTI_EnableInterrupt>:
 */

#include "EXTI.h"

void EXTI_EnableInterrupt(exti_intId_t intId, exti_senseControl_t senseControl)
{
    493a:	df 93       	push	r29
    493c:	cf 93       	push	r28
    493e:	00 d0       	rcall	.+0      	; 0x4940 <EXTI_EnableInterrupt+0x6>
    4940:	00 d0       	rcall	.+0      	; 0x4942 <EXTI_EnableInterrupt+0x8>
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	89 83       	std	Y+1, r24	; 0x01
    4948:	6a 83       	std	Y+2, r22	; 0x02

	// Enable
	SET_BIT(GICR_REG, intId);
    494a:	ab e5       	ldi	r26, 0x5B	; 91
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	eb e5       	ldi	r30, 0x5B	; 91
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	48 2f       	mov	r20, r24
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	28 2f       	mov	r18, r24
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <EXTI_EnableInterrupt+0x2c>
    4962:	88 0f       	add	r24, r24
    4964:	99 1f       	adc	r25, r25
    4966:	2a 95       	dec	r18
    4968:	e2 f7       	brpl	.-8      	; 0x4962 <EXTI_EnableInterrupt+0x28>
    496a:	84 2b       	or	r24, r20
    496c:	8c 93       	st	X, r24

	// Set sensor control
	switch (intId) {
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	28 2f       	mov	r18, r24
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	3c 83       	std	Y+4, r19	; 0x04
    4976:	2b 83       	std	Y+3, r18	; 0x03
    4978:	8b 81       	ldd	r24, Y+3	; 0x03
    497a:	9c 81       	ldd	r25, Y+4	; 0x04
    497c:	86 30       	cpi	r24, 0x06	; 6
    497e:	91 05       	cpc	r25, r1
    4980:	59 f0       	breq	.+22     	; 0x4998 <EXTI_EnableInterrupt+0x5e>
    4982:	2b 81       	ldd	r18, Y+3	; 0x03
    4984:	3c 81       	ldd	r19, Y+4	; 0x04
    4986:	27 30       	cpi	r18, 0x07	; 7
    4988:	31 05       	cpc	r19, r1
    498a:	79 f0       	breq	.+30     	; 0x49aa <EXTI_EnableInterrupt+0x70>
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	85 30       	cpi	r24, 0x05	; 5
    4992:	91 05       	cpc	r25, r1
    4994:	d1 f0       	breq	.+52     	; 0x49ca <EXTI_EnableInterrupt+0x90>
    4996:	21 c0       	rjmp	.+66     	; 0x49da <EXTI_EnableInterrupt+0xa0>
	case EXTI_INT0:
		MCUCR_REG |= senseControl;
    4998:	a5 e5       	ldi	r26, 0x55	; 85
    499a:	b0 e0       	ldi	r27, 0x00	; 0
    499c:	e5 e5       	ldi	r30, 0x55	; 85
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	90 81       	ld	r25, Z
    49a2:	8a 81       	ldd	r24, Y+2	; 0x02
    49a4:	89 2b       	or	r24, r25
    49a6:	8c 93       	st	X, r24
    49a8:	18 c0       	rjmp	.+48     	; 0x49da <EXTI_EnableInterrupt+0xa0>
		break;
	case EXTI_INT1:
		MCUCR_REG |= (senseControl << 2);
    49aa:	a5 e5       	ldi	r26, 0x55	; 85
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	e5 e5       	ldi	r30, 0x55	; 85
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	80 81       	ld	r24, Z
    49b4:	28 2f       	mov	r18, r24
    49b6:	8a 81       	ldd	r24, Y+2	; 0x02
    49b8:	88 2f       	mov	r24, r24
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	88 0f       	add	r24, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	88 0f       	add	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	82 2b       	or	r24, r18
    49c6:	8c 93       	st	X, r24
    49c8:	08 c0       	rjmp	.+16     	; 0x49da <EXTI_EnableInterrupt+0xa0>
		break;
	case EXTI_INT2:
		MCUCSR_REG |= senseControl;
    49ca:	a4 e5       	ldi	r26, 0x54	; 84
    49cc:	b0 e0       	ldi	r27, 0x00	; 0
    49ce:	e4 e5       	ldi	r30, 0x54	; 84
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	90 81       	ld	r25, Z
    49d4:	8a 81       	ldd	r24, Y+2	; 0x02
    49d6:	89 2b       	or	r24, r25
    49d8:	8c 93       	st	X, r24
		break;
	}

}
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	cf 91       	pop	r28
    49e4:	df 91       	pop	r29
    49e6:	08 95       	ret

000049e8 <EXTI_DisableInterrupt>:

void EXTI_DisableInterrupt(exti_intId_t intId)
{
    49e8:	df 93       	push	r29
    49ea:	cf 93       	push	r28
    49ec:	0f 92       	push	r0
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
    49f2:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_BIT(GICR_REG, intId);
    49f4:	ab e5       	ldi	r26, 0x5B	; 91
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	eb e5       	ldi	r30, 0x5B	; 91
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
    49fe:	48 2f       	mov	r20, r24
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	28 2f       	mov	r18, r24
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	02 2e       	mov	r0, r18
    4a0c:	02 c0       	rjmp	.+4      	; 0x4a12 <EXTI_DisableInterrupt+0x2a>
    4a0e:	88 0f       	add	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	0a 94       	dec	r0
    4a14:	e2 f7       	brpl	.-8      	; 0x4a0e <EXTI_DisableInterrupt+0x26>
    4a16:	80 95       	com	r24
    4a18:	84 23       	and	r24, r20
    4a1a:	8c 93       	st	X, r24

}
    4a1c:	0f 90       	pop	r0
    4a1e:	cf 91       	pop	r28
    4a20:	df 91       	pop	r29
    4a22:	08 95       	ret

00004a24 <Dio_configChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_configChanel(dio_port_t port, dio_pin_t pin, dio_dir_t dir)
{
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	00 d0       	rcall	.+0      	; 0x4a2a <Dio_configChanel+0x6>
    4a2a:	00 d0       	rcall	.+0      	; 0x4a2c <Dio_configChanel+0x8>
    4a2c:	0f 92       	push	r0
    4a2e:	cd b7       	in	r28, 0x3d	; 61
    4a30:	de b7       	in	r29, 0x3e	; 62
    4a32:	89 83       	std	Y+1, r24	; 0x01
    4a34:	6a 83       	std	Y+2, r22	; 0x02
    4a36:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	28 2f       	mov	r18, r24
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	3d 83       	std	Y+5, r19	; 0x05
    4a40:	2c 83       	std	Y+4, r18	; 0x04
    4a42:	8c 81       	ldd	r24, Y+4	; 0x04
    4a44:	9d 81       	ldd	r25, Y+5	; 0x05
    4a46:	81 30       	cpi	r24, 0x01	; 1
    4a48:	91 05       	cpc	r25, r1
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <Dio_configChanel+0x2a>
    4a4c:	43 c0       	rjmp	.+134    	; 0x4ad4 <Dio_configChanel+0xb0>
    4a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    4a50:	3d 81       	ldd	r19, Y+5	; 0x05
    4a52:	22 30       	cpi	r18, 0x02	; 2
    4a54:	31 05       	cpc	r19, r1
    4a56:	2c f4       	brge	.+10     	; 0x4a62 <Dio_configChanel+0x3e>
    4a58:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a5c:	00 97       	sbiw	r24, 0x00	; 0
    4a5e:	71 f0       	breq	.+28     	; 0x4a7c <Dio_configChanel+0x58>
    4a60:	bc c0       	rjmp	.+376    	; 0x4bda <Dio_configChanel+0x1b6>
    4a62:	2c 81       	ldd	r18, Y+4	; 0x04
    4a64:	3d 81       	ldd	r19, Y+5	; 0x05
    4a66:	22 30       	cpi	r18, 0x02	; 2
    4a68:	31 05       	cpc	r19, r1
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <Dio_configChanel+0x4a>
    4a6c:	5f c0       	rjmp	.+190    	; 0x4b2c <Dio_configChanel+0x108>
    4a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a70:	9d 81       	ldd	r25, Y+5	; 0x05
    4a72:	83 30       	cpi	r24, 0x03	; 3
    4a74:	91 05       	cpc	r25, r1
    4a76:	09 f4       	brne	.+2      	; 0x4a7a <Dio_configChanel+0x56>
    4a78:	85 c0       	rjmp	.+266    	; 0x4b84 <Dio_configChanel+0x160>
    4a7a:	af c0       	rjmp	.+350    	; 0x4bda <Dio_configChanel+0x1b6>
	{
	case DIO_PORTA:
		{
			if (dir == DIO_INPUT)
    4a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7e:	88 23       	and	r24, r24
    4a80:	a9 f4       	brne	.+42     	; 0x4aac <Dio_configChanel+0x88>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
    4a82:	aa e3       	ldi	r26, 0x3A	; 58
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	ea e3       	ldi	r30, 0x3A	; 58
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	80 81       	ld	r24, Z
    4a8c:	48 2f       	mov	r20, r24
    4a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a90:	28 2f       	mov	r18, r24
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	02 2e       	mov	r0, r18
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <Dio_configChanel+0x7c>
    4a9c:	88 0f       	add	r24, r24
    4a9e:	99 1f       	adc	r25, r25
    4aa0:	0a 94       	dec	r0
    4aa2:	e2 f7       	brpl	.-8      	; 0x4a9c <Dio_configChanel+0x78>
    4aa4:	80 95       	com	r24
    4aa6:	84 23       	and	r24, r20
    4aa8:	8c 93       	st	X, r24
    4aaa:	97 c0       	rjmp	.+302    	; 0x4bda <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
    4aac:	aa e3       	ldi	r26, 0x3A	; 58
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	ea e3       	ldi	r30, 0x3A	; 58
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	48 2f       	mov	r20, r24
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	28 2f       	mov	r18, r24
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	02 2e       	mov	r0, r18
    4ac4:	02 c0       	rjmp	.+4      	; 0x4aca <Dio_configChanel+0xa6>
    4ac6:	88 0f       	add	r24, r24
    4ac8:	99 1f       	adc	r25, r25
    4aca:	0a 94       	dec	r0
    4acc:	e2 f7       	brpl	.-8      	; 0x4ac6 <Dio_configChanel+0xa2>
    4ace:	84 2b       	or	r24, r20
    4ad0:	8c 93       	st	X, r24
    4ad2:	83 c0       	rjmp	.+262    	; 0x4bda <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTB:
		{
			if (dir == DIO_INPUT)
    4ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad6:	88 23       	and	r24, r24
    4ad8:	a9 f4       	brne	.+42     	; 0x4b04 <Dio_configChanel+0xe0>
			{
				CLEAR_BIT(DIO_DDRB_REG,pin);
    4ada:	a7 e3       	ldi	r26, 0x37	; 55
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e7 e3       	ldi	r30, 0x37	; 55
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	48 2f       	mov	r20, r24
    4ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae8:	28 2f       	mov	r18, r24
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	02 2e       	mov	r0, r18
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <Dio_configChanel+0xd4>
    4af4:	88 0f       	add	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	0a 94       	dec	r0
    4afa:	e2 f7       	brpl	.-8      	; 0x4af4 <Dio_configChanel+0xd0>
    4afc:	80 95       	com	r24
    4afe:	84 23       	and	r24, r20
    4b00:	8c 93       	st	X, r24
    4b02:	6b c0       	rjmp	.+214    	; 0x4bda <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRB_REG,pin);
    4b04:	a7 e3       	ldi	r26, 0x37	; 55
    4b06:	b0 e0       	ldi	r27, 0x00	; 0
    4b08:	e7 e3       	ldi	r30, 0x37	; 55
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	48 2f       	mov	r20, r24
    4b10:	8a 81       	ldd	r24, Y+2	; 0x02
    4b12:	28 2f       	mov	r18, r24
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	81 e0       	ldi	r24, 0x01	; 1
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	02 2e       	mov	r0, r18
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <Dio_configChanel+0xfe>
    4b1e:	88 0f       	add	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	0a 94       	dec	r0
    4b24:	e2 f7       	brpl	.-8      	; 0x4b1e <Dio_configChanel+0xfa>
    4b26:	84 2b       	or	r24, r20
    4b28:	8c 93       	st	X, r24
    4b2a:	57 c0       	rjmp	.+174    	; 0x4bda <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTC:
		{
			if (dir == DIO_INPUT)
    4b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b2e:	88 23       	and	r24, r24
    4b30:	a9 f4       	brne	.+42     	; 0x4b5c <Dio_configChanel+0x138>
			{
				CLEAR_BIT(DIO_DDRC_REG,pin);
    4b32:	a4 e3       	ldi	r26, 0x34	; 52
    4b34:	b0 e0       	ldi	r27, 0x00	; 0
    4b36:	e4 e3       	ldi	r30, 0x34	; 52
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	80 81       	ld	r24, Z
    4b3c:	48 2f       	mov	r20, r24
    4b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b40:	28 2f       	mov	r18, r24
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	02 2e       	mov	r0, r18
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <Dio_configChanel+0x12c>
    4b4c:	88 0f       	add	r24, r24
    4b4e:	99 1f       	adc	r25, r25
    4b50:	0a 94       	dec	r0
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <Dio_configChanel+0x128>
    4b54:	80 95       	com	r24
    4b56:	84 23       	and	r24, r20
    4b58:	8c 93       	st	X, r24
    4b5a:	3f c0       	rjmp	.+126    	; 0x4bda <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC_REG,pin);
    4b5c:	a4 e3       	ldi	r26, 0x34	; 52
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	e4 e3       	ldi	r30, 0x34	; 52
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	80 81       	ld	r24, Z
    4b66:	48 2f       	mov	r20, r24
    4b68:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6a:	28 2f       	mov	r18, r24
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	02 2e       	mov	r0, r18
    4b74:	02 c0       	rjmp	.+4      	; 0x4b7a <Dio_configChanel+0x156>
    4b76:	88 0f       	add	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	0a 94       	dec	r0
    4b7c:	e2 f7       	brpl	.-8      	; 0x4b76 <Dio_configChanel+0x152>
    4b7e:	84 2b       	or	r24, r20
    4b80:	8c 93       	st	X, r24
    4b82:	2b c0       	rjmp	.+86     	; 0x4bda <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTD:
		{
			if (dir == DIO_INPUT)
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	88 23       	and	r24, r24
    4b88:	a9 f4       	brne	.+42     	; 0x4bb4 <Dio_configChanel+0x190>
			{
				CLEAR_BIT(DIO_DDRD_REG,pin);
    4b8a:	a1 e3       	ldi	r26, 0x31	; 49
    4b8c:	b0 e0       	ldi	r27, 0x00	; 0
    4b8e:	e1 e3       	ldi	r30, 0x31	; 49
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	80 81       	ld	r24, Z
    4b94:	48 2f       	mov	r20, r24
    4b96:	8a 81       	ldd	r24, Y+2	; 0x02
    4b98:	28 2f       	mov	r18, r24
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	02 2e       	mov	r0, r18
    4ba2:	02 c0       	rjmp	.+4      	; 0x4ba8 <Dio_configChanel+0x184>
    4ba4:	88 0f       	add	r24, r24
    4ba6:	99 1f       	adc	r25, r25
    4ba8:	0a 94       	dec	r0
    4baa:	e2 f7       	brpl	.-8      	; 0x4ba4 <Dio_configChanel+0x180>
    4bac:	80 95       	com	r24
    4bae:	84 23       	and	r24, r20
    4bb0:	8c 93       	st	X, r24
    4bb2:	13 c0       	rjmp	.+38     	; 0x4bda <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD_REG,pin);
    4bb4:	a1 e3       	ldi	r26, 0x31	; 49
    4bb6:	b0 e0       	ldi	r27, 0x00	; 0
    4bb8:	e1 e3       	ldi	r30, 0x31	; 49
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	80 81       	ld	r24, Z
    4bbe:	48 2f       	mov	r20, r24
    4bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bc2:	28 2f       	mov	r18, r24
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	02 2e       	mov	r0, r18
    4bcc:	02 c0       	rjmp	.+4      	; 0x4bd2 <Dio_configChanel+0x1ae>
    4bce:	88 0f       	add	r24, r24
    4bd0:	99 1f       	adc	r25, r25
    4bd2:	0a 94       	dec	r0
    4bd4:	e2 f7       	brpl	.-8      	; 0x4bce <Dio_configChanel+0x1aa>
    4bd6:	84 2b       	or	r24, r20
    4bd8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4bda:	0f 90       	pop	r0
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	cf 91       	pop	r28
    4be6:	df 91       	pop	r29
    4be8:	08 95       	ret

00004bea <Dio_writeChanel>:

void Dio_writeChanel(dio_port_t port, dio_pin_t pin, dio_level_t level)
{
    4bea:	df 93       	push	r29
    4bec:	cf 93       	push	r28
    4bee:	00 d0       	rcall	.+0      	; 0x4bf0 <Dio_writeChanel+0x6>
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <Dio_writeChanel+0x8>
    4bf2:	0f 92       	push	r0
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	89 83       	std	Y+1, r24	; 0x01
    4bfa:	6a 83       	std	Y+2, r22	; 0x02
    4bfc:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	28 2f       	mov	r18, r24
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	3d 83       	std	Y+5, r19	; 0x05
    4c06:	2c 83       	std	Y+4, r18	; 0x04
    4c08:	8c 81       	ldd	r24, Y+4	; 0x04
    4c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c0c:	81 30       	cpi	r24, 0x01	; 1
    4c0e:	91 05       	cpc	r25, r1
    4c10:	09 f4       	brne	.+2      	; 0x4c14 <Dio_writeChanel+0x2a>
    4c12:	43 c0       	rjmp	.+134    	; 0x4c9a <Dio_writeChanel+0xb0>
    4c14:	2c 81       	ldd	r18, Y+4	; 0x04
    4c16:	3d 81       	ldd	r19, Y+5	; 0x05
    4c18:	22 30       	cpi	r18, 0x02	; 2
    4c1a:	31 05       	cpc	r19, r1
    4c1c:	2c f4       	brge	.+10     	; 0x4c28 <Dio_writeChanel+0x3e>
    4c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c20:	9d 81       	ldd	r25, Y+5	; 0x05
    4c22:	00 97       	sbiw	r24, 0x00	; 0
    4c24:	71 f0       	breq	.+28     	; 0x4c42 <Dio_writeChanel+0x58>
    4c26:	bc c0       	rjmp	.+376    	; 0x4da0 <Dio_writeChanel+0x1b6>
    4c28:	2c 81       	ldd	r18, Y+4	; 0x04
    4c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    4c2c:	22 30       	cpi	r18, 0x02	; 2
    4c2e:	31 05       	cpc	r19, r1
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <Dio_writeChanel+0x4a>
    4c32:	5f c0       	rjmp	.+190    	; 0x4cf2 <Dio_writeChanel+0x108>
    4c34:	8c 81       	ldd	r24, Y+4	; 0x04
    4c36:	9d 81       	ldd	r25, Y+5	; 0x05
    4c38:	83 30       	cpi	r24, 0x03	; 3
    4c3a:	91 05       	cpc	r25, r1
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <Dio_writeChanel+0x56>
    4c3e:	85 c0       	rjmp	.+266    	; 0x4d4a <Dio_writeChanel+0x160>
    4c40:	af c0       	rjmp	.+350    	; 0x4da0 <Dio_writeChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    4c42:	8b 81       	ldd	r24, Y+3	; 0x03
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	a1 f4       	brne	.+40     	; 0x4c70 <Dio_writeChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    4c48:	ab e3       	ldi	r26, 0x3B	; 59
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	eb e3       	ldi	r30, 0x3B	; 59
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	80 81       	ld	r24, Z
    4c52:	48 2f       	mov	r20, r24
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	28 2f       	mov	r18, r24
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	81 e0       	ldi	r24, 0x01	; 1
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	02 2e       	mov	r0, r18
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <Dio_writeChanel+0x7c>
    4c62:	88 0f       	add	r24, r24
    4c64:	99 1f       	adc	r25, r25
    4c66:	0a 94       	dec	r0
    4c68:	e2 f7       	brpl	.-8      	; 0x4c62 <Dio_writeChanel+0x78>
    4c6a:	84 2b       	or	r24, r20
    4c6c:	8c 93       	st	X, r24
    4c6e:	98 c0       	rjmp	.+304    	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    4c70:	ab e3       	ldi	r26, 0x3B	; 59
    4c72:	b0 e0       	ldi	r27, 0x00	; 0
    4c74:	eb e3       	ldi	r30, 0x3B	; 59
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	80 81       	ld	r24, Z
    4c7a:	48 2f       	mov	r20, r24
    4c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7e:	28 2f       	mov	r18, r24
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	02 2e       	mov	r0, r18
    4c88:	02 c0       	rjmp	.+4      	; 0x4c8e <Dio_writeChanel+0xa4>
    4c8a:	88 0f       	add	r24, r24
    4c8c:	99 1f       	adc	r25, r25
    4c8e:	0a 94       	dec	r0
    4c90:	e2 f7       	brpl	.-8      	; 0x4c8a <Dio_writeChanel+0xa0>
    4c92:	80 95       	com	r24
    4c94:	84 23       	and	r24, r20
    4c96:	8c 93       	st	X, r24
    4c98:	83 c0       	rjmp	.+262    	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	81 30       	cpi	r24, 0x01	; 1
    4c9e:	a1 f4       	brne	.+40     	; 0x4cc8 <Dio_writeChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    4ca0:	a8 e3       	ldi	r26, 0x38	; 56
    4ca2:	b0 e0       	ldi	r27, 0x00	; 0
    4ca4:	e8 e3       	ldi	r30, 0x38	; 56
    4ca6:	f0 e0       	ldi	r31, 0x00	; 0
    4ca8:	80 81       	ld	r24, Z
    4caa:	48 2f       	mov	r20, r24
    4cac:	8a 81       	ldd	r24, Y+2	; 0x02
    4cae:	28 2f       	mov	r18, r24
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	02 2e       	mov	r0, r18
    4cb8:	02 c0       	rjmp	.+4      	; 0x4cbe <Dio_writeChanel+0xd4>
    4cba:	88 0f       	add	r24, r24
    4cbc:	99 1f       	adc	r25, r25
    4cbe:	0a 94       	dec	r0
    4cc0:	e2 f7       	brpl	.-8      	; 0x4cba <Dio_writeChanel+0xd0>
    4cc2:	84 2b       	or	r24, r20
    4cc4:	8c 93       	st	X, r24
    4cc6:	6c c0       	rjmp	.+216    	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    4cc8:	a8 e3       	ldi	r26, 0x38	; 56
    4cca:	b0 e0       	ldi	r27, 0x00	; 0
    4ccc:	e8 e3       	ldi	r30, 0x38	; 56
    4cce:	f0 e0       	ldi	r31, 0x00	; 0
    4cd0:	80 81       	ld	r24, Z
    4cd2:	48 2f       	mov	r20, r24
    4cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd6:	28 2f       	mov	r18, r24
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	02 2e       	mov	r0, r18
    4ce0:	02 c0       	rjmp	.+4      	; 0x4ce6 <Dio_writeChanel+0xfc>
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	0a 94       	dec	r0
    4ce8:	e2 f7       	brpl	.-8      	; 0x4ce2 <Dio_writeChanel+0xf8>
    4cea:	80 95       	com	r24
    4cec:	84 23       	and	r24, r20
    4cee:	8c 93       	st	X, r24
    4cf0:	57 c0       	rjmp	.+174    	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    4cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf4:	81 30       	cpi	r24, 0x01	; 1
    4cf6:	a1 f4       	brne	.+40     	; 0x4d20 <Dio_writeChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    4cf8:	a5 e3       	ldi	r26, 0x35	; 53
    4cfa:	b0 e0       	ldi	r27, 0x00	; 0
    4cfc:	e5 e3       	ldi	r30, 0x35	; 53
    4cfe:	f0 e0       	ldi	r31, 0x00	; 0
    4d00:	80 81       	ld	r24, Z
    4d02:	48 2f       	mov	r20, r24
    4d04:	8a 81       	ldd	r24, Y+2	; 0x02
    4d06:	28 2f       	mov	r18, r24
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	02 2e       	mov	r0, r18
    4d10:	02 c0       	rjmp	.+4      	; 0x4d16 <Dio_writeChanel+0x12c>
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	0a 94       	dec	r0
    4d18:	e2 f7       	brpl	.-8      	; 0x4d12 <Dio_writeChanel+0x128>
    4d1a:	84 2b       	or	r24, r20
    4d1c:	8c 93       	st	X, r24
    4d1e:	40 c0       	rjmp	.+128    	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    4d20:	a5 e3       	ldi	r26, 0x35	; 53
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	e5 e3       	ldi	r30, 0x35	; 53
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	48 2f       	mov	r20, r24
    4d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2e:	28 2f       	mov	r18, r24
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	02 2e       	mov	r0, r18
    4d38:	02 c0       	rjmp	.+4      	; 0x4d3e <Dio_writeChanel+0x154>
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	0a 94       	dec	r0
    4d40:	e2 f7       	brpl	.-8      	; 0x4d3a <Dio_writeChanel+0x150>
    4d42:	80 95       	com	r24
    4d44:	84 23       	and	r24, r20
    4d46:	8c 93       	st	X, r24
    4d48:	2b c0       	rjmp	.+86     	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    4d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4c:	81 30       	cpi	r24, 0x01	; 1
    4d4e:	a1 f4       	brne	.+40     	; 0x4d78 <Dio_writeChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    4d50:	a2 e3       	ldi	r26, 0x32	; 50
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	e2 e3       	ldi	r30, 0x32	; 50
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	80 81       	ld	r24, Z
    4d5a:	48 2f       	mov	r20, r24
    4d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5e:	28 2f       	mov	r18, r24
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	02 2e       	mov	r0, r18
    4d68:	02 c0       	rjmp	.+4      	; 0x4d6e <Dio_writeChanel+0x184>
    4d6a:	88 0f       	add	r24, r24
    4d6c:	99 1f       	adc	r25, r25
    4d6e:	0a 94       	dec	r0
    4d70:	e2 f7       	brpl	.-8      	; 0x4d6a <Dio_writeChanel+0x180>
    4d72:	84 2b       	or	r24, r20
    4d74:	8c 93       	st	X, r24
    4d76:	14 c0       	rjmp	.+40     	; 0x4da0 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    4d78:	a2 e3       	ldi	r26, 0x32	; 50
    4d7a:	b0 e0       	ldi	r27, 0x00	; 0
    4d7c:	e2 e3       	ldi	r30, 0x32	; 50
    4d7e:	f0 e0       	ldi	r31, 0x00	; 0
    4d80:	80 81       	ld	r24, Z
    4d82:	48 2f       	mov	r20, r24
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	28 2f       	mov	r18, r24
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	02 2e       	mov	r0, r18
    4d90:	02 c0       	rjmp	.+4      	; 0x4d96 <Dio_writeChanel+0x1ac>
    4d92:	88 0f       	add	r24, r24
    4d94:	99 1f       	adc	r25, r25
    4d96:	0a 94       	dec	r0
    4d98:	e2 f7       	brpl	.-8      	; 0x4d92 <Dio_writeChanel+0x1a8>
    4d9a:	80 95       	com	r24
    4d9c:	84 23       	and	r24, r20
    4d9e:	8c 93       	st	X, r24
		}
		break;
	}
}
    4da0:	0f 90       	pop	r0
    4da2:	0f 90       	pop	r0
    4da4:	0f 90       	pop	r0
    4da6:	0f 90       	pop	r0
    4da8:	0f 90       	pop	r0
    4daa:	cf 91       	pop	r28
    4dac:	df 91       	pop	r29
    4dae:	08 95       	ret

00004db0 <Dio_writeChanelGroup>:

void Dio_writeChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    4db0:	df 93       	push	r29
    4db2:	cf 93       	push	r28
    4db4:	00 d0       	rcall	.+0      	; 0x4db6 <Dio_writeChanelGroup+0x6>
    4db6:	00 d0       	rcall	.+0      	; 0x4db8 <Dio_writeChanelGroup+0x8>
    4db8:	0f 92       	push	r0
    4dba:	cd b7       	in	r28, 0x3d	; 61
    4dbc:	de b7       	in	r29, 0x3e	; 62
    4dbe:	89 83       	std	Y+1, r24	; 0x01
    4dc0:	6a 83       	std	Y+2, r22	; 0x02
    4dc2:	4b 83       	std	Y+3, r20	; 0x03

	switch (port)
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	28 2f       	mov	r18, r24
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	3d 83       	std	Y+5, r19	; 0x05
    4dcc:	2c 83       	std	Y+4, r18	; 0x04
    4dce:	8c 81       	ldd	r24, Y+4	; 0x04
    4dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    4dd2:	81 30       	cpi	r24, 0x01	; 1
    4dd4:	91 05       	cpc	r25, r1
    4dd6:	01 f1       	breq	.+64     	; 0x4e18 <Dio_writeChanelGroup+0x68>
    4dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    4dda:	3d 81       	ldd	r19, Y+5	; 0x05
    4ddc:	22 30       	cpi	r18, 0x02	; 2
    4dde:	31 05       	cpc	r19, r1
    4de0:	2c f4       	brge	.+10     	; 0x4dec <Dio_writeChanelGroup+0x3c>
    4de2:	8c 81       	ldd	r24, Y+4	; 0x04
    4de4:	9d 81       	ldd	r25, Y+5	; 0x05
    4de6:	00 97       	sbiw	r24, 0x00	; 0
    4de8:	61 f0       	breq	.+24     	; 0x4e02 <Dio_writeChanelGroup+0x52>
    4dea:	36 c0       	rjmp	.+108    	; 0x4e58 <Dio_writeChanelGroup+0xa8>
    4dec:	2c 81       	ldd	r18, Y+4	; 0x04
    4dee:	3d 81       	ldd	r19, Y+5	; 0x05
    4df0:	22 30       	cpi	r18, 0x02	; 2
    4df2:	31 05       	cpc	r19, r1
    4df4:	e1 f0       	breq	.+56     	; 0x4e2e <Dio_writeChanelGroup+0x7e>
    4df6:	8c 81       	ldd	r24, Y+4	; 0x04
    4df8:	9d 81       	ldd	r25, Y+5	; 0x05
    4dfa:	83 30       	cpi	r24, 0x03	; 3
    4dfc:	91 05       	cpc	r25, r1
    4dfe:	11 f1       	breq	.+68     	; 0x4e44 <Dio_writeChanelGroup+0x94>
    4e00:	2b c0       	rjmp	.+86     	; 0x4e58 <Dio_writeChanelGroup+0xa8>
	{

	case DIO_PORTA:
		// DIO_PORTA_REG &= data;						WRONG because we should use AND to set the left 4 bit to 0
		// 												then use OR to set the left 4 bit to required value
		DIO_PORTA_REG = (DIO_PORTA_REG & mask) | data;
    4e02:	ab e3       	ldi	r26, 0x3B	; 59
    4e04:	b0 e0       	ldi	r27, 0x00	; 0
    4e06:	eb e3       	ldi	r30, 0x3B	; 59
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	90 81       	ld	r25, Z
    4e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0e:	98 23       	and	r25, r24
    4e10:	8a 81       	ldd	r24, Y+2	; 0x02
    4e12:	89 2b       	or	r24, r25
    4e14:	8c 93       	st	X, r24
    4e16:	20 c0       	rjmp	.+64     	; 0x4e58 <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask) | data;
    4e18:	a8 e3       	ldi	r26, 0x38	; 56
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	e8 e3       	ldi	r30, 0x38	; 56
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	90 81       	ld	r25, Z
    4e22:	8b 81       	ldd	r24, Y+3	; 0x03
    4e24:	98 23       	and	r25, r24
    4e26:	8a 81       	ldd	r24, Y+2	; 0x02
    4e28:	89 2b       	or	r24, r25
    4e2a:	8c 93       	st	X, r24
    4e2c:	15 c0       	rjmp	.+42     	; 0x4e58 <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask) | data;
    4e2e:	a5 e3       	ldi	r26, 0x35	; 53
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	e5 e3       	ldi	r30, 0x35	; 53
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	90 81       	ld	r25, Z
    4e38:	8b 81       	ldd	r24, Y+3	; 0x03
    4e3a:	98 23       	and	r25, r24
    4e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3e:	89 2b       	or	r24, r25
    4e40:	8c 93       	st	X, r24
    4e42:	0a c0       	rjmp	.+20     	; 0x4e58 <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask) | data;
    4e44:	a2 e3       	ldi	r26, 0x32	; 50
    4e46:	b0 e0       	ldi	r27, 0x00	; 0
    4e48:	e2 e3       	ldi	r30, 0x32	; 50
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	90 81       	ld	r25, Z
    4e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e50:	98 23       	and	r25, r24
    4e52:	8a 81       	ldd	r24, Y+2	; 0x02
    4e54:	89 2b       	or	r24, r25
    4e56:	8c 93       	st	X, r24
		break;

	}

}
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	cf 91       	pop	r28
    4e64:	df 91       	pop	r29
    4e66:	08 95       	ret

00004e68 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    4e68:	df 93       	push	r29
    4e6a:	cf 93       	push	r28
    4e6c:	00 d0       	rcall	.+0      	; 0x4e6e <Dio_udtreadChanel+0x6>
    4e6e:	00 d0       	rcall	.+0      	; 0x4e70 <Dio_udtreadChanel+0x8>
    4e70:	0f 92       	push	r0
    4e72:	cd b7       	in	r28, 0x3d	; 61
    4e74:	de b7       	in	r29, 0x3e	; 62
    4e76:	8a 83       	std	Y+2, r24	; 0x02
    4e78:	6b 83       	std	Y+3, r22	; 0x03

	dio_level_t returnValue = 0;
    4e7a:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    4e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7e:	28 2f       	mov	r18, r24
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	3d 83       	std	Y+5, r19	; 0x05
    4e84:	2c 83       	std	Y+4, r18	; 0x04
    4e86:	4c 81       	ldd	r20, Y+4	; 0x04
    4e88:	5d 81       	ldd	r21, Y+5	; 0x05
    4e8a:	41 30       	cpi	r20, 0x01	; 1
    4e8c:	51 05       	cpc	r21, r1
    4e8e:	41 f1       	breq	.+80     	; 0x4ee0 <Dio_udtreadChanel+0x78>
    4e90:	8c 81       	ldd	r24, Y+4	; 0x04
    4e92:	9d 81       	ldd	r25, Y+5	; 0x05
    4e94:	82 30       	cpi	r24, 0x02	; 2
    4e96:	91 05       	cpc	r25, r1
    4e98:	34 f4       	brge	.+12     	; 0x4ea6 <Dio_udtreadChanel+0x3e>
    4e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    4e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    4e9e:	21 15       	cp	r18, r1
    4ea0:	31 05       	cpc	r19, r1
    4ea2:	61 f0       	breq	.+24     	; 0x4ebc <Dio_udtreadChanel+0x54>
    4ea4:	52 c0       	rjmp	.+164    	; 0x4f4a <Dio_udtreadChanel+0xe2>
    4ea6:	4c 81       	ldd	r20, Y+4	; 0x04
    4ea8:	5d 81       	ldd	r21, Y+5	; 0x05
    4eaa:	42 30       	cpi	r20, 0x02	; 2
    4eac:	51 05       	cpc	r21, r1
    4eae:	51 f1       	breq	.+84     	; 0x4f04 <Dio_udtreadChanel+0x9c>
    4eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    4eb4:	83 30       	cpi	r24, 0x03	; 3
    4eb6:	91 05       	cpc	r25, r1
    4eb8:	b9 f1       	breq	.+110    	; 0x4f28 <Dio_udtreadChanel+0xc0>
    4eba:	47 c0       	rjmp	.+142    	; 0x4f4a <Dio_udtreadChanel+0xe2>
	{

	case DIO_PORTA:
		returnValue = CHECK_BIT(DIO_PINA_REG, pin);
    4ebc:	e9 e3       	ldi	r30, 0x39	; 57
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	80 81       	ld	r24, Z
    4ec2:	28 2f       	mov	r18, r24
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec8:	88 2f       	mov	r24, r24
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	a9 01       	movw	r20, r18
    4ece:	02 c0       	rjmp	.+4      	; 0x4ed4 <Dio_udtreadChanel+0x6c>
    4ed0:	55 95       	asr	r21
    4ed2:	47 95       	ror	r20
    4ed4:	8a 95       	dec	r24
    4ed6:	e2 f7       	brpl	.-8      	; 0x4ed0 <Dio_udtreadChanel+0x68>
    4ed8:	ca 01       	movw	r24, r20
    4eda:	81 70       	andi	r24, 0x01	; 1
    4edc:	89 83       	std	Y+1, r24	; 0x01
    4ede:	35 c0       	rjmp	.+106    	; 0x4f4a <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTB:
		returnValue = CHECK_BIT(DIO_PINB_REG, pin);
    4ee0:	e6 e3       	ldi	r30, 0x36	; 54
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	80 81       	ld	r24, Z
    4ee6:	28 2f       	mov	r18, r24
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	8b 81       	ldd	r24, Y+3	; 0x03
    4eec:	88 2f       	mov	r24, r24
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	a9 01       	movw	r20, r18
    4ef2:	02 c0       	rjmp	.+4      	; 0x4ef8 <Dio_udtreadChanel+0x90>
    4ef4:	55 95       	asr	r21
    4ef6:	47 95       	ror	r20
    4ef8:	8a 95       	dec	r24
    4efa:	e2 f7       	brpl	.-8      	; 0x4ef4 <Dio_udtreadChanel+0x8c>
    4efc:	ca 01       	movw	r24, r20
    4efe:	81 70       	andi	r24, 0x01	; 1
    4f00:	89 83       	std	Y+1, r24	; 0x01
    4f02:	23 c0       	rjmp	.+70     	; 0x4f4a <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTC:
		returnValue = CHECK_BIT(DIO_PINC_REG, pin);
    4f04:	e3 e3       	ldi	r30, 0x33	; 51
    4f06:	f0 e0       	ldi	r31, 0x00	; 0
    4f08:	80 81       	ld	r24, Z
    4f0a:	28 2f       	mov	r18, r24
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f10:	88 2f       	mov	r24, r24
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	a9 01       	movw	r20, r18
    4f16:	02 c0       	rjmp	.+4      	; 0x4f1c <Dio_udtreadChanel+0xb4>
    4f18:	55 95       	asr	r21
    4f1a:	47 95       	ror	r20
    4f1c:	8a 95       	dec	r24
    4f1e:	e2 f7       	brpl	.-8      	; 0x4f18 <Dio_udtreadChanel+0xb0>
    4f20:	ca 01       	movw	r24, r20
    4f22:	81 70       	andi	r24, 0x01	; 1
    4f24:	89 83       	std	Y+1, r24	; 0x01
    4f26:	11 c0       	rjmp	.+34     	; 0x4f4a <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTD:
		returnValue = CHECK_BIT(DIO_PIND_REG, pin);
    4f28:	e0 e3       	ldi	r30, 0x30	; 48
    4f2a:	f0 e0       	ldi	r31, 0x00	; 0
    4f2c:	80 81       	ld	r24, Z
    4f2e:	28 2f       	mov	r18, r24
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	8b 81       	ldd	r24, Y+3	; 0x03
    4f34:	88 2f       	mov	r24, r24
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a9 01       	movw	r20, r18
    4f3a:	02 c0       	rjmp	.+4      	; 0x4f40 <Dio_udtreadChanel+0xd8>
    4f3c:	55 95       	asr	r21
    4f3e:	47 95       	ror	r20
    4f40:	8a 95       	dec	r24
    4f42:	e2 f7       	brpl	.-8      	; 0x4f3c <Dio_udtreadChanel+0xd4>
    4f44:	ca 01       	movw	r24, r20
    4f46:	81 70       	andi	r24, 0x01	; 1
    4f48:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return returnValue;
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01

}
    4f4c:	0f 90       	pop	r0
    4f4e:	0f 90       	pop	r0
    4f50:	0f 90       	pop	r0
    4f52:	0f 90       	pop	r0
    4f54:	0f 90       	pop	r0
    4f56:	cf 91       	pop	r28
    4f58:	df 91       	pop	r29
    4f5a:	08 95       	ret

00004f5c <Dio_flipChanel>:


void Dio_flipChanel(dio_port_t port, dio_pin_t pin)
{
    4f5c:	df 93       	push	r29
    4f5e:	cf 93       	push	r28
    4f60:	00 d0       	rcall	.+0      	; 0x4f62 <Dio_flipChanel+0x6>
    4f62:	00 d0       	rcall	.+0      	; 0x4f64 <Dio_flipChanel+0x8>
    4f64:	cd b7       	in	r28, 0x3d	; 61
    4f66:	de b7       	in	r29, 0x3e	; 62
    4f68:	89 83       	std	Y+1, r24	; 0x01
    4f6a:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	28 2f       	mov	r18, r24
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	3c 83       	std	Y+4, r19	; 0x04
    4f74:	2b 83       	std	Y+3, r18	; 0x03
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7a:	81 30       	cpi	r24, 0x01	; 1
    4f7c:	91 05       	cpc	r25, r1
    4f7e:	49 f1       	breq	.+82     	; 0x4fd2 <Dio_flipChanel+0x76>
    4f80:	2b 81       	ldd	r18, Y+3	; 0x03
    4f82:	3c 81       	ldd	r19, Y+4	; 0x04
    4f84:	22 30       	cpi	r18, 0x02	; 2
    4f86:	31 05       	cpc	r19, r1
    4f88:	2c f4       	brge	.+10     	; 0x4f94 <Dio_flipChanel+0x38>
    4f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f8e:	00 97       	sbiw	r24, 0x00	; 0
    4f90:	61 f0       	breq	.+24     	; 0x4faa <Dio_flipChanel+0x4e>
    4f92:	5a c0       	rjmp	.+180    	; 0x5048 <Dio_flipChanel+0xec>
    4f94:	2b 81       	ldd	r18, Y+3	; 0x03
    4f96:	3c 81       	ldd	r19, Y+4	; 0x04
    4f98:	22 30       	cpi	r18, 0x02	; 2
    4f9a:	31 05       	cpc	r19, r1
    4f9c:	71 f1       	breq	.+92     	; 0x4ffa <Dio_flipChanel+0x9e>
    4f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa2:	83 30       	cpi	r24, 0x03	; 3
    4fa4:	91 05       	cpc	r25, r1
    4fa6:	e9 f1       	breq	.+122    	; 0x5022 <Dio_flipChanel+0xc6>
    4fa8:	4f c0       	rjmp	.+158    	; 0x5048 <Dio_flipChanel+0xec>
	{

	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG, pin);
    4faa:	ab e3       	ldi	r26, 0x3B	; 59
    4fac:	b0 e0       	ldi	r27, 0x00	; 0
    4fae:	eb e3       	ldi	r30, 0x3B	; 59
    4fb0:	f0 e0       	ldi	r31, 0x00	; 0
    4fb2:	80 81       	ld	r24, Z
    4fb4:	48 2f       	mov	r20, r24
    4fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb8:	28 2f       	mov	r18, r24
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	02 2e       	mov	r0, r18
    4fc2:	02 c0       	rjmp	.+4      	; 0x4fc8 <Dio_flipChanel+0x6c>
    4fc4:	88 0f       	add	r24, r24
    4fc6:	99 1f       	adc	r25, r25
    4fc8:	0a 94       	dec	r0
    4fca:	e2 f7       	brpl	.-8      	; 0x4fc4 <Dio_flipChanel+0x68>
    4fcc:	84 27       	eor	r24, r20
    4fce:	8c 93       	st	X, r24
    4fd0:	3b c0       	rjmp	.+118    	; 0x5048 <Dio_flipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG, pin);
    4fd2:	a8 e3       	ldi	r26, 0x38	; 56
    4fd4:	b0 e0       	ldi	r27, 0x00	; 0
    4fd6:	e8 e3       	ldi	r30, 0x38	; 56
    4fd8:	f0 e0       	ldi	r31, 0x00	; 0
    4fda:	80 81       	ld	r24, Z
    4fdc:	48 2f       	mov	r20, r24
    4fde:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	02 2e       	mov	r0, r18
    4fea:	02 c0       	rjmp	.+4      	; 0x4ff0 <Dio_flipChanel+0x94>
    4fec:	88 0f       	add	r24, r24
    4fee:	99 1f       	adc	r25, r25
    4ff0:	0a 94       	dec	r0
    4ff2:	e2 f7       	brpl	.-8      	; 0x4fec <Dio_flipChanel+0x90>
    4ff4:	84 27       	eor	r24, r20
    4ff6:	8c 93       	st	X, r24
    4ff8:	27 c0       	rjmp	.+78     	; 0x5048 <Dio_flipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG, pin);
    4ffa:	a5 e3       	ldi	r26, 0x35	; 53
    4ffc:	b0 e0       	ldi	r27, 0x00	; 0
    4ffe:	e5 e3       	ldi	r30, 0x35	; 53
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	80 81       	ld	r24, Z
    5004:	48 2f       	mov	r20, r24
    5006:	8a 81       	ldd	r24, Y+2	; 0x02
    5008:	28 2f       	mov	r18, r24
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	81 e0       	ldi	r24, 0x01	; 1
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	02 2e       	mov	r0, r18
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <Dio_flipChanel+0xbc>
    5014:	88 0f       	add	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	0a 94       	dec	r0
    501a:	e2 f7       	brpl	.-8      	; 0x5014 <Dio_flipChanel+0xb8>
    501c:	84 27       	eor	r24, r20
    501e:	8c 93       	st	X, r24
    5020:	13 c0       	rjmp	.+38     	; 0x5048 <Dio_flipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG, pin);
    5022:	a2 e3       	ldi	r26, 0x32	; 50
    5024:	b0 e0       	ldi	r27, 0x00	; 0
    5026:	e2 e3       	ldi	r30, 0x32	; 50
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	80 81       	ld	r24, Z
    502c:	48 2f       	mov	r20, r24
    502e:	8a 81       	ldd	r24, Y+2	; 0x02
    5030:	28 2f       	mov	r18, r24
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	02 2e       	mov	r0, r18
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <Dio_flipChanel+0xe4>
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	0a 94       	dec	r0
    5042:	e2 f7       	brpl	.-8      	; 0x503c <Dio_flipChanel+0xe0>
    5044:	84 27       	eor	r24, r20
    5046:	8c 93       	st	X, r24
		break;

	}

}
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	cf 91       	pop	r28
    5052:	df 91       	pop	r29
    5054:	08 95       	ret

00005056 <ADC_InitADC>:
 */

#include "ADC.h"

void ADC_InitADC()
{
    5056:	df 93       	push	r29
    5058:	cf 93       	push	r28
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62

	// Don't know how it works without config dio pins to input!

	// Enable ADC
	SET_BIT(ADC_ADCSRA_REG, ADC_Enable);
    505e:	a6 e2       	ldi	r26, 0x26	; 38
    5060:	b0 e0       	ldi	r27, 0x00	; 0
    5062:	e6 e2       	ldi	r30, 0x26	; 38
    5064:	f0 e0       	ldi	r31, 0x00	; 0
    5066:	80 81       	ld	r24, Z
    5068:	80 68       	ori	r24, 0x80	; 128
    506a:	8c 93       	st	X, r24

	// Prescale clock (die by 128)
	ADC_ADCSRA_REG |= 0x07;			// 0000 0111
    506c:	a6 e2       	ldi	r26, 0x26	; 38
    506e:	b0 e0       	ldi	r27, 0x00	; 0
    5070:	e6 e2       	ldi	r30, 0x26	; 38
    5072:	f0 e0       	ldi	r31, 0x00	; 0
    5074:	80 81       	ld	r24, Z
    5076:	87 60       	ori	r24, 0x07	; 7
    5078:	8c 93       	st	X, r24

	// Vref (reference bits) match to the MC VCC
	SET_BIT(ADC_ADMUX_REG, ADC_REFS0);
    507a:	a7 e2       	ldi	r26, 0x27	; 39
    507c:	b0 e0       	ldi	r27, 0x00	; 0
    507e:	e7 e2       	ldi	r30, 0x27	; 39
    5080:	f0 e0       	ldi	r31, 0x00	; 0
    5082:	80 81       	ld	r24, Z
    5084:	80 64       	ori	r24, 0x40	; 64
    5086:	8c 93       	st	X, r24

	// ADLAR is default -> 0

}
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <ADC_f32ReadChannel>:

f32 ADC_f32ReadChannel(adc_channel_t channelNum)
{
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	cd b7       	in	r28, 0x3d	; 61
    5094:	de b7       	in	r29, 0x3e	; 62
    5096:	27 97       	sbiw	r28, 0x07	; 7
    5098:	0f b6       	in	r0, 0x3f	; 63
    509a:	f8 94       	cli
    509c:	de bf       	out	0x3e, r29	; 62
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	cd bf       	out	0x3d, r28	; 61
    50a2:	8f 83       	std	Y+7, r24	; 0x07

	// Clear MUX bits
	ADC_ADMUX_REG &= ADC_MASK;
    50a4:	a7 e2       	ldi	r26, 0x27	; 39
    50a6:	b0 e0       	ldi	r27, 0x00	; 0
    50a8:	e7 e2       	ldi	r30, 0x27	; 39
    50aa:	f0 e0       	ldi	r31, 0x00	; 0
    50ac:	80 81       	ld	r24, Z
    50ae:	88 7f       	andi	r24, 0xF8	; 248
    50b0:	8c 93       	st	X, r24

	// Select channel
	ADC_ADMUX_REG |= channelNum;	// xxx0 0000
    50b2:	a7 e2       	ldi	r26, 0x27	; 39
    50b4:	b0 e0       	ldi	r27, 0x00	; 0
    50b6:	e7 e2       	ldi	r30, 0x27	; 39
    50b8:	f0 e0       	ldi	r31, 0x00	; 0
    50ba:	90 81       	ld	r25, Z
    50bc:	8f 81       	ldd	r24, Y+7	; 0x07
    50be:	89 2b       	or	r24, r25
    50c0:	8c 93       	st	X, r24

	// Start Conversion
	SET_BIT(ADC_ADCSRA_REG, ADC_START_CONV);
    50c2:	a6 e2       	ldi	r26, 0x26	; 38
    50c4:	b0 e0       	ldi	r27, 0x00	; 0
    50c6:	e6 e2       	ldi	r30, 0x26	; 38
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	80 81       	ld	r24, Z
    50cc:	80 64       	ori	r24, 0x40	; 64
    50ce:	8c 93       	st	X, r24

	// wait for ADIF become 1
	while (CHECK_BIT(ADC_ADCSRA_REG, ADC_INT_FLAG) != 1);
    50d0:	e6 e2       	ldi	r30, 0x26	; 38
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	80 81       	ld	r24, Z
    50d6:	82 95       	swap	r24
    50d8:	8f 70       	andi	r24, 0x0F	; 15
    50da:	88 2f       	mov	r24, r24
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	81 70       	andi	r24, 0x01	; 1
    50e0:	90 70       	andi	r25, 0x00	; 0
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	a9 f3       	breq	.-22     	; 0x50d0 <ADC_f32ReadChannel+0x42>

	// Clear ADIF by setting 1
	SET_BIT(ADC_ADCSRA_REG, ADC_INT_FLAG);
    50e6:	a6 e2       	ldi	r26, 0x26	; 38
    50e8:	b0 e0       	ldi	r27, 0x00	; 0
    50ea:	e6 e2       	ldi	r30, 0x26	; 38
    50ec:	f0 e0       	ldi	r31, 0x00	; 0
    50ee:	80 81       	ld	r24, Z
    50f0:	80 61       	ori	r24, 0x10	; 16
    50f2:	8c 93       	st	X, r24

	u16 data = ADC_ADCL_REG | (u16)(ADC_ADCH_REG << 8);
    50f4:	e4 e2       	ldi	r30, 0x24	; 36
    50f6:	f0 e0       	ldi	r31, 0x00	; 0
    50f8:	80 81       	ld	r24, Z
    50fa:	28 2f       	mov	r18, r24
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	e5 e2       	ldi	r30, 0x25	; 37
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	80 81       	ld	r24, Z
    5104:	88 2f       	mov	r24, r24
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	98 2f       	mov	r25, r24
    510a:	88 27       	eor	r24, r24
    510c:	82 2b       	or	r24, r18
    510e:	93 2b       	or	r25, r19
    5110:	9e 83       	std	Y+6, r25	; 0x06
    5112:	8d 83       	std	Y+5, r24	; 0x05

	// Convert from mV to V
	f32 volt = (data * ADC_BIT_SIZE) / (f32) 1000;
    5114:	8d 81       	ldd	r24, Y+5	; 0x05
    5116:	9e 81       	ldd	r25, Y+6	; 0x06
    5118:	cc 01       	movw	r24, r24
    511a:	a0 e0       	ldi	r26, 0x00	; 0
    511c:	b0 e0       	ldi	r27, 0x00	; 0
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	bc 01       	movw	r22, r24
    512c:	cd 01       	movw	r24, r26
    512e:	2a e9       	ldi	r18, 0x9A	; 154
    5130:	39 e9       	ldi	r19, 0x99	; 153
    5132:	49 e9       	ldi	r20, 0x99	; 153
    5134:	50 e4       	ldi	r21, 0x40	; 64
    5136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	bc 01       	movw	r22, r24
    5140:	cd 01       	movw	r24, r26
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	4a e7       	ldi	r20, 0x7A	; 122
    5148:	54 e4       	ldi	r21, 0x44	; 68
    514a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	89 83       	std	Y+1, r24	; 0x01
    5154:	9a 83       	std	Y+2, r25	; 0x02
    5156:	ab 83       	std	Y+3, r26	; 0x03
    5158:	bc 83       	std	Y+4, r27	; 0x04

	return volt;
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	9a 81       	ldd	r25, Y+2	; 0x02
    515e:	ab 81       	ldd	r26, Y+3	; 0x03
    5160:	bc 81       	ldd	r27, Y+4	; 0x04

}
    5162:	bc 01       	movw	r22, r24
    5164:	cd 01       	movw	r24, r26
    5166:	27 96       	adiw	r28, 0x07	; 7
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	f8 94       	cli
    516c:	de bf       	out	0x3e, r29	; 62
    516e:	0f be       	out	0x3f, r0	; 63
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	08 95       	ret

00005178 <__udivmodqi4>:
    5178:	99 1b       	sub	r25, r25
    517a:	79 e0       	ldi	r23, 0x09	; 9
    517c:	04 c0       	rjmp	.+8      	; 0x5186 <__udivmodqi4_ep>

0000517e <__udivmodqi4_loop>:
    517e:	99 1f       	adc	r25, r25
    5180:	96 17       	cp	r25, r22
    5182:	08 f0       	brcs	.+2      	; 0x5186 <__udivmodqi4_ep>
    5184:	96 1b       	sub	r25, r22

00005186 <__udivmodqi4_ep>:
    5186:	88 1f       	adc	r24, r24
    5188:	7a 95       	dec	r23
    518a:	c9 f7       	brne	.-14     	; 0x517e <__udivmodqi4_loop>
    518c:	80 95       	com	r24
    518e:	08 95       	ret

00005190 <__udivmodhi4>:
    5190:	aa 1b       	sub	r26, r26
    5192:	bb 1b       	sub	r27, r27
    5194:	51 e1       	ldi	r21, 0x11	; 17
    5196:	07 c0       	rjmp	.+14     	; 0x51a6 <__udivmodhi4_ep>

00005198 <__udivmodhi4_loop>:
    5198:	aa 1f       	adc	r26, r26
    519a:	bb 1f       	adc	r27, r27
    519c:	a6 17       	cp	r26, r22
    519e:	b7 07       	cpc	r27, r23
    51a0:	10 f0       	brcs	.+4      	; 0x51a6 <__udivmodhi4_ep>
    51a2:	a6 1b       	sub	r26, r22
    51a4:	b7 0b       	sbc	r27, r23

000051a6 <__udivmodhi4_ep>:
    51a6:	88 1f       	adc	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	5a 95       	dec	r21
    51ac:	a9 f7       	brne	.-22     	; 0x5198 <__udivmodhi4_loop>
    51ae:	80 95       	com	r24
    51b0:	90 95       	com	r25
    51b2:	bc 01       	movw	r22, r24
    51b4:	cd 01       	movw	r24, r26
    51b6:	08 95       	ret

000051b8 <__divmodhi4>:
    51b8:	97 fb       	bst	r25, 7
    51ba:	09 2e       	mov	r0, r25
    51bc:	07 26       	eor	r0, r23
    51be:	0a d0       	rcall	.+20     	; 0x51d4 <__divmodhi4_neg1>
    51c0:	77 fd       	sbrc	r23, 7
    51c2:	04 d0       	rcall	.+8      	; 0x51cc <__divmodhi4_neg2>
    51c4:	e5 df       	rcall	.-54     	; 0x5190 <__udivmodhi4>
    51c6:	06 d0       	rcall	.+12     	; 0x51d4 <__divmodhi4_neg1>
    51c8:	00 20       	and	r0, r0
    51ca:	1a f4       	brpl	.+6      	; 0x51d2 <__divmodhi4_exit>

000051cc <__divmodhi4_neg2>:
    51cc:	70 95       	com	r23
    51ce:	61 95       	neg	r22
    51d0:	7f 4f       	sbci	r23, 0xFF	; 255

000051d2 <__divmodhi4_exit>:
    51d2:	08 95       	ret

000051d4 <__divmodhi4_neg1>:
    51d4:	f6 f7       	brtc	.-4      	; 0x51d2 <__divmodhi4_exit>
    51d6:	90 95       	com	r25
    51d8:	81 95       	neg	r24
    51da:	9f 4f       	sbci	r25, 0xFF	; 255
    51dc:	08 95       	ret

000051de <__prologue_saves__>:
    51de:	2f 92       	push	r2
    51e0:	3f 92       	push	r3
    51e2:	4f 92       	push	r4
    51e4:	5f 92       	push	r5
    51e6:	6f 92       	push	r6
    51e8:	7f 92       	push	r7
    51ea:	8f 92       	push	r8
    51ec:	9f 92       	push	r9
    51ee:	af 92       	push	r10
    51f0:	bf 92       	push	r11
    51f2:	cf 92       	push	r12
    51f4:	df 92       	push	r13
    51f6:	ef 92       	push	r14
    51f8:	ff 92       	push	r15
    51fa:	0f 93       	push	r16
    51fc:	1f 93       	push	r17
    51fe:	cf 93       	push	r28
    5200:	df 93       	push	r29
    5202:	cd b7       	in	r28, 0x3d	; 61
    5204:	de b7       	in	r29, 0x3e	; 62
    5206:	ca 1b       	sub	r28, r26
    5208:	db 0b       	sbc	r29, r27
    520a:	0f b6       	in	r0, 0x3f	; 63
    520c:	f8 94       	cli
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	0f be       	out	0x3f, r0	; 63
    5212:	cd bf       	out	0x3d, r28	; 61
    5214:	09 94       	ijmp

00005216 <__epilogue_restores__>:
    5216:	2a 88       	ldd	r2, Y+18	; 0x12
    5218:	39 88       	ldd	r3, Y+17	; 0x11
    521a:	48 88       	ldd	r4, Y+16	; 0x10
    521c:	5f 84       	ldd	r5, Y+15	; 0x0f
    521e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5220:	7d 84       	ldd	r7, Y+13	; 0x0d
    5222:	8c 84       	ldd	r8, Y+12	; 0x0c
    5224:	9b 84       	ldd	r9, Y+11	; 0x0b
    5226:	aa 84       	ldd	r10, Y+10	; 0x0a
    5228:	b9 84       	ldd	r11, Y+9	; 0x09
    522a:	c8 84       	ldd	r12, Y+8	; 0x08
    522c:	df 80       	ldd	r13, Y+7	; 0x07
    522e:	ee 80       	ldd	r14, Y+6	; 0x06
    5230:	fd 80       	ldd	r15, Y+5	; 0x05
    5232:	0c 81       	ldd	r16, Y+4	; 0x04
    5234:	1b 81       	ldd	r17, Y+3	; 0x03
    5236:	aa 81       	ldd	r26, Y+2	; 0x02
    5238:	b9 81       	ldd	r27, Y+1	; 0x01
    523a:	ce 0f       	add	r28, r30
    523c:	d1 1d       	adc	r29, r1
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	f8 94       	cli
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	0f be       	out	0x3f, r0	; 63
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	ed 01       	movw	r28, r26
    524a:	08 95       	ret

0000524c <strtol>:
    524c:	2f 92       	push	r2
    524e:	3f 92       	push	r3
    5250:	5f 92       	push	r5
    5252:	6f 92       	push	r6
    5254:	7f 92       	push	r7
    5256:	8f 92       	push	r8
    5258:	9f 92       	push	r9
    525a:	af 92       	push	r10
    525c:	bf 92       	push	r11
    525e:	cf 92       	push	r12
    5260:	df 92       	push	r13
    5262:	ef 92       	push	r14
    5264:	ff 92       	push	r15
    5266:	0f 93       	push	r16
    5268:	1f 93       	push	r17
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    526e:	8c 01       	movw	r16, r24
    5270:	1b 01       	movw	r2, r22
    5272:	ea 01       	movw	r28, r20
    5274:	61 15       	cp	r22, r1
    5276:	71 05       	cpc	r23, r1
    5278:	19 f0       	breq	.+6      	; 0x5280 <strtol+0x34>
    527a:	fb 01       	movw	r30, r22
    527c:	91 83       	std	Z+1, r25	; 0x01
    527e:	80 83       	st	Z, r24
    5280:	20 97       	sbiw	r28, 0x00	; 0
    5282:	49 f0       	breq	.+18     	; 0x5296 <strtol+0x4a>
    5284:	ce 01       	movw	r24, r28
    5286:	02 97       	sbiw	r24, 0x02	; 2
    5288:	83 97       	sbiw	r24, 0x23	; 35
    528a:	28 f0       	brcs	.+10     	; 0x5296 <strtol+0x4a>
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	40 e0       	ldi	r20, 0x00	; 0
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	f6 c0       	rjmp	.+492    	; 0x5482 <strtol+0x236>
    5296:	f8 01       	movw	r30, r16
    5298:	a1 90       	ld	r10, Z+
    529a:	8f 01       	movw	r16, r30
    529c:	8a 2d       	mov	r24, r10
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	0e 94 55 2a 	call	0x54aa	; 0x54aa <isspace>
    52a4:	89 2b       	or	r24, r25
    52a6:	b9 f7       	brne	.-18     	; 0x5296 <strtol+0x4a>
    52a8:	fd e2       	ldi	r31, 0x2D	; 45
    52aa:	af 16       	cp	r10, r31
    52ac:	31 f4       	brne	.+12     	; 0x52ba <strtol+0x6e>
    52ae:	f8 01       	movw	r30, r16
    52b0:	a1 90       	ld	r10, Z+
    52b2:	8f 01       	movw	r16, r30
    52b4:	55 24       	eor	r5, r5
    52b6:	53 94       	inc	r5
    52b8:	07 c0       	rjmp	.+14     	; 0x52c8 <strtol+0x7c>
    52ba:	fb e2       	ldi	r31, 0x2B	; 43
    52bc:	af 16       	cp	r10, r31
    52be:	19 f4       	brne	.+6      	; 0x52c6 <strtol+0x7a>
    52c0:	f8 01       	movw	r30, r16
    52c2:	a1 90       	ld	r10, Z+
    52c4:	8f 01       	movw	r16, r30
    52c6:	55 24       	eor	r5, r5
    52c8:	20 97       	sbiw	r28, 0x00	; 0
    52ca:	19 f0       	breq	.+6      	; 0x52d2 <strtol+0x86>
    52cc:	c0 31       	cpi	r28, 0x10	; 16
    52ce:	d1 05       	cpc	r29, r1
    52d0:	c1 f4       	brne	.+48     	; 0x5302 <strtol+0xb6>
    52d2:	f0 e3       	ldi	r31, 0x30	; 48
    52d4:	af 16       	cp	r10, r31
    52d6:	79 f4       	brne	.+30     	; 0x52f6 <strtol+0xaa>
    52d8:	f8 01       	movw	r30, r16
    52da:	80 81       	ld	r24, Z
    52dc:	88 37       	cpi	r24, 0x78	; 120
    52de:	11 f0       	breq	.+4      	; 0x52e4 <strtol+0x98>
    52e0:	88 35       	cpi	r24, 0x58	; 88
    52e2:	49 f4       	brne	.+18     	; 0x52f6 <strtol+0xaa>
    52e4:	f8 01       	movw	r30, r16
    52e6:	a1 80       	ldd	r10, Z+1	; 0x01
    52e8:	0e 5f       	subi	r16, 0xFE	; 254
    52ea:	1f 4f       	sbci	r17, 0xFF	; 255
    52ec:	f2 e0       	ldi	r31, 0x02	; 2
    52ee:	5f 2a       	or	r5, r31
    52f0:	c0 e1       	ldi	r28, 0x10	; 16
    52f2:	d0 e0       	ldi	r29, 0x00	; 0
    52f4:	06 c0       	rjmp	.+12     	; 0x5302 <strtol+0xb6>
    52f6:	20 97       	sbiw	r28, 0x00	; 0
    52f8:	21 f4       	brne	.+8      	; 0x5302 <strtol+0xb6>
    52fa:	80 e3       	ldi	r24, 0x30	; 48
    52fc:	a8 16       	cp	r10, r24
    52fe:	e9 f4       	brne	.+58     	; 0x533a <strtol+0xee>
    5300:	27 c0       	rjmp	.+78     	; 0x5350 <strtol+0x104>
    5302:	c8 30       	cpi	r28, 0x08	; 8
    5304:	d1 05       	cpc	r29, r1
    5306:	31 f1       	breq	.+76     	; 0x5354 <strtol+0x108>
    5308:	c9 30       	cpi	r28, 0x09	; 9
    530a:	d1 05       	cpc	r29, r1
    530c:	24 f4       	brge	.+8      	; 0x5316 <strtol+0xca>
    530e:	c2 30       	cpi	r28, 0x02	; 2
    5310:	d1 05       	cpc	r29, r1
    5312:	31 f5       	brne	.+76     	; 0x5360 <strtol+0x114>
    5314:	0c c0       	rjmp	.+24     	; 0x532e <strtol+0xe2>
    5316:	ca 30       	cpi	r28, 0x0A	; 10
    5318:	d1 05       	cpc	r29, r1
    531a:	89 f0       	breq	.+34     	; 0x533e <strtol+0xf2>
    531c:	c0 31       	cpi	r28, 0x10	; 16
    531e:	d1 05       	cpc	r29, r1
    5320:	f9 f4       	brne	.+62     	; 0x5360 <strtol+0x114>
    5322:	c1 2c       	mov	r12, r1
    5324:	d1 2c       	mov	r13, r1
    5326:	e1 2c       	mov	r14, r1
    5328:	b8 e0       	ldi	r27, 0x08	; 8
    532a:	fb 2e       	mov	r15, r27
    532c:	28 c0       	rjmp	.+80     	; 0x537e <strtol+0x132>
    532e:	c1 2c       	mov	r12, r1
    5330:	d1 2c       	mov	r13, r1
    5332:	e1 2c       	mov	r14, r1
    5334:	a0 e4       	ldi	r26, 0x40	; 64
    5336:	fa 2e       	mov	r15, r26
    5338:	22 c0       	rjmp	.+68     	; 0x537e <strtol+0x132>
    533a:	ca e0       	ldi	r28, 0x0A	; 10
    533c:	d0 e0       	ldi	r29, 0x00	; 0
    533e:	fc ec       	ldi	r31, 0xCC	; 204
    5340:	cf 2e       	mov	r12, r31
    5342:	fc ec       	ldi	r31, 0xCC	; 204
    5344:	df 2e       	mov	r13, r31
    5346:	fc ec       	ldi	r31, 0xCC	; 204
    5348:	ef 2e       	mov	r14, r31
    534a:	fc e0       	ldi	r31, 0x0C	; 12
    534c:	ff 2e       	mov	r15, r31
    534e:	17 c0       	rjmp	.+46     	; 0x537e <strtol+0x132>
    5350:	c8 e0       	ldi	r28, 0x08	; 8
    5352:	d0 e0       	ldi	r29, 0x00	; 0
    5354:	c1 2c       	mov	r12, r1
    5356:	d1 2c       	mov	r13, r1
    5358:	e1 2c       	mov	r14, r1
    535a:	e0 e1       	ldi	r30, 0x10	; 16
    535c:	fe 2e       	mov	r15, r30
    535e:	0f c0       	rjmp	.+30     	; 0x537e <strtol+0x132>
    5360:	9e 01       	movw	r18, r28
    5362:	44 27       	eor	r20, r20
    5364:	37 fd       	sbrc	r19, 7
    5366:	40 95       	com	r20
    5368:	54 2f       	mov	r21, r20
    536a:	60 e0       	ldi	r22, 0x00	; 0
    536c:	70 e0       	ldi	r23, 0x00	; 0
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	90 e8       	ldi	r25, 0x80	; 128
    5372:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <__udivmodsi4>
    5376:	c9 01       	movw	r24, r18
    5378:	da 01       	movw	r26, r20
    537a:	6c 01       	movw	r12, r24
    537c:	7d 01       	movw	r14, r26
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	50 e0       	ldi	r21, 0x00	; 0
    5386:	60 e0       	ldi	r22, 0x00	; 0
    5388:	3e 01       	movw	r6, r28
    538a:	88 24       	eor	r8, r8
    538c:	77 fc       	sbrc	r7, 7
    538e:	80 94       	com	r8
    5390:	98 2c       	mov	r9, r8
    5392:	70 ed       	ldi	r23, 0xD0	; 208
    5394:	b7 2e       	mov	r11, r23
    5396:	ba 0c       	add	r11, r10
    5398:	e9 e0       	ldi	r30, 0x09	; 9
    539a:	eb 15       	cp	r30, r11
    539c:	70 f4       	brcc	.+28     	; 0x53ba <strtol+0x16e>
    539e:	8a 2d       	mov	r24, r10
    53a0:	81 54       	subi	r24, 0x41	; 65
    53a2:	8a 31       	cpi	r24, 0x1A	; 26
    53a4:	18 f4       	brcc	.+6      	; 0x53ac <strtol+0x160>
    53a6:	99 ec       	ldi	r25, 0xC9	; 201
    53a8:	b9 2e       	mov	r11, r25
    53aa:	06 c0       	rjmp	.+12     	; 0x53b8 <strtol+0x16c>
    53ac:	8a 2d       	mov	r24, r10
    53ae:	81 56       	subi	r24, 0x61	; 97
    53b0:	8a 31       	cpi	r24, 0x1A	; 26
    53b2:	50 f5       	brcc	.+84     	; 0x5408 <strtol+0x1bc>
    53b4:	89 ea       	ldi	r24, 0xA9	; 169
    53b6:	b8 2e       	mov	r11, r24
    53b8:	ba 0c       	add	r11, r10
    53ba:	8b 2d       	mov	r24, r11
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	8c 17       	cp	r24, r28
    53c0:	9d 07       	cpc	r25, r29
    53c2:	14 f5       	brge	.+68     	; 0x5408 <strtol+0x1bc>
    53c4:	6f 3f       	cpi	r22, 0xFF	; 255
    53c6:	e1 f0       	breq	.+56     	; 0x5400 <strtol+0x1b4>
    53c8:	c2 16       	cp	r12, r18
    53ca:	d3 06       	cpc	r13, r19
    53cc:	e4 06       	cpc	r14, r20
    53ce:	f5 06       	cpc	r15, r21
    53d0:	b0 f0       	brcs	.+44     	; 0x53fe <strtol+0x1b2>
    53d2:	ca 01       	movw	r24, r20
    53d4:	b9 01       	movw	r22, r18
    53d6:	a4 01       	movw	r20, r8
    53d8:	93 01       	movw	r18, r6
    53da:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__mulsi3>
    53de:	9b 01       	movw	r18, r22
    53e0:	ac 01       	movw	r20, r24
    53e2:	2b 0d       	add	r18, r11
    53e4:	31 1d       	adc	r19, r1
    53e6:	41 1d       	adc	r20, r1
    53e8:	51 1d       	adc	r21, r1
    53ea:	21 30       	cpi	r18, 0x01	; 1
    53ec:	f0 e0       	ldi	r31, 0x00	; 0
    53ee:	3f 07       	cpc	r19, r31
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	4f 07       	cpc	r20, r31
    53f4:	f0 e8       	ldi	r31, 0x80	; 128
    53f6:	5f 07       	cpc	r21, r31
    53f8:	10 f4       	brcc	.+4      	; 0x53fe <strtol+0x1b2>
    53fa:	61 e0       	ldi	r22, 0x01	; 1
    53fc:	01 c0       	rjmp	.+2      	; 0x5400 <strtol+0x1b4>
    53fe:	6f ef       	ldi	r22, 0xFF	; 255
    5400:	f8 01       	movw	r30, r16
    5402:	a1 90       	ld	r10, Z+
    5404:	8f 01       	movw	r16, r30
    5406:	c5 cf       	rjmp	.-118    	; 0x5392 <strtol+0x146>
    5408:	21 14       	cp	r2, r1
    540a:	31 04       	cpc	r3, r1
    540c:	81 f0       	breq	.+32     	; 0x542e <strtol+0x1e2>
    540e:	66 23       	and	r22, r22
    5410:	31 f0       	breq	.+12     	; 0x541e <strtol+0x1d2>
    5412:	01 50       	subi	r16, 0x01	; 1
    5414:	10 40       	sbci	r17, 0x00	; 0
    5416:	f1 01       	movw	r30, r2
    5418:	11 83       	std	Z+1, r17	; 0x01
    541a:	00 83       	st	Z, r16
    541c:	08 c0       	rjmp	.+16     	; 0x542e <strtol+0x1e2>
    541e:	51 fe       	sbrs	r5, 1
    5420:	1a c0       	rjmp	.+52     	; 0x5456 <strtol+0x20a>
    5422:	02 50       	subi	r16, 0x02	; 2
    5424:	10 40       	sbci	r17, 0x00	; 0
    5426:	f1 01       	movw	r30, r2
    5428:	11 83       	std	Z+1, r17	; 0x01
    542a:	00 83       	st	Z, r16
    542c:	14 c0       	rjmp	.+40     	; 0x5456 <strtol+0x20a>
    542e:	67 ff       	sbrs	r22, 7
    5430:	12 c0       	rjmp	.+36     	; 0x5456 <strtol+0x20a>
    5432:	50 fc       	sbrc	r5, 0
    5434:	05 c0       	rjmp	.+10     	; 0x5440 <strtol+0x1f4>
    5436:	2f ef       	ldi	r18, 0xFF	; 255
    5438:	3f ef       	ldi	r19, 0xFF	; 255
    543a:	4f ef       	ldi	r20, 0xFF	; 255
    543c:	5f e7       	ldi	r21, 0x7F	; 127
    543e:	04 c0       	rjmp	.+8      	; 0x5448 <strtol+0x1fc>
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e0       	ldi	r20, 0x00	; 0
    5446:	50 e8       	ldi	r21, 0x80	; 128
    5448:	82 e2       	ldi	r24, 0x22	; 34
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	90 93 76 03 	sts	0x0376, r25
    5450:	80 93 75 03 	sts	0x0375, r24
    5454:	16 c0       	rjmp	.+44     	; 0x5482 <strtol+0x236>
    5456:	50 fe       	sbrs	r5, 0
    5458:	08 c0       	rjmp	.+16     	; 0x546a <strtol+0x21e>
    545a:	50 95       	com	r21
    545c:	40 95       	com	r20
    545e:	30 95       	com	r19
    5460:	21 95       	neg	r18
    5462:	3f 4f       	sbci	r19, 0xFF	; 255
    5464:	4f 4f       	sbci	r20, 0xFF	; 255
    5466:	5f 4f       	sbci	r21, 0xFF	; 255
    5468:	0c c0       	rjmp	.+24     	; 0x5482 <strtol+0x236>
    546a:	57 ff       	sbrs	r21, 7
    546c:	0a c0       	rjmp	.+20     	; 0x5482 <strtol+0x236>
    546e:	82 e2       	ldi	r24, 0x22	; 34
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	90 93 76 03 	sts	0x0376, r25
    5476:	80 93 75 03 	sts	0x0375, r24
    547a:	2f ef       	ldi	r18, 0xFF	; 255
    547c:	3f ef       	ldi	r19, 0xFF	; 255
    547e:	4f ef       	ldi	r20, 0xFF	; 255
    5480:	5f e7       	ldi	r21, 0x7F	; 127
    5482:	b9 01       	movw	r22, r18
    5484:	ca 01       	movw	r24, r20
    5486:	df 91       	pop	r29
    5488:	cf 91       	pop	r28
    548a:	1f 91       	pop	r17
    548c:	0f 91       	pop	r16
    548e:	ff 90       	pop	r15
    5490:	ef 90       	pop	r14
    5492:	df 90       	pop	r13
    5494:	cf 90       	pop	r12
    5496:	bf 90       	pop	r11
    5498:	af 90       	pop	r10
    549a:	9f 90       	pop	r9
    549c:	8f 90       	pop	r8
    549e:	7f 90       	pop	r7
    54a0:	6f 90       	pop	r6
    54a2:	5f 90       	pop	r5
    54a4:	3f 90       	pop	r3
    54a6:	2f 90       	pop	r2
    54a8:	08 95       	ret

000054aa <isspace>:
    54aa:	91 11       	cpse	r25, r1
    54ac:	6f c2       	rjmp	.+1246   	; 0x598c <__ctype_isfalse>
    54ae:	80 32       	cpi	r24, 0x20	; 32
    54b0:	19 f0       	breq	.+6      	; 0x54b8 <isspace+0xe>
    54b2:	89 50       	subi	r24, 0x09	; 9
    54b4:	85 50       	subi	r24, 0x05	; 5
    54b6:	d0 f7       	brcc	.-12     	; 0x54ac <isspace+0x2>
    54b8:	08 95       	ret

000054ba <memcpy>:
    54ba:	fb 01       	movw	r30, r22
    54bc:	dc 01       	movw	r26, r24
    54be:	02 c0       	rjmp	.+4      	; 0x54c4 <memcpy+0xa>
    54c0:	01 90       	ld	r0, Z+
    54c2:	0d 92       	st	X+, r0
    54c4:	41 50       	subi	r20, 0x01	; 1
    54c6:	50 40       	sbci	r21, 0x00	; 0
    54c8:	d8 f7       	brcc	.-10     	; 0x54c0 <memcpy+0x6>
    54ca:	08 95       	ret

000054cc <strcmp>:
    54cc:	fb 01       	movw	r30, r22
    54ce:	dc 01       	movw	r26, r24
    54d0:	8d 91       	ld	r24, X+
    54d2:	01 90       	ld	r0, Z+
    54d4:	80 19       	sub	r24, r0
    54d6:	01 10       	cpse	r0, r1
    54d8:	d9 f3       	breq	.-10     	; 0x54d0 <strcmp+0x4>
    54da:	99 0b       	sbc	r25, r25
    54dc:	08 95       	ret

000054de <strcpy>:
    54de:	fb 01       	movw	r30, r22
    54e0:	dc 01       	movw	r26, r24
    54e2:	01 90       	ld	r0, Z+
    54e4:	0d 92       	st	X+, r0
    54e6:	00 20       	and	r0, r0
    54e8:	e1 f7       	brne	.-8      	; 0x54e2 <strcpy+0x4>
    54ea:	08 95       	ret

000054ec <strlen>:
    54ec:	fc 01       	movw	r30, r24
    54ee:	01 90       	ld	r0, Z+
    54f0:	00 20       	and	r0, r0
    54f2:	e9 f7       	brne	.-6      	; 0x54ee <strlen+0x2>
    54f4:	80 95       	com	r24
    54f6:	90 95       	com	r25
    54f8:	8e 0f       	add	r24, r30
    54fa:	9f 1f       	adc	r25, r31
    54fc:	08 95       	ret

000054fe <snprintf>:
    54fe:	ae e0       	ldi	r26, 0x0E	; 14
    5500:	b0 e0       	ldi	r27, 0x00	; 0
    5502:	e5 e8       	ldi	r30, 0x85	; 133
    5504:	fa e2       	ldi	r31, 0x2A	; 42
    5506:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__prologue_saves__+0x1c>
    550a:	0d 89       	ldd	r16, Y+21	; 0x15
    550c:	1e 89       	ldd	r17, Y+22	; 0x16
    550e:	8f 89       	ldd	r24, Y+23	; 0x17
    5510:	98 8d       	ldd	r25, Y+24	; 0x18
    5512:	97 ff       	sbrs	r25, 7
    5514:	02 c0       	rjmp	.+4      	; 0x551a <snprintf+0x1c>
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	90 e8       	ldi	r25, 0x80	; 128
    551a:	01 97       	sbiw	r24, 0x01	; 1
    551c:	9e 83       	std	Y+6, r25	; 0x06
    551e:	8d 83       	std	Y+5, r24	; 0x05
    5520:	1a 83       	std	Y+2, r17	; 0x02
    5522:	09 83       	std	Y+1, r16	; 0x01
    5524:	86 e0       	ldi	r24, 0x06	; 6
    5526:	8c 83       	std	Y+4, r24	; 0x04
    5528:	9e 01       	movw	r18, r28
    552a:	25 5e       	subi	r18, 0xE5	; 229
    552c:	3f 4f       	sbci	r19, 0xFF	; 255
    552e:	ce 01       	movw	r24, r28
    5530:	01 96       	adiw	r24, 0x01	; 1
    5532:	69 8d       	ldd	r22, Y+25	; 0x19
    5534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5536:	a9 01       	movw	r20, r18
    5538:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <vfprintf>
    553c:	4d 81       	ldd	r20, Y+5	; 0x05
    553e:	5e 81       	ldd	r21, Y+6	; 0x06
    5540:	57 fd       	sbrc	r21, 7
    5542:	0a c0       	rjmp	.+20     	; 0x5558 <snprintf+0x5a>
    5544:	2f 81       	ldd	r18, Y+7	; 0x07
    5546:	38 85       	ldd	r19, Y+8	; 0x08
    5548:	42 17       	cp	r20, r18
    554a:	53 07       	cpc	r21, r19
    554c:	0c f4       	brge	.+2      	; 0x5550 <snprintf+0x52>
    554e:	9a 01       	movw	r18, r20
    5550:	02 0f       	add	r16, r18
    5552:	13 1f       	adc	r17, r19
    5554:	f8 01       	movw	r30, r16
    5556:	10 82       	st	Z, r1
    5558:	2e 96       	adiw	r28, 0x0e	; 14
    555a:	e4 e0       	ldi	r30, 0x04	; 4
    555c:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__epilogue_restores__+0x1c>

00005560 <sprintf>:
    5560:	ae e0       	ldi	r26, 0x0E	; 14
    5562:	b0 e0       	ldi	r27, 0x00	; 0
    5564:	e6 eb       	ldi	r30, 0xB6	; 182
    5566:	fa e2       	ldi	r31, 0x2A	; 42
    5568:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__prologue_saves__+0x1c>
    556c:	0d 89       	ldd	r16, Y+21	; 0x15
    556e:	1e 89       	ldd	r17, Y+22	; 0x16
    5570:	86 e0       	ldi	r24, 0x06	; 6
    5572:	8c 83       	std	Y+4, r24	; 0x04
    5574:	1a 83       	std	Y+2, r17	; 0x02
    5576:	09 83       	std	Y+1, r16	; 0x01
    5578:	8f ef       	ldi	r24, 0xFF	; 255
    557a:	9f e7       	ldi	r25, 0x7F	; 127
    557c:	9e 83       	std	Y+6, r25	; 0x06
    557e:	8d 83       	std	Y+5, r24	; 0x05
    5580:	9e 01       	movw	r18, r28
    5582:	27 5e       	subi	r18, 0xE7	; 231
    5584:	3f 4f       	sbci	r19, 0xFF	; 255
    5586:	ce 01       	movw	r24, r28
    5588:	01 96       	adiw	r24, 0x01	; 1
    558a:	6f 89       	ldd	r22, Y+23	; 0x17
    558c:	78 8d       	ldd	r23, Y+24	; 0x18
    558e:	a9 01       	movw	r20, r18
    5590:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <vfprintf>
    5594:	2f 81       	ldd	r18, Y+7	; 0x07
    5596:	38 85       	ldd	r19, Y+8	; 0x08
    5598:	02 0f       	add	r16, r18
    559a:	13 1f       	adc	r17, r19
    559c:	f8 01       	movw	r30, r16
    559e:	10 82       	st	Z, r1
    55a0:	2e 96       	adiw	r28, 0x0e	; 14
    55a2:	e4 e0       	ldi	r30, 0x04	; 4
    55a4:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__epilogue_restores__+0x1c>

000055a8 <vfprintf>:
    55a8:	ab e0       	ldi	r26, 0x0B	; 11
    55aa:	b0 e0       	ldi	r27, 0x00	; 0
    55ac:	ea ed       	ldi	r30, 0xDA	; 218
    55ae:	fa e2       	ldi	r31, 0x2A	; 42
    55b0:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__prologue_saves__>
    55b4:	3c 01       	movw	r6, r24
    55b6:	2b 01       	movw	r4, r22
    55b8:	5a 01       	movw	r10, r20
    55ba:	fc 01       	movw	r30, r24
    55bc:	17 82       	std	Z+7, r1	; 0x07
    55be:	16 82       	std	Z+6, r1	; 0x06
    55c0:	83 81       	ldd	r24, Z+3	; 0x03
    55c2:	81 fd       	sbrc	r24, 1
    55c4:	03 c0       	rjmp	.+6      	; 0x55cc <vfprintf+0x24>
    55c6:	6f ef       	ldi	r22, 0xFF	; 255
    55c8:	7f ef       	ldi	r23, 0xFF	; 255
    55ca:	c6 c1       	rjmp	.+908    	; 0x5958 <vfprintf+0x3b0>
    55cc:	9a e0       	ldi	r25, 0x0A	; 10
    55ce:	89 2e       	mov	r8, r25
    55d0:	1e 01       	movw	r2, r28
    55d2:	08 94       	sec
    55d4:	21 1c       	adc	r2, r1
    55d6:	31 1c       	adc	r3, r1
    55d8:	f3 01       	movw	r30, r6
    55da:	23 81       	ldd	r18, Z+3	; 0x03
    55dc:	f2 01       	movw	r30, r4
    55de:	23 fd       	sbrc	r18, 3
    55e0:	85 91       	lpm	r24, Z+
    55e2:	23 ff       	sbrs	r18, 3
    55e4:	81 91       	ld	r24, Z+
    55e6:	2f 01       	movw	r4, r30
    55e8:	88 23       	and	r24, r24
    55ea:	09 f4       	brne	.+2      	; 0x55ee <vfprintf+0x46>
    55ec:	b2 c1       	rjmp	.+868    	; 0x5952 <vfprintf+0x3aa>
    55ee:	85 32       	cpi	r24, 0x25	; 37
    55f0:	39 f4       	brne	.+14     	; 0x5600 <vfprintf+0x58>
    55f2:	23 fd       	sbrc	r18, 3
    55f4:	85 91       	lpm	r24, Z+
    55f6:	23 ff       	sbrs	r18, 3
    55f8:	81 91       	ld	r24, Z+
    55fa:	2f 01       	movw	r4, r30
    55fc:	85 32       	cpi	r24, 0x25	; 37
    55fe:	29 f4       	brne	.+10     	; 0x560a <vfprintf+0x62>
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	b3 01       	movw	r22, r6
    5604:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    5608:	e7 cf       	rjmp	.-50     	; 0x55d8 <vfprintf+0x30>
    560a:	98 2f       	mov	r25, r24
    560c:	ff 24       	eor	r15, r15
    560e:	ee 24       	eor	r14, r14
    5610:	99 24       	eor	r9, r9
    5612:	ff e1       	ldi	r31, 0x1F	; 31
    5614:	ff 15       	cp	r31, r15
    5616:	d0 f0       	brcs	.+52     	; 0x564c <vfprintf+0xa4>
    5618:	9b 32       	cpi	r25, 0x2B	; 43
    561a:	69 f0       	breq	.+26     	; 0x5636 <vfprintf+0x8e>
    561c:	9c 32       	cpi	r25, 0x2C	; 44
    561e:	28 f4       	brcc	.+10     	; 0x562a <vfprintf+0x82>
    5620:	90 32       	cpi	r25, 0x20	; 32
    5622:	59 f0       	breq	.+22     	; 0x563a <vfprintf+0x92>
    5624:	93 32       	cpi	r25, 0x23	; 35
    5626:	91 f4       	brne	.+36     	; 0x564c <vfprintf+0xa4>
    5628:	0e c0       	rjmp	.+28     	; 0x5646 <vfprintf+0x9e>
    562a:	9d 32       	cpi	r25, 0x2D	; 45
    562c:	49 f0       	breq	.+18     	; 0x5640 <vfprintf+0x98>
    562e:	90 33       	cpi	r25, 0x30	; 48
    5630:	69 f4       	brne	.+26     	; 0x564c <vfprintf+0xa4>
    5632:	41 e0       	ldi	r20, 0x01	; 1
    5634:	24 c0       	rjmp	.+72     	; 0x567e <vfprintf+0xd6>
    5636:	52 e0       	ldi	r21, 0x02	; 2
    5638:	f5 2a       	or	r15, r21
    563a:	84 e0       	ldi	r24, 0x04	; 4
    563c:	f8 2a       	or	r15, r24
    563e:	28 c0       	rjmp	.+80     	; 0x5690 <vfprintf+0xe8>
    5640:	98 e0       	ldi	r25, 0x08	; 8
    5642:	f9 2a       	or	r15, r25
    5644:	25 c0       	rjmp	.+74     	; 0x5690 <vfprintf+0xe8>
    5646:	e0 e1       	ldi	r30, 0x10	; 16
    5648:	fe 2a       	or	r15, r30
    564a:	22 c0       	rjmp	.+68     	; 0x5690 <vfprintf+0xe8>
    564c:	f7 fc       	sbrc	r15, 7
    564e:	29 c0       	rjmp	.+82     	; 0x56a2 <vfprintf+0xfa>
    5650:	89 2f       	mov	r24, r25
    5652:	80 53       	subi	r24, 0x30	; 48
    5654:	8a 30       	cpi	r24, 0x0A	; 10
    5656:	70 f4       	brcc	.+28     	; 0x5674 <vfprintf+0xcc>
    5658:	f6 fe       	sbrs	r15, 6
    565a:	05 c0       	rjmp	.+10     	; 0x5666 <vfprintf+0xbe>
    565c:	98 9c       	mul	r9, r8
    565e:	90 2c       	mov	r9, r0
    5660:	11 24       	eor	r1, r1
    5662:	98 0e       	add	r9, r24
    5664:	15 c0       	rjmp	.+42     	; 0x5690 <vfprintf+0xe8>
    5666:	e8 9c       	mul	r14, r8
    5668:	e0 2c       	mov	r14, r0
    566a:	11 24       	eor	r1, r1
    566c:	e8 0e       	add	r14, r24
    566e:	f0 e2       	ldi	r31, 0x20	; 32
    5670:	ff 2a       	or	r15, r31
    5672:	0e c0       	rjmp	.+28     	; 0x5690 <vfprintf+0xe8>
    5674:	9e 32       	cpi	r25, 0x2E	; 46
    5676:	29 f4       	brne	.+10     	; 0x5682 <vfprintf+0xda>
    5678:	f6 fc       	sbrc	r15, 6
    567a:	6b c1       	rjmp	.+726    	; 0x5952 <vfprintf+0x3aa>
    567c:	40 e4       	ldi	r20, 0x40	; 64
    567e:	f4 2a       	or	r15, r20
    5680:	07 c0       	rjmp	.+14     	; 0x5690 <vfprintf+0xe8>
    5682:	9c 36       	cpi	r25, 0x6C	; 108
    5684:	19 f4       	brne	.+6      	; 0x568c <vfprintf+0xe4>
    5686:	50 e8       	ldi	r21, 0x80	; 128
    5688:	f5 2a       	or	r15, r21
    568a:	02 c0       	rjmp	.+4      	; 0x5690 <vfprintf+0xe8>
    568c:	98 36       	cpi	r25, 0x68	; 104
    568e:	49 f4       	brne	.+18     	; 0x56a2 <vfprintf+0xfa>
    5690:	f2 01       	movw	r30, r4
    5692:	23 fd       	sbrc	r18, 3
    5694:	95 91       	lpm	r25, Z+
    5696:	23 ff       	sbrs	r18, 3
    5698:	91 91       	ld	r25, Z+
    569a:	2f 01       	movw	r4, r30
    569c:	99 23       	and	r25, r25
    569e:	09 f0       	breq	.+2      	; 0x56a2 <vfprintf+0xfa>
    56a0:	b8 cf       	rjmp	.-144    	; 0x5612 <vfprintf+0x6a>
    56a2:	89 2f       	mov	r24, r25
    56a4:	85 54       	subi	r24, 0x45	; 69
    56a6:	83 30       	cpi	r24, 0x03	; 3
    56a8:	18 f0       	brcs	.+6      	; 0x56b0 <vfprintf+0x108>
    56aa:	80 52       	subi	r24, 0x20	; 32
    56ac:	83 30       	cpi	r24, 0x03	; 3
    56ae:	38 f4       	brcc	.+14     	; 0x56be <vfprintf+0x116>
    56b0:	44 e0       	ldi	r20, 0x04	; 4
    56b2:	50 e0       	ldi	r21, 0x00	; 0
    56b4:	a4 0e       	add	r10, r20
    56b6:	b5 1e       	adc	r11, r21
    56b8:	5f e3       	ldi	r21, 0x3F	; 63
    56ba:	59 83       	std	Y+1, r21	; 0x01
    56bc:	0f c0       	rjmp	.+30     	; 0x56dc <vfprintf+0x134>
    56be:	93 36       	cpi	r25, 0x63	; 99
    56c0:	31 f0       	breq	.+12     	; 0x56ce <vfprintf+0x126>
    56c2:	93 37       	cpi	r25, 0x73	; 115
    56c4:	79 f0       	breq	.+30     	; 0x56e4 <vfprintf+0x13c>
    56c6:	93 35       	cpi	r25, 0x53	; 83
    56c8:	09 f0       	breq	.+2      	; 0x56cc <vfprintf+0x124>
    56ca:	56 c0       	rjmp	.+172    	; 0x5778 <vfprintf+0x1d0>
    56cc:	20 c0       	rjmp	.+64     	; 0x570e <vfprintf+0x166>
    56ce:	f5 01       	movw	r30, r10
    56d0:	80 81       	ld	r24, Z
    56d2:	89 83       	std	Y+1, r24	; 0x01
    56d4:	42 e0       	ldi	r20, 0x02	; 2
    56d6:	50 e0       	ldi	r21, 0x00	; 0
    56d8:	a4 0e       	add	r10, r20
    56da:	b5 1e       	adc	r11, r21
    56dc:	61 01       	movw	r12, r2
    56de:	01 e0       	ldi	r16, 0x01	; 1
    56e0:	10 e0       	ldi	r17, 0x00	; 0
    56e2:	12 c0       	rjmp	.+36     	; 0x5708 <vfprintf+0x160>
    56e4:	f5 01       	movw	r30, r10
    56e6:	c0 80       	ld	r12, Z
    56e8:	d1 80       	ldd	r13, Z+1	; 0x01
    56ea:	f6 fc       	sbrc	r15, 6
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <vfprintf+0x14c>
    56ee:	6f ef       	ldi	r22, 0xFF	; 255
    56f0:	7f ef       	ldi	r23, 0xFF	; 255
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <vfprintf+0x150>
    56f4:	69 2d       	mov	r22, r9
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	42 e0       	ldi	r20, 0x02	; 2
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	a4 0e       	add	r10, r20
    56fe:	b5 1e       	adc	r11, r21
    5700:	c6 01       	movw	r24, r12
    5702:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <strnlen>
    5706:	8c 01       	movw	r16, r24
    5708:	5f e7       	ldi	r21, 0x7F	; 127
    570a:	f5 22       	and	r15, r21
    570c:	14 c0       	rjmp	.+40     	; 0x5736 <vfprintf+0x18e>
    570e:	f5 01       	movw	r30, r10
    5710:	c0 80       	ld	r12, Z
    5712:	d1 80       	ldd	r13, Z+1	; 0x01
    5714:	f6 fc       	sbrc	r15, 6
    5716:	03 c0       	rjmp	.+6      	; 0x571e <vfprintf+0x176>
    5718:	6f ef       	ldi	r22, 0xFF	; 255
    571a:	7f ef       	ldi	r23, 0xFF	; 255
    571c:	02 c0       	rjmp	.+4      	; 0x5722 <vfprintf+0x17a>
    571e:	69 2d       	mov	r22, r9
    5720:	70 e0       	ldi	r23, 0x00	; 0
    5722:	42 e0       	ldi	r20, 0x02	; 2
    5724:	50 e0       	ldi	r21, 0x00	; 0
    5726:	a4 0e       	add	r10, r20
    5728:	b5 1e       	adc	r11, r21
    572a:	c6 01       	movw	r24, r12
    572c:	0e 94 c9 2c 	call	0x5992	; 0x5992 <strnlen_P>
    5730:	8c 01       	movw	r16, r24
    5732:	50 e8       	ldi	r21, 0x80	; 128
    5734:	f5 2a       	or	r15, r21
    5736:	f3 fe       	sbrs	r15, 3
    5738:	07 c0       	rjmp	.+14     	; 0x5748 <vfprintf+0x1a0>
    573a:	1a c0       	rjmp	.+52     	; 0x5770 <vfprintf+0x1c8>
    573c:	80 e2       	ldi	r24, 0x20	; 32
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	b3 01       	movw	r22, r6
    5742:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    5746:	ea 94       	dec	r14
    5748:	8e 2d       	mov	r24, r14
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	08 17       	cp	r16, r24
    574e:	19 07       	cpc	r17, r25
    5750:	a8 f3       	brcs	.-22     	; 0x573c <vfprintf+0x194>
    5752:	0e c0       	rjmp	.+28     	; 0x5770 <vfprintf+0x1c8>
    5754:	f6 01       	movw	r30, r12
    5756:	f7 fc       	sbrc	r15, 7
    5758:	85 91       	lpm	r24, Z+
    575a:	f7 fe       	sbrs	r15, 7
    575c:	81 91       	ld	r24, Z+
    575e:	6f 01       	movw	r12, r30
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	b3 01       	movw	r22, r6
    5764:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    5768:	e1 10       	cpse	r14, r1
    576a:	ea 94       	dec	r14
    576c:	01 50       	subi	r16, 0x01	; 1
    576e:	10 40       	sbci	r17, 0x00	; 0
    5770:	01 15       	cp	r16, r1
    5772:	11 05       	cpc	r17, r1
    5774:	79 f7       	brne	.-34     	; 0x5754 <vfprintf+0x1ac>
    5776:	ea c0       	rjmp	.+468    	; 0x594c <vfprintf+0x3a4>
    5778:	94 36       	cpi	r25, 0x64	; 100
    577a:	11 f0       	breq	.+4      	; 0x5780 <vfprintf+0x1d8>
    577c:	99 36       	cpi	r25, 0x69	; 105
    577e:	69 f5       	brne	.+90     	; 0x57da <vfprintf+0x232>
    5780:	f7 fe       	sbrs	r15, 7
    5782:	08 c0       	rjmp	.+16     	; 0x5794 <vfprintf+0x1ec>
    5784:	f5 01       	movw	r30, r10
    5786:	20 81       	ld	r18, Z
    5788:	31 81       	ldd	r19, Z+1	; 0x01
    578a:	42 81       	ldd	r20, Z+2	; 0x02
    578c:	53 81       	ldd	r21, Z+3	; 0x03
    578e:	84 e0       	ldi	r24, 0x04	; 4
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	0a c0       	rjmp	.+20     	; 0x57a8 <vfprintf+0x200>
    5794:	f5 01       	movw	r30, r10
    5796:	80 81       	ld	r24, Z
    5798:	91 81       	ldd	r25, Z+1	; 0x01
    579a:	9c 01       	movw	r18, r24
    579c:	44 27       	eor	r20, r20
    579e:	37 fd       	sbrc	r19, 7
    57a0:	40 95       	com	r20
    57a2:	54 2f       	mov	r21, r20
    57a4:	82 e0       	ldi	r24, 0x02	; 2
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	a8 0e       	add	r10, r24
    57aa:	b9 1e       	adc	r11, r25
    57ac:	9f e6       	ldi	r25, 0x6F	; 111
    57ae:	f9 22       	and	r15, r25
    57b0:	57 ff       	sbrs	r21, 7
    57b2:	09 c0       	rjmp	.+18     	; 0x57c6 <vfprintf+0x21e>
    57b4:	50 95       	com	r21
    57b6:	40 95       	com	r20
    57b8:	30 95       	com	r19
    57ba:	21 95       	neg	r18
    57bc:	3f 4f       	sbci	r19, 0xFF	; 255
    57be:	4f 4f       	sbci	r20, 0xFF	; 255
    57c0:	5f 4f       	sbci	r21, 0xFF	; 255
    57c2:	e0 e8       	ldi	r30, 0x80	; 128
    57c4:	fe 2a       	or	r15, r30
    57c6:	ca 01       	movw	r24, r20
    57c8:	b9 01       	movw	r22, r18
    57ca:	a1 01       	movw	r20, r2
    57cc:	2a e0       	ldi	r18, 0x0A	; 10
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__ultoa_invert>
    57d4:	d8 2e       	mov	r13, r24
    57d6:	d2 18       	sub	r13, r2
    57d8:	40 c0       	rjmp	.+128    	; 0x585a <vfprintf+0x2b2>
    57da:	95 37       	cpi	r25, 0x75	; 117
    57dc:	29 f4       	brne	.+10     	; 0x57e8 <vfprintf+0x240>
    57de:	1f 2d       	mov	r17, r15
    57e0:	1f 7e       	andi	r17, 0xEF	; 239
    57e2:	2a e0       	ldi	r18, 0x0A	; 10
    57e4:	30 e0       	ldi	r19, 0x00	; 0
    57e6:	1d c0       	rjmp	.+58     	; 0x5822 <vfprintf+0x27a>
    57e8:	1f 2d       	mov	r17, r15
    57ea:	19 7f       	andi	r17, 0xF9	; 249
    57ec:	9f 36       	cpi	r25, 0x6F	; 111
    57ee:	61 f0       	breq	.+24     	; 0x5808 <vfprintf+0x260>
    57f0:	90 37       	cpi	r25, 0x70	; 112
    57f2:	20 f4       	brcc	.+8      	; 0x57fc <vfprintf+0x254>
    57f4:	98 35       	cpi	r25, 0x58	; 88
    57f6:	09 f0       	breq	.+2      	; 0x57fa <vfprintf+0x252>
    57f8:	ac c0       	rjmp	.+344    	; 0x5952 <vfprintf+0x3aa>
    57fa:	0f c0       	rjmp	.+30     	; 0x581a <vfprintf+0x272>
    57fc:	90 37       	cpi	r25, 0x70	; 112
    57fe:	39 f0       	breq	.+14     	; 0x580e <vfprintf+0x266>
    5800:	98 37       	cpi	r25, 0x78	; 120
    5802:	09 f0       	breq	.+2      	; 0x5806 <vfprintf+0x25e>
    5804:	a6 c0       	rjmp	.+332    	; 0x5952 <vfprintf+0x3aa>
    5806:	04 c0       	rjmp	.+8      	; 0x5810 <vfprintf+0x268>
    5808:	28 e0       	ldi	r18, 0x08	; 8
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	0a c0       	rjmp	.+20     	; 0x5822 <vfprintf+0x27a>
    580e:	10 61       	ori	r17, 0x10	; 16
    5810:	14 fd       	sbrc	r17, 4
    5812:	14 60       	ori	r17, 0x04	; 4
    5814:	20 e1       	ldi	r18, 0x10	; 16
    5816:	30 e0       	ldi	r19, 0x00	; 0
    5818:	04 c0       	rjmp	.+8      	; 0x5822 <vfprintf+0x27a>
    581a:	14 fd       	sbrc	r17, 4
    581c:	16 60       	ori	r17, 0x06	; 6
    581e:	20 e1       	ldi	r18, 0x10	; 16
    5820:	32 e0       	ldi	r19, 0x02	; 2
    5822:	17 ff       	sbrs	r17, 7
    5824:	08 c0       	rjmp	.+16     	; 0x5836 <vfprintf+0x28e>
    5826:	f5 01       	movw	r30, r10
    5828:	60 81       	ld	r22, Z
    582a:	71 81       	ldd	r23, Z+1	; 0x01
    582c:	82 81       	ldd	r24, Z+2	; 0x02
    582e:	93 81       	ldd	r25, Z+3	; 0x03
    5830:	44 e0       	ldi	r20, 0x04	; 4
    5832:	50 e0       	ldi	r21, 0x00	; 0
    5834:	08 c0       	rjmp	.+16     	; 0x5846 <vfprintf+0x29e>
    5836:	f5 01       	movw	r30, r10
    5838:	80 81       	ld	r24, Z
    583a:	91 81       	ldd	r25, Z+1	; 0x01
    583c:	bc 01       	movw	r22, r24
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	42 e0       	ldi	r20, 0x02	; 2
    5844:	50 e0       	ldi	r21, 0x00	; 0
    5846:	a4 0e       	add	r10, r20
    5848:	b5 1e       	adc	r11, r21
    584a:	a1 01       	movw	r20, r2
    584c:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__ultoa_invert>
    5850:	d8 2e       	mov	r13, r24
    5852:	d2 18       	sub	r13, r2
    5854:	8f e7       	ldi	r24, 0x7F	; 127
    5856:	f8 2e       	mov	r15, r24
    5858:	f1 22       	and	r15, r17
    585a:	f6 fe       	sbrs	r15, 6
    585c:	0b c0       	rjmp	.+22     	; 0x5874 <vfprintf+0x2cc>
    585e:	5e ef       	ldi	r21, 0xFE	; 254
    5860:	f5 22       	and	r15, r21
    5862:	d9 14       	cp	r13, r9
    5864:	38 f4       	brcc	.+14     	; 0x5874 <vfprintf+0x2cc>
    5866:	f4 fe       	sbrs	r15, 4
    5868:	07 c0       	rjmp	.+14     	; 0x5878 <vfprintf+0x2d0>
    586a:	f2 fc       	sbrc	r15, 2
    586c:	05 c0       	rjmp	.+10     	; 0x5878 <vfprintf+0x2d0>
    586e:	8f ee       	ldi	r24, 0xEF	; 239
    5870:	f8 22       	and	r15, r24
    5872:	02 c0       	rjmp	.+4      	; 0x5878 <vfprintf+0x2d0>
    5874:	1d 2d       	mov	r17, r13
    5876:	01 c0       	rjmp	.+2      	; 0x587a <vfprintf+0x2d2>
    5878:	19 2d       	mov	r17, r9
    587a:	f4 fe       	sbrs	r15, 4
    587c:	0d c0       	rjmp	.+26     	; 0x5898 <vfprintf+0x2f0>
    587e:	fe 01       	movw	r30, r28
    5880:	ed 0d       	add	r30, r13
    5882:	f1 1d       	adc	r31, r1
    5884:	80 81       	ld	r24, Z
    5886:	80 33       	cpi	r24, 0x30	; 48
    5888:	19 f4       	brne	.+6      	; 0x5890 <vfprintf+0x2e8>
    588a:	99 ee       	ldi	r25, 0xE9	; 233
    588c:	f9 22       	and	r15, r25
    588e:	08 c0       	rjmp	.+16     	; 0x58a0 <vfprintf+0x2f8>
    5890:	1f 5f       	subi	r17, 0xFF	; 255
    5892:	f2 fe       	sbrs	r15, 2
    5894:	05 c0       	rjmp	.+10     	; 0x58a0 <vfprintf+0x2f8>
    5896:	03 c0       	rjmp	.+6      	; 0x589e <vfprintf+0x2f6>
    5898:	8f 2d       	mov	r24, r15
    589a:	86 78       	andi	r24, 0x86	; 134
    589c:	09 f0       	breq	.+2      	; 0x58a0 <vfprintf+0x2f8>
    589e:	1f 5f       	subi	r17, 0xFF	; 255
    58a0:	0f 2d       	mov	r16, r15
    58a2:	f3 fc       	sbrc	r15, 3
    58a4:	14 c0       	rjmp	.+40     	; 0x58ce <vfprintf+0x326>
    58a6:	f0 fe       	sbrs	r15, 0
    58a8:	0f c0       	rjmp	.+30     	; 0x58c8 <vfprintf+0x320>
    58aa:	1e 15       	cp	r17, r14
    58ac:	10 f0       	brcs	.+4      	; 0x58b2 <vfprintf+0x30a>
    58ae:	9d 2c       	mov	r9, r13
    58b0:	0b c0       	rjmp	.+22     	; 0x58c8 <vfprintf+0x320>
    58b2:	9d 2c       	mov	r9, r13
    58b4:	9e 0c       	add	r9, r14
    58b6:	91 1a       	sub	r9, r17
    58b8:	1e 2d       	mov	r17, r14
    58ba:	06 c0       	rjmp	.+12     	; 0x58c8 <vfprintf+0x320>
    58bc:	80 e2       	ldi	r24, 0x20	; 32
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	b3 01       	movw	r22, r6
    58c2:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    58c6:	1f 5f       	subi	r17, 0xFF	; 255
    58c8:	1e 15       	cp	r17, r14
    58ca:	c0 f3       	brcs	.-16     	; 0x58bc <vfprintf+0x314>
    58cc:	04 c0       	rjmp	.+8      	; 0x58d6 <vfprintf+0x32e>
    58ce:	1e 15       	cp	r17, r14
    58d0:	10 f4       	brcc	.+4      	; 0x58d6 <vfprintf+0x32e>
    58d2:	e1 1a       	sub	r14, r17
    58d4:	01 c0       	rjmp	.+2      	; 0x58d8 <vfprintf+0x330>
    58d6:	ee 24       	eor	r14, r14
    58d8:	04 ff       	sbrs	r16, 4
    58da:	0f c0       	rjmp	.+30     	; 0x58fa <vfprintf+0x352>
    58dc:	80 e3       	ldi	r24, 0x30	; 48
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	b3 01       	movw	r22, r6
    58e2:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    58e6:	02 ff       	sbrs	r16, 2
    58e8:	1d c0       	rjmp	.+58     	; 0x5924 <vfprintf+0x37c>
    58ea:	01 fd       	sbrc	r16, 1
    58ec:	03 c0       	rjmp	.+6      	; 0x58f4 <vfprintf+0x34c>
    58ee:	88 e7       	ldi	r24, 0x78	; 120
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	0e c0       	rjmp	.+28     	; 0x5910 <vfprintf+0x368>
    58f4:	88 e5       	ldi	r24, 0x58	; 88
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	0b c0       	rjmp	.+22     	; 0x5910 <vfprintf+0x368>
    58fa:	80 2f       	mov	r24, r16
    58fc:	86 78       	andi	r24, 0x86	; 134
    58fe:	91 f0       	breq	.+36     	; 0x5924 <vfprintf+0x37c>
    5900:	01 ff       	sbrs	r16, 1
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <vfprintf+0x360>
    5904:	8b e2       	ldi	r24, 0x2B	; 43
    5906:	01 c0       	rjmp	.+2      	; 0x590a <vfprintf+0x362>
    5908:	80 e2       	ldi	r24, 0x20	; 32
    590a:	f7 fc       	sbrc	r15, 7
    590c:	8d e2       	ldi	r24, 0x2D	; 45
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	b3 01       	movw	r22, r6
    5912:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    5916:	06 c0       	rjmp	.+12     	; 0x5924 <vfprintf+0x37c>
    5918:	80 e3       	ldi	r24, 0x30	; 48
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	b3 01       	movw	r22, r6
    591e:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    5922:	9a 94       	dec	r9
    5924:	d9 14       	cp	r13, r9
    5926:	c0 f3       	brcs	.-16     	; 0x5918 <vfprintf+0x370>
    5928:	da 94       	dec	r13
    592a:	f1 01       	movw	r30, r2
    592c:	ed 0d       	add	r30, r13
    592e:	f1 1d       	adc	r31, r1
    5930:	80 81       	ld	r24, Z
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	b3 01       	movw	r22, r6
    5936:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    593a:	dd 20       	and	r13, r13
    593c:	a9 f7       	brne	.-22     	; 0x5928 <vfprintf+0x380>
    593e:	06 c0       	rjmp	.+12     	; 0x594c <vfprintf+0x3a4>
    5940:	80 e2       	ldi	r24, 0x20	; 32
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	b3 01       	movw	r22, r6
    5946:	0e 94 df 2c 	call	0x59be	; 0x59be <fputc>
    594a:	ea 94       	dec	r14
    594c:	ee 20       	and	r14, r14
    594e:	c1 f7       	brne	.-16     	; 0x5940 <vfprintf+0x398>
    5950:	43 ce       	rjmp	.-890    	; 0x55d8 <vfprintf+0x30>
    5952:	f3 01       	movw	r30, r6
    5954:	66 81       	ldd	r22, Z+6	; 0x06
    5956:	77 81       	ldd	r23, Z+7	; 0x07
    5958:	cb 01       	movw	r24, r22
    595a:	2b 96       	adiw	r28, 0x0b	; 11
    595c:	e2 e1       	ldi	r30, 0x12	; 18
    595e:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <__epilogue_restores__>

00005962 <__eerd_byte_m32>:
    5962:	e1 99       	sbic	0x1c, 1	; 28
    5964:	fe cf       	rjmp	.-4      	; 0x5962 <__eerd_byte_m32>
    5966:	9f bb       	out	0x1f, r25	; 31
    5968:	8e bb       	out	0x1e, r24	; 30
    596a:	e0 9a       	sbi	0x1c, 0	; 28
    596c:	99 27       	eor	r25, r25
    596e:	8d b3       	in	r24, 0x1d	; 29
    5970:	08 95       	ret

00005972 <__eewr_byte_m32>:
    5972:	26 2f       	mov	r18, r22

00005974 <__eewr_r18_m32>:
    5974:	e1 99       	sbic	0x1c, 1	; 28
    5976:	fe cf       	rjmp	.-4      	; 0x5974 <__eewr_r18_m32>
    5978:	9f bb       	out	0x1f, r25	; 31
    597a:	8e bb       	out	0x1e, r24	; 30
    597c:	2d bb       	out	0x1d, r18	; 29
    597e:	0f b6       	in	r0, 0x3f	; 63
    5980:	f8 94       	cli
    5982:	e2 9a       	sbi	0x1c, 2	; 28
    5984:	e1 9a       	sbi	0x1c, 1	; 28
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	01 96       	adiw	r24, 0x01	; 1
    598a:	08 95       	ret

0000598c <__ctype_isfalse>:
    598c:	99 27       	eor	r25, r25
    598e:	88 27       	eor	r24, r24

00005990 <__ctype_istrue>:
    5990:	08 95       	ret

00005992 <strnlen_P>:
    5992:	fc 01       	movw	r30, r24
    5994:	05 90       	lpm	r0, Z+
    5996:	61 50       	subi	r22, 0x01	; 1
    5998:	70 40       	sbci	r23, 0x00	; 0
    599a:	01 10       	cpse	r0, r1
    599c:	d8 f7       	brcc	.-10     	; 0x5994 <strnlen_P+0x2>
    599e:	80 95       	com	r24
    59a0:	90 95       	com	r25
    59a2:	8e 0f       	add	r24, r30
    59a4:	9f 1f       	adc	r25, r31
    59a6:	08 95       	ret

000059a8 <strnlen>:
    59a8:	fc 01       	movw	r30, r24
    59aa:	61 50       	subi	r22, 0x01	; 1
    59ac:	70 40       	sbci	r23, 0x00	; 0
    59ae:	01 90       	ld	r0, Z+
    59b0:	01 10       	cpse	r0, r1
    59b2:	d8 f7       	brcc	.-10     	; 0x59aa <strnlen+0x2>
    59b4:	80 95       	com	r24
    59b6:	90 95       	com	r25
    59b8:	8e 0f       	add	r24, r30
    59ba:	9f 1f       	adc	r25, r31
    59bc:	08 95       	ret

000059be <fputc>:
    59be:	0f 93       	push	r16
    59c0:	1f 93       	push	r17
    59c2:	cf 93       	push	r28
    59c4:	df 93       	push	r29
    59c6:	8c 01       	movw	r16, r24
    59c8:	eb 01       	movw	r28, r22
    59ca:	8b 81       	ldd	r24, Y+3	; 0x03
    59cc:	81 ff       	sbrs	r24, 1
    59ce:	1b c0       	rjmp	.+54     	; 0x5a06 <fputc+0x48>
    59d0:	82 ff       	sbrs	r24, 2
    59d2:	0d c0       	rjmp	.+26     	; 0x59ee <fputc+0x30>
    59d4:	2e 81       	ldd	r18, Y+6	; 0x06
    59d6:	3f 81       	ldd	r19, Y+7	; 0x07
    59d8:	8c 81       	ldd	r24, Y+4	; 0x04
    59da:	9d 81       	ldd	r25, Y+5	; 0x05
    59dc:	28 17       	cp	r18, r24
    59de:	39 07       	cpc	r19, r25
    59e0:	64 f4       	brge	.+24     	; 0x59fa <fputc+0x3c>
    59e2:	e8 81       	ld	r30, Y
    59e4:	f9 81       	ldd	r31, Y+1	; 0x01
    59e6:	01 93       	st	Z+, r16
    59e8:	f9 83       	std	Y+1, r31	; 0x01
    59ea:	e8 83       	st	Y, r30
    59ec:	06 c0       	rjmp	.+12     	; 0x59fa <fputc+0x3c>
    59ee:	e8 85       	ldd	r30, Y+8	; 0x08
    59f0:	f9 85       	ldd	r31, Y+9	; 0x09
    59f2:	80 2f       	mov	r24, r16
    59f4:	09 95       	icall
    59f6:	89 2b       	or	r24, r25
    59f8:	31 f4       	brne	.+12     	; 0x5a06 <fputc+0x48>
    59fa:	8e 81       	ldd	r24, Y+6	; 0x06
    59fc:	9f 81       	ldd	r25, Y+7	; 0x07
    59fe:	01 96       	adiw	r24, 0x01	; 1
    5a00:	9f 83       	std	Y+7, r25	; 0x07
    5a02:	8e 83       	std	Y+6, r24	; 0x06
    5a04:	02 c0       	rjmp	.+4      	; 0x5a0a <fputc+0x4c>
    5a06:	0f ef       	ldi	r16, 0xFF	; 255
    5a08:	1f ef       	ldi	r17, 0xFF	; 255
    5a0a:	c8 01       	movw	r24, r16
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	1f 91       	pop	r17
    5a12:	0f 91       	pop	r16
    5a14:	08 95       	ret

00005a16 <__ultoa_invert>:
    5a16:	fa 01       	movw	r30, r20
    5a18:	aa 27       	eor	r26, r26
    5a1a:	28 30       	cpi	r18, 0x08	; 8
    5a1c:	51 f1       	breq	.+84     	; 0x5a72 <__ultoa_invert+0x5c>
    5a1e:	20 31       	cpi	r18, 0x10	; 16
    5a20:	81 f1       	breq	.+96     	; 0x5a82 <__ultoa_invert+0x6c>
    5a22:	e8 94       	clt
    5a24:	6f 93       	push	r22
    5a26:	6e 7f       	andi	r22, 0xFE	; 254
    5a28:	6e 5f       	subi	r22, 0xFE	; 254
    5a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	af 4f       	sbci	r26, 0xFF	; 255
    5a32:	b1 e0       	ldi	r27, 0x01	; 1
    5a34:	3e d0       	rcall	.+124    	; 0x5ab2 <__ultoa_invert+0x9c>
    5a36:	b4 e0       	ldi	r27, 0x04	; 4
    5a38:	3c d0       	rcall	.+120    	; 0x5ab2 <__ultoa_invert+0x9c>
    5a3a:	67 0f       	add	r22, r23
    5a3c:	78 1f       	adc	r23, r24
    5a3e:	89 1f       	adc	r24, r25
    5a40:	9a 1f       	adc	r25, r26
    5a42:	a1 1d       	adc	r26, r1
    5a44:	68 0f       	add	r22, r24
    5a46:	79 1f       	adc	r23, r25
    5a48:	8a 1f       	adc	r24, r26
    5a4a:	91 1d       	adc	r25, r1
    5a4c:	a1 1d       	adc	r26, r1
    5a4e:	6a 0f       	add	r22, r26
    5a50:	71 1d       	adc	r23, r1
    5a52:	81 1d       	adc	r24, r1
    5a54:	91 1d       	adc	r25, r1
    5a56:	a1 1d       	adc	r26, r1
    5a58:	20 d0       	rcall	.+64     	; 0x5a9a <__ultoa_invert+0x84>
    5a5a:	09 f4       	brne	.+2      	; 0x5a5e <__ultoa_invert+0x48>
    5a5c:	68 94       	set
    5a5e:	3f 91       	pop	r19
    5a60:	2a e0       	ldi	r18, 0x0A	; 10
    5a62:	26 9f       	mul	r18, r22
    5a64:	11 24       	eor	r1, r1
    5a66:	30 19       	sub	r19, r0
    5a68:	30 5d       	subi	r19, 0xD0	; 208
    5a6a:	31 93       	st	Z+, r19
    5a6c:	de f6       	brtc	.-74     	; 0x5a24 <__ultoa_invert+0xe>
    5a6e:	cf 01       	movw	r24, r30
    5a70:	08 95       	ret
    5a72:	46 2f       	mov	r20, r22
    5a74:	47 70       	andi	r20, 0x07	; 7
    5a76:	40 5d       	subi	r20, 0xD0	; 208
    5a78:	41 93       	st	Z+, r20
    5a7a:	b3 e0       	ldi	r27, 0x03	; 3
    5a7c:	0f d0       	rcall	.+30     	; 0x5a9c <__ultoa_invert+0x86>
    5a7e:	c9 f7       	brne	.-14     	; 0x5a72 <__ultoa_invert+0x5c>
    5a80:	f6 cf       	rjmp	.-20     	; 0x5a6e <__ultoa_invert+0x58>
    5a82:	46 2f       	mov	r20, r22
    5a84:	4f 70       	andi	r20, 0x0F	; 15
    5a86:	40 5d       	subi	r20, 0xD0	; 208
    5a88:	4a 33       	cpi	r20, 0x3A	; 58
    5a8a:	18 f0       	brcs	.+6      	; 0x5a92 <__ultoa_invert+0x7c>
    5a8c:	49 5d       	subi	r20, 0xD9	; 217
    5a8e:	31 fd       	sbrc	r19, 1
    5a90:	40 52       	subi	r20, 0x20	; 32
    5a92:	41 93       	st	Z+, r20
    5a94:	02 d0       	rcall	.+4      	; 0x5a9a <__ultoa_invert+0x84>
    5a96:	a9 f7       	brne	.-22     	; 0x5a82 <__ultoa_invert+0x6c>
    5a98:	ea cf       	rjmp	.-44     	; 0x5a6e <__ultoa_invert+0x58>
    5a9a:	b4 e0       	ldi	r27, 0x04	; 4
    5a9c:	a6 95       	lsr	r26
    5a9e:	97 95       	ror	r25
    5aa0:	87 95       	ror	r24
    5aa2:	77 95       	ror	r23
    5aa4:	67 95       	ror	r22
    5aa6:	ba 95       	dec	r27
    5aa8:	c9 f7       	brne	.-14     	; 0x5a9c <__ultoa_invert+0x86>
    5aaa:	00 97       	sbiw	r24, 0x00	; 0
    5aac:	61 05       	cpc	r22, r1
    5aae:	71 05       	cpc	r23, r1
    5ab0:	08 95       	ret
    5ab2:	9b 01       	movw	r18, r22
    5ab4:	ac 01       	movw	r20, r24
    5ab6:	0a 2e       	mov	r0, r26
    5ab8:	06 94       	lsr	r0
    5aba:	57 95       	ror	r21
    5abc:	47 95       	ror	r20
    5abe:	37 95       	ror	r19
    5ac0:	27 95       	ror	r18
    5ac2:	ba 95       	dec	r27
    5ac4:	c9 f7       	brne	.-14     	; 0x5ab8 <__ultoa_invert+0xa2>
    5ac6:	62 0f       	add	r22, r18
    5ac8:	73 1f       	adc	r23, r19
    5aca:	84 1f       	adc	r24, r20
    5acc:	95 1f       	adc	r25, r21
    5ace:	a0 1d       	adc	r26, r0
    5ad0:	08 95       	ret

00005ad2 <__mulsi3>:
    5ad2:	62 9f       	mul	r22, r18
    5ad4:	d0 01       	movw	r26, r0
    5ad6:	73 9f       	mul	r23, r19
    5ad8:	f0 01       	movw	r30, r0
    5ada:	82 9f       	mul	r24, r18
    5adc:	e0 0d       	add	r30, r0
    5ade:	f1 1d       	adc	r31, r1
    5ae0:	64 9f       	mul	r22, r20
    5ae2:	e0 0d       	add	r30, r0
    5ae4:	f1 1d       	adc	r31, r1
    5ae6:	92 9f       	mul	r25, r18
    5ae8:	f0 0d       	add	r31, r0
    5aea:	83 9f       	mul	r24, r19
    5aec:	f0 0d       	add	r31, r0
    5aee:	74 9f       	mul	r23, r20
    5af0:	f0 0d       	add	r31, r0
    5af2:	65 9f       	mul	r22, r21
    5af4:	f0 0d       	add	r31, r0
    5af6:	99 27       	eor	r25, r25
    5af8:	72 9f       	mul	r23, r18
    5afa:	b0 0d       	add	r27, r0
    5afc:	e1 1d       	adc	r30, r1
    5afe:	f9 1f       	adc	r31, r25
    5b00:	63 9f       	mul	r22, r19
    5b02:	b0 0d       	add	r27, r0
    5b04:	e1 1d       	adc	r30, r1
    5b06:	f9 1f       	adc	r31, r25
    5b08:	bd 01       	movw	r22, r26
    5b0a:	cf 01       	movw	r24, r30
    5b0c:	11 24       	eor	r1, r1
    5b0e:	08 95       	ret

00005b10 <__udivmodsi4>:
    5b10:	a1 e2       	ldi	r26, 0x21	; 33
    5b12:	1a 2e       	mov	r1, r26
    5b14:	aa 1b       	sub	r26, r26
    5b16:	bb 1b       	sub	r27, r27
    5b18:	fd 01       	movw	r30, r26
    5b1a:	0d c0       	rjmp	.+26     	; 0x5b36 <__udivmodsi4_ep>

00005b1c <__udivmodsi4_loop>:
    5b1c:	aa 1f       	adc	r26, r26
    5b1e:	bb 1f       	adc	r27, r27
    5b20:	ee 1f       	adc	r30, r30
    5b22:	ff 1f       	adc	r31, r31
    5b24:	a2 17       	cp	r26, r18
    5b26:	b3 07       	cpc	r27, r19
    5b28:	e4 07       	cpc	r30, r20
    5b2a:	f5 07       	cpc	r31, r21
    5b2c:	20 f0       	brcs	.+8      	; 0x5b36 <__udivmodsi4_ep>
    5b2e:	a2 1b       	sub	r26, r18
    5b30:	b3 0b       	sbc	r27, r19
    5b32:	e4 0b       	sbc	r30, r20
    5b34:	f5 0b       	sbc	r31, r21

00005b36 <__udivmodsi4_ep>:
    5b36:	66 1f       	adc	r22, r22
    5b38:	77 1f       	adc	r23, r23
    5b3a:	88 1f       	adc	r24, r24
    5b3c:	99 1f       	adc	r25, r25
    5b3e:	1a 94       	dec	r1
    5b40:	69 f7       	brne	.-38     	; 0x5b1c <__udivmodsi4_loop>
    5b42:	60 95       	com	r22
    5b44:	70 95       	com	r23
    5b46:	80 95       	com	r24
    5b48:	90 95       	com	r25
    5b4a:	9b 01       	movw	r18, r22
    5b4c:	ac 01       	movw	r20, r24
    5b4e:	bd 01       	movw	r22, r26
    5b50:	cf 01       	movw	r24, r30
    5b52:	08 95       	ret

00005b54 <_exit>:
    5b54:	f8 94       	cli

00005b56 <__stop_program>:
    5b56:	ff cf       	rjmp	.-2      	; 0x5b56 <__stop_program>
