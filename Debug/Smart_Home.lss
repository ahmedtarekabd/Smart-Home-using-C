
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000226  00800060  00004e64  00004ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800286  00800286  0000511e  2**0
                  ALLOC
  3 .stab         000063a8  00000000  00000000  00005120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000033ba  00000000  00000000  0000b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e882  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ea42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ec56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00012736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00013f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 24 	jmp	0x488c	; 0x488c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 24 	jmp	0x488c	; 0x488c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6a 24 	jmp	0x48d4	; 0x48d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6b 24 	jmp	0x48d6	; 0x48d6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 56 24 	jmp	0x48ac	; 0x48ac <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 72 24 	jmp	0x48e4	; 0x48e4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 6a 24 	jmp	0x48d4	; 0x48d4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	eb 58       	subi	r30, 0x8B	; 139
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <main>:
void setup();
void loop();


void main(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62

//	PORTA = 0xff;

	LCD_init();
     ef2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_init>
     ef6:	ff cf       	rjmp	.-2      	; 0xef6 <main+0xc>

00000ef8 <setup>:
	}

}

void setup()
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62

	Watchdog_OFF();
     f00:	0e 94 9f 1a 	call	0x353e	; 0x353e <Watchdog_OFF>
	LCD_init();
     f04:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_init>
	Keypad_keypadInit();
     f08:	0e 94 c3 14 	call	0x2986	; 0x2986 <Keypad_keypadInit>
	EEPROM_Init();
     f0c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <EEPROM_Init>
	HC05_Init();
     f10:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <HC05_Init>
	Buzzer_init();
     f14:	0e 94 26 1a 	call	0x344c	; 0x344c <Buzzer_init>
	LM35_Init();
     f18:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LM35_Init>
	DCMotor_Init(DCMOTOR_1);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0e 94 43 19 	call	0x3286	; 0x3286 <DCMotor_Init>

	login();
     f22:	0e 94 b9 0b 	call	0x1772	; 0x1772 <login>

}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <loop>:



void loop()
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62

	// Get Command
	// Execute

	/*	Admin Mode 	*/
	if (HC05_IsConnected())
     f34:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <HC05_IsConnected>
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <loop+0x12>
     f3c:	53 c0       	rjmp	.+166    	; 0xfe4 <loop+0xb8>
	{

		// 6 Lamps
		HC05_ReceiveString(input, 2);
     f3e:	8f e9       	ldi	r24, 0x9F	; 159
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	0e 94 81 16 	call	0x2d02	; 0x2d02 <HC05_ReceiveString>
		/*	Admin Mode 	*/
		if (strcmp(input, "1") == 0)
     f48:	8f e9       	ldi	r24, 0x9F	; 159
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	20 e6       	ldi	r18, 0x60	; 96
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	21 f4       	brne	.+8      	; 0xf62 <loop+0x36>
		{

			// Relay 1 On function
			Relay_toogle(Relay_1);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
     f60:	86 c0       	rjmp	.+268    	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "2") == 0)
     f62:	8f e9       	ldi	r24, 0x9F	; 159
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	22 e6       	ldi	r18, 0x62	; 98
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	b9 01       	movw	r22, r18
     f6c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	21 f4       	brne	.+8      	; 0xf7c <loop+0x50>
		{

			// Relay 2 On function
			Relay_toogle(Relay_2);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
     f7a:	79 c0       	rjmp	.+242    	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "3") == 0)
     f7c:	8f e9       	ldi	r24, 0x9F	; 159
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	24 e6       	ldi	r18, 0x64	; 100
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	b9 01       	movw	r22, r18
     f86:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	21 f4       	brne	.+8      	; 0xf96 <loop+0x6a>
		{

			// Relay 3 On function
			Relay_toogle(Relay_3);
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
     f94:	6c c0       	rjmp	.+216    	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "4") == 0)
     f96:	8f e9       	ldi	r24, 0x9F	; 159
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	26 e6       	ldi	r18, 0x66	; 102
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	b9 01       	movw	r22, r18
     fa0:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <loop+0x84>
		{

			// Relay 4 On function
			Relay_toogle(Relay_4);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
     fae:	5f c0       	rjmp	.+190    	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "5") == 0)
     fb0:	8f e9       	ldi	r24, 0x9F	; 159
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	28 e6       	ldi	r18, 0x68	; 104
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	b9 01       	movw	r22, r18
     fba:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	21 f4       	brne	.+8      	; 0xfca <loop+0x9e>
		{

			// Relay 5 On function
			Relay_toogle(Relay_5);
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
     fc8:	52 c0       	rjmp	.+164    	; 0x106e <loop+0x142>

		}
		// Repeat until lamp 6

		// Door
		else if (strcmp(input, "7") == 0)
     fca:	8f e9       	ldi	r24, 0x9F	; 159
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	2a e6       	ldi	r18, 0x6A	; 106
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	09 f0       	breq	.+2      	; 0xfde <loop+0xb2>
     fdc:	48 c0       	rjmp	.+144    	; 0x106e <loop+0x142>
		{

			// switch servo
			Door_Toogle();
     fde:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <Door_Toogle>
     fe2:	45 c0       	rjmp	.+138    	; 0x106e <loop+0x142>
	/*	User Mode 	*/
	else
	{


		Keypad_GetString(input, 2);
     fe4:	8f e9       	ldi	r24, 0x9F	; 159
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	62 e0       	ldi	r22, 0x02	; 2
     fea:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Keypad_GetString>
		// 6 Lamps
		if (strcmp(input, "1") == 0)
     fee:	8f e9       	ldi	r24, 0x9F	; 159
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	20 e6       	ldi	r18, 0x60	; 96
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	21 f4       	brne	.+8      	; 0x1008 <loop+0xdc>
		{

			// Relay 1 On function
			Relay_toogle(Relay_1);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
    1006:	33 c0       	rjmp	.+102    	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "2") == 0)
    1008:	8f e9       	ldi	r24, 0x9F	; 159
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	22 e6       	ldi	r18, 0x62	; 98
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	b9 01       	movw	r22, r18
    1012:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	21 f4       	brne	.+8      	; 0x1022 <loop+0xf6>
		{

			// Relay 2 On function
			Relay_toogle(Relay_2);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
    1020:	26 c0       	rjmp	.+76     	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "3") == 0)
    1022:	8f e9       	ldi	r24, 0x9F	; 159
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	24 e6       	ldi	r18, 0x64	; 100
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	b9 01       	movw	r22, r18
    102c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	21 f4       	brne	.+8      	; 0x103c <loop+0x110>
		{

			// Relay 3 On function
			Relay_toogle(Relay_3);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
    103a:	19 c0       	rjmp	.+50     	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "4") == 0)
    103c:	8f e9       	ldi	r24, 0x9F	; 159
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	26 e6       	ldi	r18, 0x66	; 102
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	b9 01       	movw	r22, r18
    1046:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	21 f4       	brne	.+8      	; 0x1056 <loop+0x12a>
		{

			// Relay 4 On function
			Relay_toogle(Relay_4);
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>
    1054:	0c c0       	rjmp	.+24     	; 0x106e <loop+0x142>

		}
		else if (strcmp(input, "5") == 0)
    1056:	8f e9       	ldi	r24, 0x9F	; 159
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	28 e6       	ldi	r18, 0x68	; 104
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	19 f4       	brne	.+6      	; 0x106e <loop+0x142>
		{

			// Relay 5 On function
			Relay_toogle(Relay_5);
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Relay_toogle>


	}

	// AC -> Temp Sensor, DC Motor
	if (LM35_ReadTemperature() > 28)
    106e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LM35_ReadTemperature>
    1072:	8d 31       	cpi	r24, 0x1D	; 29
    1074:	28 f0       	brcs	.+10     	; 0x1080 <loop+0x154>
	{

		// Run dc motor
		DCMotor_Start(DCMOTOR_1, DCMOTOR_CLOCKWISE);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	0e 94 88 19 	call	0x3310	; 0x3310 <DCMotor_Start>
    107e:	07 c0       	rjmp	.+14     	; 0x108e <loop+0x162>

	}
	else if (LM35_ReadTemperature() < 21)
    1080:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LM35_ReadTemperature>
    1084:	85 31       	cpi	r24, 0x15	; 21
    1086:	18 f4       	brcc	.+6      	; 0x108e <loop+0x162>
	{

		// Stop DC motor
		DCMotor_Stop(DCMOTOR_1);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DCMotor_Stop>

	}

}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <login_getNumberOfUsers>:

#include "Login.h"


static u8 login_getNumberOfUsers()
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62

	return EEPROM_ReadByte(STATUS_PAGE, NUMBER_OF_USERS_DATA_ADDRESS);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <EEPROM_ReadByte>

}
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <login_addUser>:

static boolean login_addUser(u8* username, u8* password)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	28 97       	sbiw	r28, 0x08	; 8
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	9d 83       	std	Y+5, r25	; 0x05
    10c0:	8c 83       	std	Y+4, r24	; 0x04
    10c2:	7f 83       	std	Y+7, r23	; 0x07
    10c4:	6e 83       	std	Y+6, r22	; 0x06

	u8 numOfUsers = login_getNumberOfUsers();
    10c6:	0e 94 4a 08 	call	0x1094	; 0x1094 <login_getNumberOfUsers>
    10ca:	8b 83       	std	Y+3, r24	; 0x03
	u8 pageNumber = EEPROM_PAGE2;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <login_addUser+0x34>

	// Go to the the right page mumber
	while (numOfUsers > MAX_NUMBER_OF_USERS_PER_PAGE)
	{

		numOfUsers -= MAX_NUMBER_OF_USERS_PER_PAGE;
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	8e 50       	subi	r24, 0x0E	; 14
    10d6:	8b 83       	std	Y+3, r24	; 0x03
		pageNumber++;
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8a 83       	std	Y+2, r24	; 0x02

	u8 numOfUsers = login_getNumberOfUsers();
	u8 pageNumber = EEPROM_PAGE2;

	// Go to the the right page mumber
	while (numOfUsers > MAX_NUMBER_OF_USERS_PER_PAGE)
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	8f 30       	cpi	r24, 0x0F	; 15
    10e2:	b8 f7       	brcc	.-18     	; 0x10d2 <login_addUser+0x28>
		pageNumber++;

	}

	// Page out of range
	if (pageNumber > MAX_NUM_OF_PAGES)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	89 30       	cpi	r24, 0x09	; 9
    10e8:	10 f0       	brcs	.+4      	; 0x10ee <login_addUser+0x44>
	{
		return FALSE;
    10ea:	18 86       	std	Y+8, r1	; 0x08
    10ec:	23 c0       	rjmp	.+70     	; 0x1134 <login_addUser+0x8a>
	}

	// Go to data address
	u8 dataAddress = numOfUsers * TOTAL_USER_SIZE;
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	c9 01       	movw	r24, r18
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	89 83       	std	Y+1, r24	; 0x01
	// Add username
	EEPROM_WriteString(pageNumber, dataAddress, username);
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	69 81       	ldd	r22, Y+1	; 0x01
    1116:	a9 01       	movw	r20, r18
    1118:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <EEPROM_WriteString>
	EEPROM_WriteString(pageNumber, dataAddress + USERNAME_SIZE, password);
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	98 2f       	mov	r25, r24
    1120:	97 5f       	subi	r25, 0xF7	; 247
    1122:	2e 81       	ldd	r18, Y+6	; 0x06
    1124:	3f 81       	ldd	r19, Y+7	; 0x07
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	69 2f       	mov	r22, r25
    112a:	a9 01       	movw	r20, r18
    112c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <EEPROM_WriteString>

	return TRUE;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	88 87       	std	Y+8, r24	; 0x08
    1134:	88 85       	ldd	r24, Y+8	; 0x08

}
    1136:	28 96       	adiw	r28, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <login_searchForUsername>:

static void login_searchForUsername()
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62

	EEPROM_Search(username, USERNAME_SIZE);
    1150:	86 e9       	ldi	r24, 0x96	; 150
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	69 e0       	ldi	r22, 0x09	; 9
    1156:	0e 94 ce 18 	call	0x319c	; 0x319c <EEPROM_Search>

}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <loginAdminMode>:

/*	Login/Register	*/
static void loginAdminMode()
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	ed 97       	sbiw	r28, 0x3d	; 61
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61

	u8 trials = 0;
    1174:	1a ae       	std	Y+58, r1	; 0x3a
	u8 userFound = 0;
    1176:	19 ae       	std	Y+57, r1	; 0x39
	// If failed to find: Buzzer on until reset button



	// Prompt for username
	HC05_SendString("Enter Username...");
    1178:	8c e6       	ldi	r24, 0x6C	; 108
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
	HC05_ReceiveString(username, USERNAME_SIZE);
    1180:	86 e9       	ldi	r24, 0x96	; 150
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	69 e0       	ldi	r22, 0x09	; 9
    1186:	0e 94 81 16 	call	0x2d02	; 0x2d02 <HC05_ReceiveString>

	// Check if username exists
	userFound = EEPROM_Search(username, USERNAME_SIZE);
    118a:	86 e9       	ldi	r24, 0x96	; 150
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	69 e0       	ldi	r22, 0x09	; 9
    1190:	0e 94 ce 18 	call	0x319c	; 0x319c <EEPROM_Search>
    1194:	89 af       	std	Y+57, r24	; 0x39
	if ( !userFound )
    1196:	89 ad       	ldd	r24, Y+57	; 0x39
    1198:	88 23       	and	r24, r24
    119a:	09 f0       	breq	.+2      	; 0x119e <loginAdminMode+0x3e>
    119c:	a9 c1       	rjmp	.+850    	; 0x14f0 <loginAdminMode+0x390>
	{


		HC05_SendString("Username not found... Do you want to register? (yes/no)");
    119e:	8e e7       	ldi	r24, 0x7E	; 126
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
		HC05_ReceiveString(response, 3);
    11a6:	ce 01       	movw	r24, r28
    11a8:	cb 96       	adiw	r24, 0x3b	; 59
    11aa:	63 e0       	ldi	r22, 0x03	; 3
    11ac:	0e 94 81 16 	call	0x2d02	; 0x2d02 <HC05_ReceiveString>

		// Anything other than yes
		if ( !( strcmp(response, "yes") == 0) )
    11b0:	ce 01       	movw	r24, r28
    11b2:	cb 96       	adiw	r24, 0x3b	; 59
    11b4:	26 eb       	ldi	r18, 0xB6	; 182
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	b9 01       	movw	r22, r18
    11ba:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <loginAdminMode+0x64>
    11c2:	7a c0       	rjmp	.+244    	; 0x12b8 <loginAdminMode+0x158>
		{

			Buzzer_turnOn();
    11c4:	0e 94 32 1a 	call	0x3464	; 0x3464 <Buzzer_turnOn>
			HC05_SendString("The program will reset in 3 seconds.");
    11c8:	8a eb       	ldi	r24, 0xBA	; 186
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	aa ef       	ldi	r26, 0xFA	; 250
    11d6:	b4 e4       	ldi	r27, 0x44	; 68
    11d8:	8d ab       	std	Y+53, r24	; 0x35
    11da:	9e ab       	std	Y+54, r25	; 0x36
    11dc:	af ab       	std	Y+55, r26	; 0x37
    11de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6d a9       	ldd	r22, Y+53	; 0x35
    11e2:	7e a9       	ldd	r23, Y+54	; 0x36
    11e4:	8f a9       	ldd	r24, Y+55	; 0x37
    11e6:	98 ad       	ldd	r25, Y+56	; 0x38
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	55 e4       	ldi	r21, 0x45	; 69
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	89 ab       	std	Y+49, r24	; 0x31
    11fa:	9a ab       	std	Y+50, r25	; 0x32
    11fc:	ab ab       	std	Y+51, r26	; 0x33
    11fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1200:	69 a9       	ldd	r22, Y+49	; 0x31
    1202:	7a a9       	ldd	r23, Y+50	; 0x32
    1204:	8b a9       	ldd	r24, Y+51	; 0x33
    1206:	9c a9       	ldd	r25, Y+52	; 0x34
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <loginAdminMode+0xc2>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	98 ab       	std	Y+48, r25	; 0x30
    121e:	8f a7       	std	Y+47, r24	; 0x2f
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <loginAdminMode+0x140>
	else if (__tmp > 65535)
    1222:	69 a9       	ldd	r22, Y+49	; 0x31
    1224:	7a a9       	ldd	r23, Y+50	; 0x32
    1226:	8b a9       	ldd	r24, Y+51	; 0x33
    1228:	9c a9       	ldd	r25, Y+52	; 0x34
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <loginAdminMode+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6d a9       	ldd	r22, Y+53	; 0x35
    123c:	7e a9       	ldd	r23, Y+54	; 0x36
    123e:	8f a9       	ldd	r24, Y+55	; 0x37
    1240:	98 ad       	ldd	r25, Y+56	; 0x38
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	98 ab       	std	Y+48, r25	; 0x30
    1260:	8f a7       	std	Y+47, r24	; 0x2f
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <loginAdminMode+0x122>
    1264:	80 e9       	ldi	r24, 0x90	; 144
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9e a7       	std	Y+46, r25	; 0x2e
    126a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    126c:	8d a5       	ldd	r24, Y+45	; 0x2d
    126e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <loginAdminMode+0x110>
    1274:	9e a7       	std	Y+46, r25	; 0x2e
    1276:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	8f a5       	ldd	r24, Y+47	; 0x2f
    127a:	98 a9       	ldd	r25, Y+48	; 0x30
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	98 ab       	std	Y+48, r25	; 0x30
    1280:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	8f a5       	ldd	r24, Y+47	; 0x2f
    1284:	98 a9       	ldd	r25, Y+48	; 0x30
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <loginAdminMode+0x104>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <loginAdminMode+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	69 a9       	ldd	r22, Y+49	; 0x31
    128e:	7a a9       	ldd	r23, Y+50	; 0x32
    1290:	8b a9       	ldd	r24, Y+51	; 0x33
    1292:	9c a9       	ldd	r25, Y+52	; 0x34
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	98 ab       	std	Y+48, r25	; 0x30
    129e:	8f a7       	std	Y+47, r24	; 0x2f
    12a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a2:	98 a9       	ldd	r25, Y+48	; 0x30
    12a4:	9c a7       	std	Y+44, r25	; 0x2c
    12a6:	8b a7       	std	Y+43, r24	; 0x2b
    12a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <loginAdminMode+0x14c>
    12b0:	9c a7       	std	Y+44, r25	; 0x2c
    12b2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			// Reset
			Watchdog_ON();
    12b4:	0e 94 94 1a 	call	0x3528	; 0x3528 <Watchdog_ON>

		}

		// Add a new User
		if (login_addUser(username, password))
    12b8:	86 e9       	ldi	r24, 0x96	; 150
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	2d e8       	ldi	r18, 0x8D	; 141
    12be:	32 e0       	ldi	r19, 0x02	; 2
    12c0:	b9 01       	movw	r22, r18
    12c2:	0e 94 55 08 	call	0x10aa	; 0x10aa <login_addUser>
    12c6:	88 23       	and	r24, r24
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <loginAdminMode+0x174>
		{

			HC05_SendString("Username Registered and logged in...");
    12ca:	8f ed       	ldi	r24, 0xDF	; 223
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
    12d2:	94 c1       	rjmp	.+808    	; 0x15fc <loginAdminMode+0x49c>

		}
		else
		{

			HC05_SendString("Max number of users registered");
    12d4:	84 e0       	ldi	r24, 0x04	; 4
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
			// Reset
			Buzzer_turnOn();
    12dc:	0e 94 32 1a 	call	0x3464	; 0x3464 <Buzzer_turnOn>
			HC05_SendString("The program will reset in 3 seconds.");
    12e0:	8a eb       	ldi	r24, 0xBA	; 186
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	aa ef       	ldi	r26, 0xFA	; 250
    12ee:	b4 e4       	ldi	r27, 0x44	; 68
    12f0:	8f a3       	std	Y+39, r24	; 0x27
    12f2:	98 a7       	std	Y+40, r25	; 0x28
    12f4:	a9 a7       	std	Y+41, r26	; 0x29
    12f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6f a1       	ldd	r22, Y+39	; 0x27
    12fa:	78 a5       	ldd	r23, Y+40	; 0x28
    12fc:	89 a5       	ldd	r24, Y+41	; 0x29
    12fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	55 e4       	ldi	r21, 0x45	; 69
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8b a3       	std	Y+35, r24	; 0x23
    1312:	9c a3       	std	Y+36, r25	; 0x24
    1314:	ad a3       	std	Y+37, r26	; 0x25
    1316:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1318:	6b a1       	ldd	r22, Y+35	; 0x23
    131a:	7c a1       	ldd	r23, Y+36	; 0x24
    131c:	8d a1       	ldd	r24, Y+37	; 0x25
    131e:	9e a1       	ldd	r25, Y+38	; 0x26
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <loginAdminMode+0x1da>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9a a3       	std	Y+34, r25	; 0x22
    1336:	89 a3       	std	Y+33, r24	; 0x21
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <loginAdminMode+0x258>
	else if (__tmp > 65535)
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <loginAdminMode+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6f a1       	ldd	r22, Y+39	; 0x27
    1354:	78 a5       	ldd	r23, Y+40	; 0x28
    1356:	89 a5       	ldd	r24, Y+41	; 0x29
    1358:	9a a5       	ldd	r25, Y+42	; 0x2a
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9a a3       	std	Y+34, r25	; 0x22
    1378:	89 a3       	std	Y+33, r24	; 0x21
    137a:	0f c0       	rjmp	.+30     	; 0x139a <loginAdminMode+0x23a>
    137c:	80 e9       	ldi	r24, 0x90	; 144
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	98 a3       	std	Y+32, r25	; 0x20
    1382:	8f 8f       	std	Y+31, r24	; 0x1f
    1384:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1386:	98 a1       	ldd	r25, Y+32	; 0x20
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <loginAdminMode+0x228>
    138c:	98 a3       	std	Y+32, r25	; 0x20
    138e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	89 a1       	ldd	r24, Y+33	; 0x21
    1392:	9a a1       	ldd	r25, Y+34	; 0x22
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9a a3       	std	Y+34, r25	; 0x22
    1398:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	89 a1       	ldd	r24, Y+33	; 0x21
    139c:	9a a1       	ldd	r25, Y+34	; 0x22
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <loginAdminMode+0x21c>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <loginAdminMode+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6b a1       	ldd	r22, Y+35	; 0x23
    13a6:	7c a1       	ldd	r23, Y+36	; 0x24
    13a8:	8d a1       	ldd	r24, Y+37	; 0x25
    13aa:	9e a1       	ldd	r25, Y+38	; 0x26
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9a a3       	std	Y+34, r25	; 0x22
    13b6:	89 a3       	std	Y+33, r24	; 0x21
    13b8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ba:	9a a1       	ldd	r25, Y+34	; 0x22
    13bc:	9e 8f       	std	Y+30, r25	; 0x1e
    13be:	8d 8f       	std	Y+29, r24	; 0x1d
    13c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <loginAdminMode+0x264>
    13c8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ca:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			// Reset
			Watchdog_ON();
    13cc:	0e 94 94 1a 	call	0x3528	; 0x3528 <Watchdog_ON>
    13d0:	15 c1       	rjmp	.+554    	; 0x15fc <loginAdminMode+0x49c>
	{

		while (trials != MAX_LOGIN_TRIALS)
		{

			HC05_SendString("Enter Password...");
    13d2:	83 e2       	ldi	r24, 0x23	; 35
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
			HC05_ReceiveString(password, PASSWORD_SIZE);
    13da:	8d e8       	ldi	r24, 0x8D	; 141
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	69 e0       	ldi	r22, 0x09	; 9
    13e0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <HC05_ReceiveString>

			if (!EEPROM_Search(password, PASSWORD_SIZE))
    13e4:	8d e8       	ldi	r24, 0x8D	; 141
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	69 e0       	ldi	r22, 0x09	; 9
    13ea:	0e 94 ce 18 	call	0x319c	; 0x319c <EEPROM_Search>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	41 f4       	brne	.+16     	; 0x1402 <loginAdminMode+0x2a2>
			{

				HC05_SendString("Wrong Password...");
    13f2:	85 e3       	ldi	r24, 0x35	; 53
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
				trials++;
    13fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	8a af       	std	Y+58, r24	; 0x3a
    1400:	77 c0       	rjmp	.+238    	; 0x14f0 <loginAdminMode+0x390>

			}
			else
			{

				HC05_SendString("Logging in...");
    1402:	87 e4       	ldi	r24, 0x47	; 71
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	aa e7       	ldi	r26, 0x7A	; 122
    1410:	b4 e4       	ldi	r27, 0x44	; 68
    1412:	89 8f       	std	Y+25, r24	; 0x19
    1414:	9a 8f       	std	Y+26, r25	; 0x1a
    1416:	ab 8f       	std	Y+27, r26	; 0x1b
    1418:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	69 8d       	ldd	r22, Y+25	; 0x19
    141c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a e7       	ldi	r20, 0x7A	; 122
    1428:	55 e4       	ldi	r21, 0x45	; 69
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	8d 8b       	std	Y+21, r24	; 0x15
    1434:	9e 8b       	std	Y+22, r25	; 0x16
    1436:	af 8b       	std	Y+23, r26	; 0x17
    1438:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    143a:	6d 89       	ldd	r22, Y+21	; 0x15
    143c:	7e 89       	ldd	r23, Y+22	; 0x16
    143e:	8f 89       	ldd	r24, Y+23	; 0x17
    1440:	98 8d       	ldd	r25, Y+24	; 0x18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <loginAdminMode+0x2fc>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	3f c0       	rjmp	.+126    	; 0x14da <loginAdminMode+0x37a>
	else if (__tmp > 65535)
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <loginAdminMode+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	69 8d       	ldd	r22, Y+25	; 0x19
    1476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c 8b       	std	Y+20, r25	; 0x14
    149a:	8b 8b       	std	Y+19, r24	; 0x13
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <loginAdminMode+0x35c>
    149e:	80 e9       	ldi	r24, 0x90	; 144
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	9a 8b       	std	Y+18, r25	; 0x12
    14a4:	89 8b       	std	Y+17, r24	; 0x11
    14a6:	89 89       	ldd	r24, Y+17	; 0x11
    14a8:	9a 89       	ldd	r25, Y+18	; 0x12
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <loginAdminMode+0x34a>
    14ae:	9a 8b       	std	Y+18, r25	; 0x12
    14b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	8b 89       	ldd	r24, Y+19	; 0x13
    14b4:	9c 89       	ldd	r25, Y+20	; 0x14
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <loginAdminMode+0x33e>
    14c4:	19 c0       	rjmp	.+50     	; 0x14f8 <loginAdminMode+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	6d 89       	ldd	r22, Y+21	; 0x15
    14c8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9c 8b       	std	Y+20, r25	; 0x14
    14d8:	8b 8b       	std	Y+19, r24	; 0x13
    14da:	8b 89       	ldd	r24, Y+19	; 0x13
    14dc:	9c 89       	ldd	r25, Y+20	; 0x14
    14de:	98 8b       	std	Y+16, r25	; 0x10
    14e0:	8f 87       	std	Y+15, r24	; 0x0f
    14e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e4:	98 89       	ldd	r25, Y+16	; 0x10
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <loginAdminMode+0x386>
    14ea:	98 8b       	std	Y+16, r25	; 0x10
    14ec:	8f 87       	std	Y+15, r24	; 0x0f
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <loginAdminMode+0x398>
	}

	else
	{

		while (trials != MAX_LOGIN_TRIALS)
    14f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <loginAdminMode+0x398>
    14f6:	6d cf       	rjmp	.-294    	; 0x13d2 <loginAdminMode+0x272>

			}

		}

		if (trials == MAX_LOGIN_TRIALS)
    14f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	09 f0       	breq	.+2      	; 0x1500 <loginAdminMode+0x3a0>
    14fe:	7e c0       	rjmp	.+252    	; 0x15fc <loginAdminMode+0x49c>
		{

			HC05_SendString("Max number of trials");
    1500:	85 e5       	ldi	r24, 0x55	; 85
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
			// Reset
			Buzzer_turnOn();
    1508:	0e 94 32 1a 	call	0x3464	; 0x3464 <Buzzer_turnOn>
			HC05_SendString("The program will reset in 3 seconds.");
    150c:	8a eb       	ldi	r24, 0xBA	; 186
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	aa ef       	ldi	r26, 0xFA	; 250
    151a:	b4 e4       	ldi	r27, 0x44	; 68
    151c:	8b 87       	std	Y+11, r24	; 0x0b
    151e:	9c 87       	std	Y+12, r25	; 0x0c
    1520:	ad 87       	std	Y+13, r26	; 0x0d
    1522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a e7       	ldi	r20, 0x7A	; 122
    1532:	55 e4       	ldi	r21, 0x45	; 69
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	a9 87       	std	Y+9, r26	; 0x09
    1542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <loginAdminMode+0x406>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <loginAdminMode+0x484>
	else if (__tmp > 65535)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <loginAdminMode+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <loginAdminMode+0x466>
    15a8:	80 e9       	ldi	r24, 0x90	; 144
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <loginAdminMode+0x454>
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <loginAdminMode+0x448>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <loginAdminMode+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <loginAdminMode+0x490>
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			// Reset
			Watchdog_ON();
    15f8:	0e 94 94 1a 	call	0x3528	; 0x3528 <Watchdog_ON>
		}


	}

}
    15fc:	ed 96       	adiw	r28, 0x3d	; 61
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <loginUserMode>:


/*	Login Only	*/
static void loginUserMode()
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	63 97       	sbiw	r28, 0x13	; 19
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61

	u8 trials = 0;
    1622:	18 8a       	std	Y+16, r1	; 0x10
	u8 userFound = 0;
    1624:	1f 86       	std	Y+15, r1	; 0x0f
    1626:	17 c0       	rjmp	.+46     	; 0x1656 <loginUserMode+0x48>


	while (trials != MAX_LOGIN_TRIALS)
	{

		LCD_displayString("Enter Username...");
    1628:	8c e6       	ldi	r24, 0x6C	; 108
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_displayString>
		Keypad_GetString(username, USERNAME_SIZE);
    1630:	86 e9       	ldi	r24, 0x96	; 150
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	69 e0       	ldi	r22, 0x09	; 9
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Keypad_GetString>
		LCD_displayString("Enter Password...");
    163c:	83 e2       	ldi	r24, 0x23	; 35
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_displayString>
		Keypad_GetString(password, PASSWORD_SIZE);
    1644:	8d e8       	ldi	r24, 0x8D	; 141
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	69 e0       	ldi	r22, 0x09	; 9
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Keypad_GetString>
		trials++;
    1650:	88 89       	ldd	r24, Y+16	; 0x10
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	88 8b       	std	Y+16, r24	; 0x10
	u8 trials = 0;
	u8 userFound = 0;
	u8 response[3];


	while (trials != MAX_LOGIN_TRIALS)
    1656:	88 89       	ldd	r24, Y+16	; 0x10
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	31 f7       	brne	.-52     	; 0x1628 <loginUserMode+0x1a>
		Keypad_GetString(password, PASSWORD_SIZE);
		trials++;

	}

	if (trials == MAX_LOGIN_TRIALS)
    165c:	88 89       	ldd	r24, Y+16	; 0x10
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	09 f0       	breq	.+2      	; 0x1664 <loginUserMode+0x56>
    1662:	7e c0       	rjmp	.+252    	; 0x1760 <loginUserMode+0x152>
	{

		// Press Reset
		Buzzer_turnOn();
    1664:	0e 94 32 1a 	call	0x3464	; 0x3464 <Buzzer_turnOn>
		HC05_SendString("The program will reset in 3 seconds.");
    1668:	8a eb       	ldi	r24, 0xBA	; 186
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HC05_SendString>
		LCD_displayString("The program will reset in 3 seconds.");
    1670:	8a eb       	ldi	r24, 0xBA	; 186
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_displayString>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	aa ef       	ldi	r26, 0xFA	; 250
    167e:	b4 e4       	ldi	r27, 0x44	; 68
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	55 e4       	ldi	r21, 0x45	; 69
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <loginUserMode+0xbc>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <loginUserMode+0x13a>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <loginUserMode+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <loginUserMode+0x11c>
    170c:	80 e9       	ldi	r24, 0x90	; 144
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <loginUserMode+0x10a>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <loginUserMode+0xfe>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <loginUserMode+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <loginUserMode+0x146>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		// Reset
		Watchdog_ON();
    175c:	0e 94 94 1a 	call	0x3528	; 0x3528 <Watchdog_ON>

	}


}
    1760:	63 96       	adiw	r28, 0x13	; 19
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <login>:

void login()
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62

	EEPROM_Init();
    177a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <EEPROM_Init>

	if (HC05_IsConnected())
    177e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <HC05_IsConnected>
    1782:	88 23       	and	r24, r24
    1784:	19 f0       	breq	.+6      	; 0x178c <login+0x1a>
	{

		/*	Admin Mode 	*/
		loginAdminMode();
    1786:	0e 94 b0 08 	call	0x1160	; 0x1160 <loginAdminMode>
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <login+0x1e>
	}
	else
	{

		/*	User Mode 	*/
		loginUserMode();
    178c:	0e 94 07 0b 	call	0x160e	; 0x160e <loginUserMode>

	}

}
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <Door_Init>:
#include "Door.h"

static isOpen = 0;

void Door_Init()
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62

	// Init servo
	Servo_Init();
    179e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Servo_Init>

}
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <Door_Open>:

void Door_Open()
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62

	// Start Servo
	Servo_Start();
    17b0:	0e 94 19 0c 	call	0x1832	; 0x1832 <Servo_Start>

	// Set Angle to 90
	Servo_SetAngle(90);
    17b4:	8a e5       	ldi	r24, 0x5A	; 90
    17b6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Servo_SetAngle>

	// Stop Servo
	Servo_Stop();
    17ba:	0e 94 23 0c 	call	0x1846	; 0x1846 <Servo_Stop>

	isOpen = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	90 93 88 02 	sts	0x0288, r25
    17c6:	80 93 87 02 	sts	0x0287, r24

}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <Door_Close>:

void Door_Close()
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62

	// Start Servo
	Servo_Start();
    17d8:	0e 94 19 0c 	call	0x1832	; 0x1832 <Servo_Start>

	// Set Angle to 0
	Servo_SetAngle(0);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Servo_SetAngle>

	// Stop Servo
	Servo_Stop();
    17e2:	0e 94 23 0c 	call	0x1846	; 0x1846 <Servo_Stop>
	isOpen = 0;
    17e6:	10 92 88 02 	sts	0x0288, r1
    17ea:	10 92 87 02 	sts	0x0287, r1

}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <Door_Toogle>:

void Door_Toogle()
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62

	if (isOpen)
    17fc:	80 91 87 02 	lds	r24, 0x0287
    1800:	90 91 88 02 	lds	r25, 0x0288
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	19 f0       	breq	.+6      	; 0x180e <Door_Toogle+0x1a>
	{

		Door_Close();
    1808:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <Door_Close>
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <Door_Toogle+0x1e>

	}
	else
	{

		Door_Open();
    180e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <Door_Open>

	}

}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <Servo_Init>:

#include "Servo.h"


void Servo_Init()
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62

	// Init timer 1 as fast pwm
	// set frequency to 50
	Timer1_Init(TIMER1_FAST_PWM);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	0e 94 cf 1b 	call	0x379e	; 0x379e <Timer1_Init>
	Timer1_SetFrequency(50);
    1826:	82 e3       	ldi	r24, 0x32	; 50
    1828:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <Timer1_SetFrequency>

}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <Servo_Start>:

void Servo_Start()
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62

	// Set prescaler to 64
	Timer1_Start(TIMER1_BY_64);
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <Timer1_Start>

}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <Servo_Stop>:

void Servo_Stop()
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62

	// Stop timer funnctio (by setting no clock)
	Timer1_Stop();
    184e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <Timer1_Stop>

}
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <Servo_SetAngle>:

void Servo_SetAngle(u8 angle)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <Servo_SetAngle+0x6>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <Servo_SetAngle+0x8>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <Servo_SetAngle+0xa>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8e 83       	std	Y+6, r24	; 0x06

	f32 value = 1 / (( angle * 0.0056 ) + 1);
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	aa 27       	eor	r26, r26
    1870:	97 fd       	sbrc	r25, 7
    1872:	a0 95       	com	r26
    1874:	ba 2f       	mov	r27, r26
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	24 e3       	ldi	r18, 0x34	; 52
    1888:	30 e8       	ldi	r19, 0x80	; 128
    188a:	47 eb       	ldi	r20, 0xB7	; 183
    188c:	5b e3       	ldi	r21, 0x3B	; 59
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9c 01       	movw	r18, r24
    18ac:	ad 01       	movw	r20, r26
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	80 e8       	ldi	r24, 0x80	; 128
    18b4:	9f e3       	ldi	r25, 0x3F	; 63
    18b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	9b 83       	std	Y+3, r25	; 0x03
    18c2:	ac 83       	std	Y+4, r26	; 0x04
    18c4:	bd 83       	std	Y+5, r27	; 0x05

	u8 percentage = (value / 50) * 100;
    18c6:	6a 81       	ldd	r22, Y+2	; 0x02
    18c8:	7b 81       	ldd	r23, Y+3	; 0x03
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	48 e4       	ldi	r20, 0x48	; 72
    18d4:	52 e4       	ldi	r21, 0x42	; 66
    18d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	48 ec       	ldi	r20, 0xC8	; 200
    18e8:	52 e4       	ldi	r21, 0x42	; 66
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	89 83       	std	Y+1, r24	; 0x01

	Timer1_SetDuty(percentage);
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	0e 94 03 1c 	call	0x3806	; 0x3806 <Timer1_SetDuty>

}
    1906:	26 96       	adiw	r28, 0x06	; 6
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <SSD_init>:

#include "SSD.h"


void SSD_init(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);	// En2
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);	// En1
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);	// DP
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	63 e0       	ldi	r22, 0x03	; 3
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);	// A
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	64 e0       	ldi	r22, 0x04	; 4
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);	// B
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	65 e0       	ldi	r22, 0x05	; 5
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);	// C
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	66 e0       	ldi	r22, 0x06	; 6
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);	// D
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <SSD_displayNumber>:


// Total delay of the function
void SSD_displayNumber(u8 number)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	e3 97       	sbiw	r28, 0x33	; 51
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	8b ab       	std	Y+51, r24	; 0x33
    1982:	03 c0       	rjmp	.+6      	; 0x198a <SSD_displayNumber+0x1e>

	// To prevent overflow at 255 -> 0
	while (number >= 100)
		number -= 100;
    1984:	8b a9       	ldd	r24, Y+51	; 0x33
    1986:	84 56       	subi	r24, 0x64	; 100
    1988:	8b ab       	std	Y+51, r24	; 0x33
// Total delay of the function
void SSD_displayNumber(u8 number)
{

	// To prevent overflow at 255 -> 0
	while (number >= 100)
    198a:	8b a9       	ldd	r24, Y+51	; 0x33
    198c:	84 36       	cpi	r24, 0x64	; 100
    198e:	d0 f7       	brcc	.-12     	; 0x1984 <SSD_displayNumber+0x18>
		number -= 100;

	u8 rightDigit = ((number/10) % 10) << 4;
    1990:	8b a9       	ldd	r24, Y+51	; 0x33
    1992:	9a e0       	ldi	r25, 0x0A	; 10
    1994:	69 2f       	mov	r22, r25
    1996:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodqi4>
    199a:	9a e0       	ldi	r25, 0x0A	; 10
    199c:	69 2f       	mov	r22, r25
    199e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodqi4>
    19a2:	89 2f       	mov	r24, r25
    19a4:	82 95       	swap	r24
    19a6:	80 7f       	andi	r24, 0xF0	; 240
    19a8:	8a ab       	std	Y+50, r24	; 0x32
	u8 leftDigit = (number % 10) << 4;
    19aa:	8b a9       	ldd	r24, Y+51	; 0x33
    19ac:	9a e0       	ldi	r25, 0x0A	; 10
    19ae:	69 2f       	mov	r22, r25
    19b0:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodqi4>
    19b4:	89 2f       	mov	r24, r25
    19b6:	82 95       	swap	r24
    19b8:	80 7f       	andi	r24, 0xF0	; 240
    19ba:	89 ab       	std	Y+49, r24	; 0x31

	// Right Digit
	// Enable  SSD 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Disable SSD 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Write the rightDigit
	Dio_writeChanelGroup(DIO_PORTA, rightDigit, SSD_MASK);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	6a a9       	ldd	r22, Y+50	; 0x32
    19d4:	4f e0       	ldi	r20, 0x0F	; 15
    19d6:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <Dio_writeChanelGroup>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	aa ef       	ldi	r26, 0xFA	; 250
    19e0:	b3 e4       	ldi	r27, 0x43	; 67
    19e2:	8d a7       	std	Y+45, r24	; 0x2d
    19e4:	9e a7       	std	Y+46, r25	; 0x2e
    19e6:	af a7       	std	Y+47, r26	; 0x2f
    19e8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19ea:	6d a5       	ldd	r22, Y+45	; 0x2d
    19ec:	7e a5       	ldd	r23, Y+46	; 0x2e
    19ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f0:	98 a9       	ldd	r25, Y+48	; 0x30
    19f2:	2b ea       	ldi	r18, 0xAB	; 171
    19f4:	3a ea       	ldi	r19, 0xAA	; 170
    19f6:	4a ea       	ldi	r20, 0xAA	; 170
    19f8:	50 e4       	ldi	r21, 0x40	; 64
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	89 a7       	std	Y+41, r24	; 0x29
    1a04:	9a a7       	std	Y+42, r25	; 0x2a
    1a06:	ab a7       	std	Y+43, r26	; 0x2b
    1a08:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1a0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	1c f4       	brge	.+6      	; 0x1a28 <SSD_displayNumber+0xbc>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	88 a7       	std	Y+40, r24	; 0x28
    1a26:	91 c0       	rjmp	.+290    	; 0x1b4a <SSD_displayNumber+0x1de>
	else if (__tmp > 255)
    1a28:	69 a5       	ldd	r22, Y+41	; 0x29
    1a2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	53 e4       	ldi	r21, 0x43	; 67
    1a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <SSD_displayNumber+0xd6>
    1a40:	7b c0       	rjmp	.+246    	; 0x1b38 <SSD_displayNumber+0x1cc>
	{
		_delay_ms(__us / 1000.0);
    1a42:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a44:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8c a3       	std	Y+36, r24	; 0x24
    1a5c:	9d a3       	std	Y+37, r25	; 0x25
    1a5e:	ae a3       	std	Y+38, r26	; 0x26
    1a60:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6c a1       	ldd	r22, Y+36	; 0x24
    1a64:	7d a1       	ldd	r23, Y+37	; 0x25
    1a66:	8e a1       	ldd	r24, Y+38	; 0x26
    1a68:	9f a1       	ldd	r25, Y+39	; 0x27
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	55 e4       	ldi	r21, 0x45	; 69
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	88 a3       	std	Y+32, r24	; 0x20
    1a7c:	99 a3       	std	Y+33, r25	; 0x21
    1a7e:	aa a3       	std	Y+34, r26	; 0x22
    1a80:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a82:	68 a1       	ldd	r22, Y+32	; 0x20
    1a84:	79 a1       	ldd	r23, Y+33	; 0x21
    1a86:	8a a1       	ldd	r24, Y+34	; 0x22
    1a88:	9b a1       	ldd	r25, Y+35	; 0x23
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <SSD_displayNumber+0x138>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa0:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <SSD_displayNumber+0x1b6>
	else if (__tmp > 65535)
    1aa4:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa6:	79 a1       	ldd	r23, Y+33	; 0x21
    1aa8:	8a a1       	ldd	r24, Y+34	; 0x22
    1aaa:	9b a1       	ldd	r25, Y+35	; 0x23
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <SSD_displayNumber+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6c a1       	ldd	r22, Y+36	; 0x24
    1abe:	7d a1       	ldd	r23, Y+37	; 0x25
    1ac0:	8e a1       	ldd	r24, Y+38	; 0x26
    1ac2:	9f a1       	ldd	r25, Y+39	; 0x27
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ae2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <SSD_displayNumber+0x198>
    1ae6:	80 e9       	ldi	r24, 0x90	; 144
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	9d 8f       	std	Y+29, r25	; 0x1d
    1aec:	8c 8f       	std	Y+28, r24	; 0x1c
    1aee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1af0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <SSD_displayNumber+0x186>
    1af6:	9d 8f       	std	Y+29, r25	; 0x1d
    1af8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1afc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9f 8f       	std	Y+31, r25	; 0x1f
    1b02:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <SSD_displayNumber+0x17a>
    1b0c:	24 c0       	rjmp	.+72     	; 0x1b56 <SSD_displayNumber+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b10:	79 a1       	ldd	r23, Y+33	; 0x21
    1b12:	8a a1       	ldd	r24, Y+34	; 0x22
    1b14:	9b a1       	ldd	r25, Y+35	; 0x23
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9f 8f       	std	Y+31, r25	; 0x1f
    1b20:	8e 8f       	std	Y+30, r24	; 0x1e
    1b22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b26:	9b 8f       	std	Y+27, r25	; 0x1b
    1b28:	8a 8f       	std	Y+26, r24	; 0x1a
    1b2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <SSD_displayNumber+0x1c2>
    1b32:	9b 8f       	std	Y+27, r25	; 0x1b
    1b34:	8a 8f       	std	Y+26, r24	; 0x1a
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <SSD_displayNumber+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b38:	69 a5       	ldd	r22, Y+41	; 0x29
    1b3a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	88 a7       	std	Y+40, r24	; 0x28
    1b4a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b4c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b4e:	89 8d       	ldd	r24, Y+25	; 0x19
    1b50:	8a 95       	dec	r24
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <SSD_displayNumber+0x1e4>
    1b54:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	// Left Digit
	// Disable SSD 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Enable  SSD 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Write the leftDigit
	Dio_writeChanelGroup(DIO_PORTA, leftDigit, SSD_MASK);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6e:	4f e0       	ldi	r20, 0x0F	; 15
    1b70:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <Dio_writeChanelGroup>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	aa ef       	ldi	r26, 0xFA	; 250
    1b7a:	b3 e4       	ldi	r27, 0x43	; 67
    1b7c:	8d 8b       	std	Y+21, r24	; 0x15
    1b7e:	9e 8b       	std	Y+22, r25	; 0x16
    1b80:	af 8b       	std	Y+23, r26	; 0x17
    1b82:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b84:	6d 89       	ldd	r22, Y+21	; 0x15
    1b86:	7e 89       	ldd	r23, Y+22	; 0x16
    1b88:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8c:	2b ea       	ldi	r18, 0xAB	; 171
    1b8e:	3a ea       	ldi	r19, 0xAA	; 170
    1b90:	4a ea       	ldi	r20, 0xAA	; 170
    1b92:	50 e4       	ldi	r21, 0x40	; 64
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	89 8b       	std	Y+17, r24	; 0x11
    1b9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ba0:	ab 8b       	std	Y+19, r26	; 0x13
    1ba2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ba4:	69 89       	ldd	r22, Y+17	; 0x11
    1ba6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    1baa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	1c f4       	brge	.+6      	; 0x1bc2 <SSD_displayNumber+0x256>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	88 8b       	std	Y+16, r24	; 0x10
    1bc0:	91 c0       	rjmp	.+290    	; 0x1ce4 <SSD_displayNumber+0x378>
	else if (__tmp > 255)
    1bc2:	69 89       	ldd	r22, Y+17	; 0x11
    1bc4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <SSD_displayNumber+0x270>
    1bda:	7b c0       	rjmp	.+246    	; 0x1cd2 <SSD_displayNumber+0x366>
	{
		_delay_ms(__us / 1000.0);
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a e7       	ldi	r20, 0x7A	; 122
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	8c 87       	std	Y+12, r24	; 0x0c
    1bf6:	9d 87       	std	Y+13, r25	; 0x0d
    1bf8:	ae 87       	std	Y+14, r26	; 0x0e
    1bfa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bfe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c00:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c02:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	55 e4       	ldi	r21, 0x45	; 69
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	88 87       	std	Y+8, r24	; 0x08
    1c16:	99 87       	std	Y+9, r25	; 0x09
    1c18:	aa 87       	std	Y+10, r26	; 0x0a
    1c1a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c1c:	68 85       	ldd	r22, Y+8	; 0x08
    1c1e:	79 85       	ldd	r23, Y+9	; 0x09
    1c20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c22:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <SSD_displayNumber+0x2d2>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9f 83       	std	Y+7, r25	; 0x07
    1c3a:	8e 83       	std	Y+6, r24	; 0x06
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <SSD_displayNumber+0x350>
	else if (__tmp > 65535)
    1c3e:	68 85       	ldd	r22, Y+8	; 0x08
    1c40:	79 85       	ldd	r23, Y+9	; 0x09
    1c42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <SSD_displayNumber+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c58:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <SSD_displayNumber+0x332>
    1c80:	80 e9       	ldi	r24, 0x90	; 144
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	9d 83       	std	Y+5, r25	; 0x05
    1c86:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <SSD_displayNumber+0x320>
    1c90:	9d 83       	std	Y+5, r25	; 0x05
    1c92:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	9f 81       	ldd	r25, Y+7	; 0x07
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <SSD_displayNumber+0x314>
    1ca6:	24 c0       	rjmp	.+72     	; 0x1cf0 <SSD_displayNumber+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	68 85       	ldd	r22, Y+8	; 0x08
    1caa:	79 85       	ldd	r23, Y+9	; 0x09
    1cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9f 83       	std	Y+7, r25	; 0x07
    1cba:	8e 83       	std	Y+6, r24	; 0x06
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	9b 83       	std	Y+3, r25	; 0x03
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <SSD_displayNumber+0x35c>
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <SSD_displayNumber+0x384>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd2:	69 89       	ldd	r22, Y+17	; 0x11
    1cd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	88 8b       	std	Y+16, r24	; 0x10
    1ce4:	88 89       	ldd	r24, Y+16	; 0x10
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	8a 95       	dec	r24
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <SSD_displayNumber+0x37e>
    1cee:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);


}
    1cf0:	e3 96       	adiw	r28, 0x33	; 51
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <SSD_displayNumberAndDelay>:

void SSD_displayNumberAndDelay(u8 number, u8 msec)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <SSD_displayNumberAndDelay+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <SSD_displayNumberAndDelay+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	6c 83       	std	Y+4, r22	; 0x04


	// Display function takes about 3 ms

	for (u16 i = 0; i < msec; i++)
    1d12:	1a 82       	std	Y+2, r1	; 0x02
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	08 c0       	rjmp	.+16     	; 0x1d28 <SSD_displayNumberAndDelay+0x26>
	{

		SSD_displayNumber(number);
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	0e 94 b6 0c 	call	0x196c	; 0x196c <SSD_displayNumber>
{


	// Display function takes about 3 ms

	for (u16 i = 0; i < msec; i++)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	82 17       	cp	r24, r18
    1d34:	93 07       	cpc	r25, r19
    1d36:	80 f3       	brcs	.-32     	; 0x1d18 <SSD_displayNumberAndDelay+0x16>

		SSD_displayNumber(number);

	}

}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <Relay_Init>:
 */

#include "Relay.h"

void Relay_Init()
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62

	// Normal Lamps
	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	64 e0       	ldi	r22, 0x04	; 4
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	65 e0       	ldi	r22, 0x05	; 5
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	66 e0       	ldi	r22, 0x06	; 6
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	67 e0       	ldi	r22, 0x07	; 7
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN0, DIO_OUTPUT);
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Dimmer using timer1

}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <Relay_toogle>:

void Relay_toogle(Relay_t T)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <Relay_toogle+0x6>
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01

	switch (T)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3b 83       	std	Y+3, r19	; 0x03
    1d9c:	2a 83       	std	Y+2, r18	; 0x02
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	82 30       	cpi	r24, 0x02	; 2
    1da4:	91 05       	cpc	r25, r1
    1da6:	21 f1       	breq	.+72     	; 0x1df0 <Relay_toogle+0x6a>
    1da8:	2a 81       	ldd	r18, Y+2	; 0x02
    1daa:	3b 81       	ldd	r19, Y+3	; 0x03
    1dac:	23 30       	cpi	r18, 0x03	; 3
    1dae:	31 05       	cpc	r19, r1
    1db0:	54 f4       	brge	.+20     	; 0x1dc6 <Relay_toogle+0x40>
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	89 f0       	breq	.+34     	; 0x1ddc <Relay_toogle+0x56>
    1dba:	2a 81       	ldd	r18, Y+2	; 0x02
    1dbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dbe:	21 30       	cpi	r18, 0x01	; 1
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	89 f0       	breq	.+34     	; 0x1de6 <Relay_toogle+0x60>
    1dc4:	23 c0       	rjmp	.+70     	; 0x1e0c <Relay_toogle+0x86>
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	a9 f0       	breq	.+42     	; 0x1dfa <Relay_toogle+0x74>
    1dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd4:	24 30       	cpi	r18, 0x04	; 4
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	a9 f0       	breq	.+42     	; 0x1e04 <Relay_toogle+0x7e>
    1dda:	18 c0       	rjmp	.+48     	; 0x1e0c <Relay_toogle+0x86>
	{

		case Relay_1:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN1);
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	61 e0       	ldi	r22, 0x01	; 1
    1de0:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1de4:	13 c0       	rjmp	.+38     	; 0x1e0c <Relay_toogle+0x86>
			break;
		}
		case Relay_2:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN2);
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1dee:	0e c0       	rjmp	.+28     	; 0x1e0c <Relay_toogle+0x86>
			break;
		}

		case Relay_3:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN3);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	63 e0       	ldi	r22, 0x03	; 3
    1df4:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <Relay_toogle+0x86>
			break;
		}

		case Relay_4:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN4);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <Relay_toogle+0x86>
			break;
		}

		case Relay_5:
		{
			Dio_flipChanel(DIO_PORTB, DIO_PIN5);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	65 e0       	ldi	r22, 0x05	; 5
    1e08:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
			break;
		}

	}

}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <LM35_Init>:
 */

#include "LM35.h"

void LM35_Init(void)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62


	Dio_configChanel(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	ADC_InitADC();
    1e2a:	0e 94 45 23 	call	0x468a	; 0x468a <ADC_InitADC>

}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <LM35_ReadTemperature>:

u8 LM35_ReadTemperature(void)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <LM35_ReadTemperature+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LM35_ReadTemperature+0x8>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62


	// Convert from V to mV
	f32 mVolts = ADC_f32ReadChannel(ADC_CHANNEL1) * 1000;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 61 23 	call	0x46c2	; 0x46c2 <ADC_f32ReadChannel>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a e7       	ldi	r20, 0x7A	; 122
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8a 83       	std	Y+2, r24	; 0x02
    1e62:	9b 83       	std	Y+3, r25	; 0x03
    1e64:	ac 83       	std	Y+4, r26	; 0x04
    1e66:	bd 83       	std	Y+5, r27	; 0x05

	// From mV to degree C, where each 10mv -> 1 C
	u8 degreeC = mVolts / 10;
    1e68:	6a 81       	ldd	r22, Y+2	; 0x02
    1e6a:	7b 81       	ldd	r23, Y+3	; 0x03
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	89 83       	std	Y+1, r24	; 0x01

	return degreeC;
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <Led_ledInit>:

#include "Led.h"
#include <util/delay.h>

void Led_ledInit()
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	67 e0       	ldi	r22, 0x07	; 7
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <Led_turnOn>:

void Led_turnOn(led_ledId_t led)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <Led_turnOn+0x6>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3b 83       	std	Y+3, r19	; 0x03
    1ee2:	2a 83       	std	Y+2, r18	; 0x02
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	91 05       	cpc	r25, r1
    1eec:	79 f0       	breq	.+30     	; 0x1f0c <Led_turnOn+0x40>
    1eee:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef2:	22 30       	cpi	r18, 0x02	; 2
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <Led_turnOn+0x4c>
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	89 f4       	brne	.+34     	; 0x1f22 <Led_turnOn+0x56>
	{

	case LED0:
		Dio_writeChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	62 e0       	ldi	r22, 0x02	; 2
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <Led_turnOn+0x56>
		break;

	case LED1:
		Dio_writeChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	67 e0       	ldi	r22, 0x07	; 7
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <Led_turnOn+0x56>
		break;

	case LED2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		break;
	}

}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <Led_turnOff>:

void Led_turnOff(led_ledId_t led)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <Led_turnOff+0x6>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3b 83       	std	Y+3, r19	; 0x03
    1f44:	2a 83       	std	Y+2, r18	; 0x02
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	79 f0       	breq	.+30     	; 0x1f6e <Led_turnOff+0x40>
    1f50:	2a 81       	ldd	r18, Y+2	; 0x02
    1f52:	3b 81       	ldd	r19, Y+3	; 0x03
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <Led_turnOff+0x4c>
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	89 f4       	brne	.+34     	; 0x1f84 <Led_turnOff+0x56>
	{

	case LED0:
		Dio_writeChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	62 e0       	ldi	r22, 0x02	; 2
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    1f6c:	0b c0       	rjmp	.+22     	; 0x1f84 <Led_turnOff+0x56>
		break;

	case LED1:
		Dio_writeChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	67 e0       	ldi	r22, 0x07	; 7
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <Led_turnOff+0x56>
		break;

	case LED2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	63 e0       	ldi	r22, 0x03	; 3
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		break;
	}

}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <Led_toggle>:

void Led_toggle(led_ledId_t led)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <Led_toggle+0x6>
    1f96:	0f 92       	push	r0
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3b 83       	std	Y+3, r19	; 0x03
    1fa6:	2a 83       	std	Y+2, r18	; 0x02
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	71 f0       	breq	.+28     	; 0x1fce <Led_toggle+0x3e>
    1fb2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb4:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <Led_toggle+0x48>
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	71 f4       	brne	.+28     	; 0x1fe0 <Led_toggle+0x50>
	{

	case LED0:
		Dio_flipChanel(DIO_PORTC, DIO_PIN2);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <Led_toggle+0x50>
		break;

	case LED1:
		Dio_flipChanel(DIO_PORTC, DIO_PIN7);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	67 e0       	ldi	r22, 0x07	; 7
    1fd2:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <Led_toggle+0x50>
		break;

	case LED2:
		Dio_flipChanel(DIO_PORTD, DIO_PIN3);
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	0e 94 c8 22 	call	0x4590	; 0x4590 <Dio_flipChanel>
		break;
	}

}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LCD_init>:
static u8 row = 0;
static u8 col = 0;
static lcd_alignment_t alignment = LCD_LEFT;

void LCD_init(void)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	e4 97       	sbiw	r28, 0x34	; 52
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61

	// Control pins
	Dio_configChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	62 e0       	ldi	r22, 0x02	; 2
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	63 e0       	ldi	r22, 0x03	; 3
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Data pins
	Dio_configChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	64 e0       	ldi	r22, 0x04	; 4
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	65 e0       	ldi	r22, 0x05	; 5
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	66 e0       	ldi	r22, 0x06	; 6
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	67 e0       	ldi	r22, 0x07	; 7
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// R/W -> Write to LCD
	Dio_writeChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	62 e0       	ldi	r22, 0x02	; 2
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a0 e7       	ldi	r26, 0x70	; 112
    2056:	b1 e4       	ldi	r27, 0x41	; 65
    2058:	89 ab       	std	Y+49, r24	; 0x31
    205a:	9a ab       	std	Y+50, r25	; 0x32
    205c:	ab ab       	std	Y+51, r26	; 0x33
    205e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	69 a9       	ldd	r22, Y+49	; 0x31
    2062:	7a a9       	ldd	r23, Y+50	; 0x32
    2064:	8b a9       	ldd	r24, Y+51	; 0x33
    2066:	9c a9       	ldd	r25, Y+52	; 0x34
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	4a e7       	ldi	r20, 0x7A	; 122
    206e:	55 e4       	ldi	r21, 0x45	; 69
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8d a7       	std	Y+45, r24	; 0x2d
    207a:	9e a7       	std	Y+46, r25	; 0x2e
    207c:	af a7       	std	Y+47, r26	; 0x2f
    207e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2080:	6d a5       	ldd	r22, Y+45	; 0x2d
    2082:	7e a5       	ldd	r23, Y+46	; 0x2e
    2084:	8f a5       	ldd	r24, Y+47	; 0x2f
    2086:	98 a9       	ldd	r25, Y+48	; 0x30
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <LCD_init+0xb6>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9c a7       	std	Y+44, r25	; 0x2c
    209e:	8b a7       	std	Y+43, r24	; 0x2b
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <LCD_init+0x134>
	else if (__tmp > 65535)
    20a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	4c f5       	brge	.+82     	; 0x210c <LCD_init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	69 a9       	ldd	r22, Y+49	; 0x31
    20bc:	7a a9       	ldd	r23, Y+50	; 0x32
    20be:	8b a9       	ldd	r24, Y+51	; 0x33
    20c0:	9c a9       	ldd	r25, Y+52	; 0x34
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c a7       	std	Y+44, r25	; 0x2c
    20e0:	8b a7       	std	Y+43, r24	; 0x2b
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <LCD_init+0x116>
    20e4:	80 e9       	ldi	r24, 0x90	; 144
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	9a a7       	std	Y+42, r25	; 0x2a
    20ea:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_init+0x104>
    20f4:	9a a7       	std	Y+42, r25	; 0x2a
    20f6:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9c a7       	std	Y+44, r25	; 0x2c
    2100:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8b a5       	ldd	r24, Y+43	; 0x2b
    2104:	9c a5       	ldd	r25, Y+44	; 0x2c
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <LCD_init+0xf8>
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <LCD_init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	6d a5       	ldd	r22, Y+45	; 0x2d
    210e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2110:	8f a5       	ldd	r24, Y+47	; 0x2f
    2112:	98 a9       	ldd	r25, Y+48	; 0x30
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9c a7       	std	Y+44, r25	; 0x2c
    211e:	8b a7       	std	Y+43, r24	; 0x2b
    2120:	8b a5       	ldd	r24, Y+43	; 0x2b
    2122:	9c a5       	ldd	r25, Y+44	; 0x2c
    2124:	98 a7       	std	Y+40, r25	; 0x28
    2126:	8f a3       	std	Y+39, r24	; 0x27
    2128:	8f a1       	ldd	r24, Y+39	; 0x27
    212a:	98 a5       	ldd	r25, Y+40	; 0x28
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_init+0x140>
    2130:	98 a7       	std	Y+40, r25	; 0x28
    2132:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);
	LCD_sendCmd(0x03);
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 ea       	ldi	r26, 0xA0	; 160
    2140:	b0 e4       	ldi	r27, 0x40	; 64
    2142:	8b a3       	std	Y+35, r24	; 0x23
    2144:	9c a3       	std	Y+36, r25	; 0x24
    2146:	ad a3       	std	Y+37, r26	; 0x25
    2148:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	55 e4       	ldi	r21, 0x45	; 69
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
    2164:	98 a3       	std	Y+32, r25	; 0x20
    2166:	a9 a3       	std	Y+33, r26	; 0x21
    2168:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    216a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    216c:	78 a1       	ldd	r23, Y+32	; 0x20
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_init+0x1a0>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e 8f       	std	Y+30, r25	; 0x1e
    2188:	8d 8f       	std	Y+29, r24	; 0x1d
    218a:	3f c0       	rjmp	.+126    	; 0x220a <LCD_init+0x21e>
	else if (__tmp > 65535)
    218c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    218e:	78 a1       	ldd	r23, Y+32	; 0x20
    2190:	89 a1       	ldd	r24, Y+33	; 0x21
    2192:	9a a1       	ldd	r25, Y+34	; 0x22
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <LCD_init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	6b a1       	ldd	r22, Y+35	; 0x23
    21a6:	7c a1       	ldd	r23, Y+36	; 0x24
    21a8:	8d a1       	ldd	r24, Y+37	; 0x25
    21aa:	9e a1       	ldd	r25, Y+38	; 0x26
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_init+0x200>
    21ce:	80 e9       	ldi	r24, 0x90	; 144
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	9c 8f       	std	Y+28, r25	; 0x1c
    21d4:	8b 8f       	std	Y+27, r24	; 0x1b
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_init+0x1ee>
    21de:	9c 8f       	std	Y+28, r25	; 0x1c
    21e0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ea:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_init+0x1e2>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <LCD_init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21f8:	78 a1       	ldd	r23, Y+32	; 0x20
    21fa:	89 a1       	ldd	r24, Y+33	; 0x21
    21fc:	9a a1       	ldd	r25, Y+34	; 0x22
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9e 8f       	std	Y+30, r25	; 0x1e
    2208:	8d 8f       	std	Y+29, r24	; 0x1d
    220a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    220c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    220e:	9a 8f       	std	Y+26, r25	; 0x1a
    2210:	89 8f       	std	Y+25, r24	; 0x19
    2212:	89 8d       	ldd	r24, Y+25	; 0x19
    2214:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_init+0x22a>
    221a:	9a 8f       	std	Y+26, r25	; 0x1a
    221c:	89 8f       	std	Y+25, r24	; 0x19

	_delay_ms(5);
	LCD_sendCmd(0x03);
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a8 ec       	ldi	r26, 0xC8	; 200
    222a:	b2 e4       	ldi	r27, 0x42	; 66
    222c:	8d 8b       	std	Y+21, r24	; 0x15
    222e:	9e 8b       	std	Y+22, r25	; 0x16
    2230:	af 8b       	std	Y+23, r26	; 0x17
    2232:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	2b ea       	ldi	r18, 0xAB	; 171
    223e:	3a ea       	ldi	r19, 0xAA	; 170
    2240:	4a ea       	ldi	r20, 0xAA	; 170
    2242:	50 e4       	ldi	r21, 0x40	; 64
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	89 8b       	std	Y+17, r24	; 0x11
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	ab 8b       	std	Y+19, r26	; 0x13
    2252:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2254:	69 89       	ldd	r22, Y+17	; 0x11
    2256:	7a 89       	ldd	r23, Y+18	; 0x12
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	1c f4       	brge	.+6      	; 0x2272 <LCD_init+0x286>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	88 8b       	std	Y+16, r24	; 0x10
    2270:	91 c0       	rjmp	.+290    	; 0x2394 <LCD_init+0x3a8>
	else if (__tmp > 255)
    2272:	69 89       	ldd	r22, Y+17	; 0x11
    2274:	7a 89       	ldd	r23, Y+18	; 0x12
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	53 e4       	ldi	r21, 0x43	; 67
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <LCD_init+0x2a0>
    228a:	7b c0       	rjmp	.+246    	; 0x2382 <LCD_init+0x396>
	{
		_delay_ms(__us / 1000.0);
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8c 87       	std	Y+12, r24	; 0x0c
    22a6:	9d 87       	std	Y+13, r25	; 0x0d
    22a8:	ae 87       	std	Y+14, r26	; 0x0e
    22aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	55 e4       	ldi	r21, 0x45	; 69
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	88 87       	std	Y+8, r24	; 0x08
    22c6:	99 87       	std	Y+9, r25	; 0x09
    22c8:	aa 87       	std	Y+10, r26	; 0x0a
    22ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22cc:	68 85       	ldd	r22, Y+8	; 0x08
    22ce:	79 85       	ldd	r23, Y+9	; 0x09
    22d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <LCD_init+0x302>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9f 83       	std	Y+7, r25	; 0x07
    22ea:	8e 83       	std	Y+6, r24	; 0x06
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <LCD_init+0x380>
	else if (__tmp > 65535)
    22ee:	68 85       	ldd	r22, Y+8	; 0x08
    22f0:	79 85       	ldd	r23, Y+9	; 0x09
    22f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <LCD_init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	6c 85       	ldd	r22, Y+12	; 0x0c
    2308:	7d 85       	ldd	r23, Y+13	; 0x0d
    230a:	8e 85       	ldd	r24, Y+14	; 0x0e
    230c:	9f 85       	ldd	r25, Y+15	; 0x0f
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
    232e:	0f c0       	rjmp	.+30     	; 0x234e <LCD_init+0x362>
    2330:	80 e9       	ldi	r24, 0x90	; 144
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	9d 83       	std	Y+5, r25	; 0x05
    2336:	8c 83       	std	Y+4, r24	; 0x04
    2338:	8c 81       	ldd	r24, Y+4	; 0x04
    233a:	9d 81       	ldd	r25, Y+5	; 0x05
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_init+0x350>
    2340:	9d 83       	std	Y+5, r25	; 0x05
    2342:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8e 81       	ldd	r24, Y+6	; 0x06
    2346:	9f 81       	ldd	r25, Y+7	; 0x07
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9f 83       	std	Y+7, r25	; 0x07
    234c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8e 81       	ldd	r24, Y+6	; 0x06
    2350:	9f 81       	ldd	r25, Y+7	; 0x07
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <LCD_init+0x344>
    2356:	24 c0       	rjmp	.+72     	; 0x23a0 <LCD_init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	68 85       	ldd	r22, Y+8	; 0x08
    235a:	79 85       	ldd	r23, Y+9	; 0x09
    235c:	8a 85       	ldd	r24, Y+10	; 0x0a
    235e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9f 83       	std	Y+7, r25	; 0x07
    236a:	8e 83       	std	Y+6, r24	; 0x06
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	9f 81       	ldd	r25, Y+7	; 0x07
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	9b 81       	ldd	r25, Y+3	; 0x03
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LCD_init+0x38c>
    237c:	9b 83       	std	Y+3, r25	; 0x03
    237e:	8a 83       	std	Y+2, r24	; 0x02
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <LCD_init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2382:	69 89       	ldd	r22, Y+17	; 0x11
    2384:	7a 89       	ldd	r23, Y+18	; 0x12
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9c 89       	ldd	r25, Y+20	; 0x14
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	88 8b       	std	Y+16, r24	; 0x10
    2394:	88 89       	ldd	r24, Y+16	; 0x10
    2396:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	8a 95       	dec	r24
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_init+0x3ae>
    239e:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
	LCD_sendCmd(0x03);
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>

	LCD_sendCmd(0x02);
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
	LCD_sendCmd(_LCD_4BIT_MODE);
    23ac:	88 e2       	ldi	r24, 0x28	; 40
    23ae:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
	LCD_sendCmd(_LCD_CLEAR);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
	LCD_sendCmd(_LCD_CURSOR_ON);
    23b8:	8f e0       	ldi	r24, 0x0F	; 15
    23ba:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>


}
    23be:	e4 96       	adiw	r28, 0x34	; 52
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_generateEnablePulse>:

static void LCD_generateEnablePulse()
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	2e 97       	sbiw	r28, 0x0e	; 14
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61

	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	63 e0       	ldi	r22, 0x03	; 3
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e4       	ldi	r27, 0x40	; 64
    23f6:	8b 87       	std	Y+11, r24	; 0x0b
    23f8:	9c 87       	std	Y+12, r25	; 0x0c
    23fa:	ad 87       	std	Y+13, r26	; 0x0d
    23fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a e7       	ldi	r20, 0x7A	; 122
    240c:	55 e4       	ldi	r21, 0x45	; 69
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8f 83       	std	Y+7, r24	; 0x07
    2418:	98 87       	std	Y+8, r25	; 0x08
    241a:	a9 87       	std	Y+9, r26	; 0x09
    241c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	5f e3       	ldi	r21, 0x3F	; 63
    242e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2432:	88 23       	and	r24, r24
    2434:	2c f4       	brge	.+10     	; 0x2440 <LCD_generateEnablePulse+0x70>
		__ticks = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	3f c0       	rjmp	.+126    	; 0x24be <LCD_generateEnablePulse+0xee>
	else if (__tmp > 65535)
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	3f ef       	ldi	r19, 0xFF	; 255
    244c:	4f e7       	ldi	r20, 0x7F	; 127
    244e:	57 e4       	ldi	r21, 0x47	; 71
    2450:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2454:	18 16       	cp	r1, r24
    2456:	4c f5       	brge	.+82     	; 0x24aa <LCD_generateEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e2       	ldi	r20, 0x20	; 32
    2466:	51 e4       	ldi	r21, 0x41	; 65
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <LCD_generateEnablePulse+0xd0>
    2482:	80 e9       	ldi	r24, 0x90	; 144
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_generateEnablePulse+0xbe>
    2492:	9c 83       	std	Y+4, r25	; 0x04
    2494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	8d 81       	ldd	r24, Y+5	; 0x05
    2498:	9e 81       	ldd	r25, Y+6	; 0x06
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	69 f7       	brne	.-38     	; 0x2482 <LCD_generateEnablePulse+0xb2>
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <LCD_generateEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9e 83       	std	Y+6, r25	; 0x06
    24bc:	8d 83       	std	Y+5, r24	; 0x05
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_generateEnablePulse+0xfa>
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	63 e0       	ldi	r22, 0x03	; 3
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

}
    24dc:	2e 96       	adiw	r28, 0x0e	; 14
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <LCD_sendData>:

static void LCD_sendData(u8 data)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <LCD_sendData+0x6>
    24f4:	0f 92       	push	r0
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	8b 83       	std	Y+3, r24	; 0x03

	u8 msb = data & ~LCD_MASK;
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	80 7f       	andi	r24, 0xF0	; 240
    2500:	8a 83       	std	Y+2, r24	; 0x02
	u8 lsb = data << 4;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	82 95       	swap	r24
    2506:	80 7f       	andi	r24, 0xF0	; 240
    2508:	89 83       	std	Y+1, r24	; 0x01

	// Write to port by group two times
	// MSB (Most)
	Dio_writeChanelGroup(DIO_PORTA, msb, LCD_MASK);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	6a 81       	ldd	r22, Y+2	; 0x02
    250e:	4f e0       	ldi	r20, 0x0F	; 15
    2510:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <Dio_writeChanelGroup>

	// Generate enable pulse to enable lcd to read last bits
	LCD_generateEnablePulse();
    2514:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_generateEnablePulse>

	// LSB (Least)
	Dio_writeChanelGroup(DIO_PORTA, lsb, LCD_MASK);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	69 81       	ldd	r22, Y+1	; 0x01
    251c:	4f e0       	ldi	r20, 0x0F	; 15
    251e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <Dio_writeChanelGroup>

	// Generate enable pulse to enable lcd to read last bits
	LCD_generateEnablePulse();
    2522:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_generateEnablePulse>


}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_displayChar>:

void LCD_displayChar(u8 _char)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	89 83       	std	Y+1, r24	; 0x01

	if (_char == '\0')
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	88 23       	and	r24, r24
    2542:	69 f0       	breq	.+26     	; 0x255e <LCD_displayChar+0x2c>
	{
		return;
	}

	// RS = 1 -> to be displayed
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	LCD_sendData(_char);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_sendData>
	col++;
    2554:	80 91 8a 02 	lds	r24, 0x028A
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	80 93 8a 02 	sts	0x028A, r24

}
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <LCD_displayInt>:

void LCD_displayInt(u32 number)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	c8 56       	subi	r28, 0x68	; 104
    2570:	d0 40       	sbci	r29, 0x00	; 0
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	fe 01       	movw	r30, r28
    257e:	eb 59       	subi	r30, 0x9B	; 155
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 83       	st	Z, r22
    2584:	71 83       	std	Z+1, r23	; 0x01
    2586:	82 83       	std	Z+2, r24	; 0x02
    2588:	93 83       	std	Z+3, r25	; 0x03

	u8 buffer[100];

	sprintf(buffer, "%d", number);
    258a:	8d b7       	in	r24, 0x3d	; 61
    258c:	9e b7       	in	r25, 0x3e	; 62
    258e:	08 97       	sbiw	r24, 0x08	; 8
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	9e bf       	out	0x3e, r25	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	8d bf       	out	0x3d, r24	; 61
    259a:	2d b7       	in	r18, 0x3d	; 61
    259c:	3e b7       	in	r19, 0x3e	; 62
    259e:	2f 5f       	subi	r18, 0xFF	; 255
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	f9 01       	movw	r30, r18
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	8a e6       	ldi	r24, 0x6A	; 106
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	f9 01       	movw	r30, r18
    25b2:	93 83       	std	Z+3, r25	; 0x03
    25b4:	82 83       	std	Z+2, r24	; 0x02
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 59       	subi	r30, 0x9B	; 155
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	a2 81       	ldd	r26, Z+2	; 0x02
    25c2:	b3 81       	ldd	r27, Z+3	; 0x03
    25c4:	f9 01       	movw	r30, r18
    25c6:	84 83       	std	Z+4, r24	; 0x04
    25c8:	95 83       	std	Z+5, r25	; 0x05
    25ca:	a6 83       	std	Z+6, r26	; 0x06
    25cc:	b7 83       	std	Z+7, r27	; 0x07
    25ce:	0e 94 8f 24 	call	0x491e	; 0x491e <sprintf>
    25d2:	8d b7       	in	r24, 0x3d	; 61
    25d4:	9e b7       	in	r25, 0x3e	; 62
    25d6:	08 96       	adiw	r24, 0x08	; 8
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	9e bf       	out	0x3e, r25	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	8d bf       	out	0x3d, r24	; 61

	LCD_displayString(buffer);
    25e2:	ce 01       	movw	r24, r28
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_displayString>

}
    25ea:	c8 59       	subi	r28, 0x98	; 152
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <LCD_displayFloat>:

void LCD_displayFloat(f32 number)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <LCD_displayFloat+0x6>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <LCD_displayFloat+0x8>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	6a 83       	std	Y+2, r22	; 0x02
    260e:	7b 83       	std	Y+3, r23	; 0x03
    2610:	8c 83       	std	Y+4, r24	; 0x04
    2612:	9d 83       	std	Y+5, r25	; 0x05

	u8 wholeNum = number;
    2614:	6a 81       	ldd	r22, Y+2	; 0x02
    2616:	7b 81       	ldd	r23, Y+3	; 0x03
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	89 83       	std	Y+1, r24	; 0x01

	LCD_displayInt(wholeNum);
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a0 e0       	ldi	r26, 0x00	; 0
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_displayInt>
	LCD_displayChar('.');
    2638:	8e e2       	ldi	r24, 0x2E	; 46
    263a:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayChar>

	number -= wholeNum;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	aa 27       	eor	r26, r26
    2646:	97 fd       	sbrc	r25, 7
    2648:	a0 95       	com	r26
    264a:	ba 2f       	mov	r27, r26
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	6a 81       	ldd	r22, Y+2	; 0x02
    265a:	7b 81       	ldd	r23, Y+3	; 0x03
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8a 83       	std	Y+2, r24	; 0x02
    266a:	9b 83       	std	Y+3, r25	; 0x03
    266c:	ac 83       	std	Y+4, r26	; 0x04
    266e:	bd 83       	std	Y+5, r27	; 0x05
	number *= 100;
    2670:	6a 81       	ldd	r22, Y+2	; 0x02
    2672:	7b 81       	ldd	r23, Y+3	; 0x03
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	48 ec       	ldi	r20, 0xC8	; 200
    267e:	52 e4       	ldi	r21, 0x42	; 66
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8a 83       	std	Y+2, r24	; 0x02
    268a:	9b 83       	std	Y+3, r25	; 0x03
    268c:	ac 83       	std	Y+4, r26	; 0x04
    268e:	bd 83       	std	Y+5, r27	; 0x05

	LCD_displayInt(number);
    2690:	6a 81       	ldd	r22, Y+2	; 0x02
    2692:	7b 81       	ldd	r23, Y+3	; 0x03
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	9d 81       	ldd	r25, Y+5	; 0x05
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_displayInt>

}
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <LCD_staticdisplayString>:

static void LCD_staticdisplayString(u8* _char, lcd_animate_t animate)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	66 97       	sbiw	r28, 0x16	; 22
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	9b 8b       	std	Y+19, r25	; 0x13
    26ce:	8a 8b       	std	Y+18, r24	; 0x12
    26d0:	6c 8b       	std	Y+20, r22	; 0x14

	u8 size = strlen(_char);
    26d2:	8a 89       	ldd	r24, Y+18	; 0x12
    26d4:	9b 89       	ldd	r25, Y+19	; 0x13
    26d6:	0e 94 86 24 	call	0x490c	; 0x490c <strlen>
    26da:	89 8b       	std	Y+17, r24	; 0x11

	switch (alignment)
    26dc:	80 91 8b 02 	lds	r24, 0x028B
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	3e 8b       	std	Y+22, r19	; 0x16
    26e6:	2d 8b       	std	Y+21, r18	; 0x15
    26e8:	8d 89       	ldd	r24, Y+21	; 0x15
    26ea:	9e 89       	ldd	r25, Y+22	; 0x16
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	31 f0       	breq	.+12     	; 0x26fe <LCD_staticdisplayString+0x46>
    26f2:	2d 89       	ldd	r18, Y+21	; 0x15
    26f4:	3e 89       	ldd	r19, Y+22	; 0x16
    26f6:	22 30       	cpi	r18, 0x02	; 2
    26f8:	31 05       	cpc	r19, r1
    26fa:	79 f0       	breq	.+30     	; 0x271a <LCD_staticdisplayString+0x62>
    26fc:	17 c0       	rjmp	.+46     	; 0x272c <LCD_staticdisplayString+0x74>
	{

	case LCD_LEFT:
		break;
	case LCD_CENTER:
		LCD_setAddressPosition(row, 8 - (size / 2));
    26fe:	20 91 89 02 	lds	r18, 0x0289
    2702:	89 89       	ldd	r24, Y+17	; 0x11
    2704:	98 2f       	mov	r25, r24
    2706:	96 95       	lsr	r25
    2708:	88 e0       	ldi	r24, 0x08	; 8
    270a:	38 2f       	mov	r19, r24
    270c:	39 1b       	sub	r19, r25
    270e:	93 2f       	mov	r25, r19
    2710:	82 2f       	mov	r24, r18
    2712:	69 2f       	mov	r22, r25
    2714:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_setAddressPosition>
    2718:	09 c0       	rjmp	.+18     	; 0x272c <LCD_staticdisplayString+0x74>
		break;
	case LCD_RIGHT:
		LCD_setAddressPosition(row, 16 - size);
    271a:	20 91 89 02 	lds	r18, 0x0289
    271e:	90 e1       	ldi	r25, 0x10	; 16
    2720:	89 89       	ldd	r24, Y+17	; 0x11
    2722:	98 1b       	sub	r25, r24
    2724:	82 2f       	mov	r24, r18
    2726:	69 2f       	mov	r22, r25
    2728:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_setAddressPosition>
		break;

	}

	for (u8* i = _char; *i != '\0'; i++)
    272c:	8a 89       	ldd	r24, Y+18	; 0x12
    272e:	9b 89       	ldd	r25, Y+19	; 0x13
    2730:	98 8b       	std	Y+16, r25	; 0x10
    2732:	8f 87       	std	Y+15, r24	; 0x0f
    2734:	80 c0       	rjmp	.+256    	; 0x2836 <LCD_staticdisplayString+0x17e>
	{

		LCD_displayChar(*i);
    2736:	ef 85       	ldd	r30, Y+15	; 0x0f
    2738:	f8 89       	ldd	r31, Y+16	; 0x10
    273a:	80 81       	ld	r24, Z
    273c:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayChar>
		if (animate == LCD_ANIMATE)
    2740:	8c 89       	ldd	r24, Y+20	; 0x14
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	09 f0       	breq	.+2      	; 0x2748 <LCD_staticdisplayString+0x90>
    2746:	72 c0       	rjmp	.+228    	; 0x282c <LCD_staticdisplayString+0x174>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a8 ec       	ldi	r26, 0xC8	; 200
    274e:	b2 e4       	ldi	r27, 0x42	; 66
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	55 e4       	ldi	r21, 0x45	; 69
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_staticdisplayString+0xe2>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_staticdisplayString+0x160>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_staticdisplayString+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_staticdisplayString+0x142>
    27dc:	80 e9       	ldi	r24, 0x90	; 144
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_staticdisplayString+0x130>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_staticdisplayString+0x124>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_staticdisplayString+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_staticdisplayString+0x16c>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
		LCD_setAddressPosition(row, 16 - size);
		break;

	}

	for (u8* i = _char; *i != '\0'; i++)
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	98 89       	ldd	r25, Y+16	; 0x10
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	98 8b       	std	Y+16, r25	; 0x10
    2834:	8f 87       	std	Y+15, r24	; 0x0f
    2836:	ef 85       	ldd	r30, Y+15	; 0x0f
    2838:	f8 89       	ldd	r31, Y+16	; 0x10
    283a:	80 81       	ld	r24, Z
    283c:	88 23       	and	r24, r24
    283e:	09 f0       	breq	.+2      	; 0x2842 <LCD_staticdisplayString+0x18a>
    2840:	7a cf       	rjmp	.-268    	; 0x2736 <LCD_staticdisplayString+0x7e>
			_delay_ms(100);
		}

	}

}
    2842:	66 96       	adiw	r28, 0x16	; 22
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LCD_displayString>:

void LCD_displayString(u8* _char)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <LCD_displayString+0x6>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01

	LCD_staticdisplayString(_char, LCD_NO_ANIMATE);
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_staticdisplayString>

}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <LCD_displayStringWithAnimation>:

void LCD_displayStringWithAnimation(u8* _char)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <LCD_displayStringWithAnimation+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01

	LCD_staticdisplayString(_char, LCD_ANIMATE);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_staticdisplayString>

}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <LCD_sendCmd>:

void LCD_sendCmd(u8 cmd)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	89 83       	std	Y+1, r24	; 0x01

	// RS = 0 -> to get command
	Dio_writeChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	LCD_sendData(cmd);
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_sendData>

}
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <LCD_ClearRow>:

void LCD_ClearRow(lcd_row_t rowNum)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <LCD_ClearRow+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <LCD_ClearRow+0x8>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	8a 83       	std	Y+2, r24	; 0x02

	switch (rowNum) {
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	3c 83       	std	Y+4, r19	; 0x04
    28d2:	2b 83       	std	Y+3, r18	; 0x03
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	31 f0       	breq	.+12     	; 0x28e8 <LCD_ClearRow+0x2c>
    28dc:	2b 81       	ldd	r18, Y+3	; 0x03
    28de:	3c 81       	ldd	r19, Y+4	; 0x04
    28e0:	21 30       	cpi	r18, 0x01	; 1
    28e2:	31 05       	cpc	r19, r1
    28e4:	31 f0       	breq	.+12     	; 0x28f2 <LCD_ClearRow+0x36>
    28e6:	09 c0       	rjmp	.+18     	; 0x28fa <LCD_ClearRow+0x3e>
		case LCD_ROW0:
			LCD_setAddressPosition(LCD_ROW0, 0);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_setAddressPosition>
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <LCD_ClearRow+0x3e>
			break;
		case LCD_ROW1:
			LCD_setAddressPosition(LCD_ROW1, 0);
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_setAddressPosition>
			break;
	}

	for (u8 i = 0; i < 16; i++)
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	06 c0       	rjmp	.+12     	; 0x290a <LCD_ClearRow+0x4e>
		LCD_displayChar(' ');
    28fe:	80 e2       	ldi	r24, 0x20	; 32
    2900:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayChar>
		case LCD_ROW1:
			LCD_setAddressPosition(LCD_ROW1, 0);
			break;
	}

	for (u8 i = 0; i < 16; i++)
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	80 31       	cpi	r24, 0x10	; 16
    290e:	b8 f3       	brcs	.-18     	; 0x28fe <LCD_ClearRow+0x42>
		LCD_displayChar(' ');

}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <LCD_setAlignment>:

void LCD_setAlignment(lcd_alignment_t align)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	89 83       	std	Y+1, r24	; 0x01

	alignment = align;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	80 93 8b 02 	sts	0x028B, r24

}
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <LCD_setAddressPosition>:

void LCD_setAddressPosition(u8 row, u8 col)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <LCD_setAddressPosition+0x6>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <LCD_setAddressPosition+0x8>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	6a 83       	std	Y+2, r22	; 0x02

	switch (row)
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	3c 83       	std	Y+4, r19	; 0x04
    2950:	2b 83       	std	Y+3, r18	; 0x03
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	31 f0       	breq	.+12     	; 0x2966 <LCD_setAddressPosition+0x2e>
    295a:	2b 81       	ldd	r18, Y+3	; 0x03
    295c:	3c 81       	ldd	r19, Y+4	; 0x04
    295e:	21 30       	cpi	r18, 0x01	; 1
    2960:	31 05       	cpc	r19, r1
    2962:	31 f0       	breq	.+12     	; 0x2970 <LCD_setAddressPosition+0x38>
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <LCD_setAddressPosition+0x40>
	{

	case LCD_ROW0:
		LCD_sendCmd(LCD_ROW0_AD + col);
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	80 58       	subi	r24, 0x80	; 128
    296a:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <LCD_setAddressPosition+0x40>
		break;

	case LCD_ROW1:
		LCD_sendCmd(LCD_ROW1_AD + col);
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	80 54       	subi	r24, 0x40	; 64
    2974:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_sendCmd>
		break;

	}

}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <Keypad_keypadInit>:
		{'*', '0', '#', 'D'}
};

void Keypad_keypadInit()

{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62

	// Set row to input
	Dio_configChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	63 e0       	ldi	r22, 0x03	; 3
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN4, DIO_INPUT);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	64 e0       	ldi	r22, 0x04	; 4
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN5, DIO_INPUT);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	65 e0       	ldi	r22, 0x05	; 5
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTC, DIO_PIN6, DIO_INPUT);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	66 e0       	ldi	r22, 0x06	; 6
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Set col to output
	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	64 e0       	ldi	r22, 0x04	; 4
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	65 e0       	ldi	r22, 0x05	; 5
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	66 e0       	ldi	r22, 0x06	; 6
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	67 e0       	ldi	r22, 0x07	; 7
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Set col to high
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	64 e0       	ldi	r22, 0x04	; 4
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	65 e0       	ldi	r22, 0x05	; 5
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	66 e0       	ldi	r22, 0x06	; 6
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <Keypad_buttonIsPressed>:
boolean Keypad_buttonIsPressed()
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	0f 92       	push	r0
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62

	if (
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	63 e0       	ldi	r22, 0x03	; 3
    2a1a:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2a1e:	88 23       	and	r24, r24
    2a20:	91 f4       	brne	.+36     	; 0x2a46 <Keypad_buttonIsPressed+0x3a>
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	64 e0       	ldi	r22, 0x04	; 4
    2a26:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2a2a:	88 23       	and	r24, r24
    2a2c:	61 f4       	brne	.+24     	; 0x2a46 <Keypad_buttonIsPressed+0x3a>
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	65 e0       	ldi	r22, 0x05	; 5
    2a32:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2a36:	88 23       	and	r24, r24
    2a38:	31 f4       	brne	.+12     	; 0x2a46 <Keypad_buttonIsPressed+0x3a>
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	66 e0       	ldi	r22, 0x06	; 6
    2a3e:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2a42:	88 23       	and	r24, r24
    2a44:	19 f0       	breq	.+6      	; 0x2a4c <Keypad_buttonIsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN5) ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN6)

	)
	{
		return TRUE;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <Keypad_buttonIsPressed+0x42>
	}
	else
	{
		return FALSE;
    2a4c:	19 82       	std	Y+1, r1	; 0x01
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <Keypad_getButton>:

u8 Keypad_getButton()
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <Keypad_getButton+0x6>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62

//	if (Keypad_buttonIsPressed() == FALSE)
//		return KEYPAD_INVALID;

	keypad_row_t row = KEYPAD_INVALID;
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	8a 83       	std	Y+2, r24	; 0x02
	keypad_col_t col = KEYPAD_INVALID;
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	89 83       	std	Y+1, r24	; 0x01

	row = Keypad_getRow();
    2a6a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Keypad_getRow>
    2a6e:	8a 83       	std	Y+2, r24	; 0x02

	if (row == KEYPAD_INVALID)
		return KEYPAD_INVALID;

	col = Keypad_getCol(row);
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	0e 94 81 15 	call	0x2b02	; 0x2b02 <Keypad_getCol>
    2a76:	89 83       	std	Y+1, r24	; 0x01

	if (row == KEYPAD_INVALID || col == KEYPAD_INVALID)
		return KEYPAD_INVALID;

	return Keypad_Layout[row][col]; // || (row << 4) | col
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	48 2f       	mov	r20, r24
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	ca 01       	movw	r24, r20
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
    2a92:	fc 01       	movw	r30, r24
    2a94:	eb 58       	subi	r30, 0x8B	; 139
    2a96:	fd 4f       	sbci	r31, 0xFD	; 253
    2a98:	80 81       	ld	r24, Z

}
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <Keypad_getRow>:

keypad_row_t Keypad_getRow()
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3))
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	63 e0       	ldi	r22, 0x03	; 3
    2ab2:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2ab6:	88 23       	and	r24, r24
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <Keypad_getRow+0x1a>
	{
		return KEYPAD_ROW0;
    2aba:	19 82       	std	Y+1, r1	; 0x01
    2abc:	1d c0       	rjmp	.+58     	; 0x2af8 <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN4))
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	64 e0       	ldi	r22, 0x04	; 4
    2ac2:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2ac6:	88 23       	and	r24, r24
    2ac8:	19 f0       	breq	.+6      	; 0x2ad0 <Keypad_getRow+0x2c>
	{
		return KEYPAD_ROW1;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN5))
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	65 e0       	ldi	r22, 0x05	; 5
    2ad4:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2ad8:	88 23       	and	r24, r24
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <Keypad_getRow+0x3e>
	{
		return KEYPAD_ROW2;
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	0b c0       	rjmp	.+22     	; 0x2af8 <Keypad_getRow+0x54>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN6))
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	66 e0       	ldi	r22, 0x06	; 6
    2ae6:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2aea:	88 23       	and	r24, r24
    2aec:	19 f0       	breq	.+6      	; 0x2af4 <Keypad_getRow+0x50>
	{
		return KEYPAD_ROW3;
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <Keypad_getRow+0x54>
	}
	else
		return KEYPAD_INVALID;
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01

}
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <Keypad_getCol>:

keypad_col_t Keypad_getCol(keypad_row_t row)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <Keypad_getCol+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	// Switch every col to 0 and check if row still high
	// If row switched to low, return col


	// Col 1
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_LOW);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	64 e0       	ldi	r22, 0x04	; 4
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	if (row != Keypad_getRow())
    2b18:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Keypad_getRow>
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	98 17       	cp	r25, r24
    2b22:	39 f0       	breq	.+14     	; 0x2b32 <Keypad_getCol+0x30>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	64 e0       	ldi	r22, 0x04	; 4
    2b28:	41 e0       	ldi	r20, 0x01	; 1
    2b2a:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		return KEYPAD_COL0;
    2b2e:	1a 82       	std	Y+2, r1	; 0x02
    2b30:	4f c0       	rjmp	.+158    	; 0x2bd0 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	64 e0       	ldi	r22, 0x04	; 4
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Col 2
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_LOW);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	65 e0       	ldi	r22, 0x05	; 5
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	if (row != Keypad_getRow())
    2b46:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Keypad_getRow>
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	98 17       	cp	r25, r24
    2b50:	41 f0       	breq	.+16     	; 0x2b62 <Keypad_getCol+0x60>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	65 e0       	ldi	r22, 0x05	; 5
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		return KEYPAD_COL1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
    2b60:	37 c0       	rjmp	.+110    	; 0x2bd0 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Col 3
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_LOW);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	66 e0       	ldi	r22, 0x06	; 6
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	if (row != Keypad_getRow())
    2b76:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Keypad_getRow>
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	98 17       	cp	r25, r24
    2b80:	41 f0       	breq	.+16     	; 0x2b92 <Keypad_getCol+0x90>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	66 e0       	ldi	r22, 0x06	; 6
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		return KEYPAD_COL2;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	1f c0       	rjmp	.+62     	; 0x2bd0 <Keypad_getCol+0xce>

	}
	Dio_writeChanel(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	66 e0       	ldi	r22, 0x06	; 6
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// Col 4
	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_LOW);
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	67 e0       	ldi	r22, 0x07	; 7
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
	if (row != Keypad_getRow())
    2ba6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Keypad_getRow>
    2baa:	98 2f       	mov	r25, r24
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	98 17       	cp	r25, r24
    2bb0:	41 f0       	breq	.+16     	; 0x2bc2 <Keypad_getCol+0xc0>
	{

		Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	67 e0       	ldi	r22, 0x07	; 7
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		return KEYPAD_COL3;
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
    2bc0:	07 c0       	rjmp	.+14     	; 0x2bd0 <Keypad_getCol+0xce>

	}

	Dio_writeChanel(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	67 e0       	ldi	r22, 0x07	; 7
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	return KEYPAD_INVALID;
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	8a 83       	std	Y+2, r24	; 0x02
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <Keypad_GetString>:

void Keypad_GetString(u8* string, u8 size)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <Keypad_GetString+0x6>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <Keypad_GetString+0x8>
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	6d 83       	std	Y+5, r22	; 0x05

	while (!Keypad_buttonIsPressed());
    2bf0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Keypad_buttonIsPressed>
    2bf4:	88 23       	and	r24, r24
    2bf6:	e1 f3       	breq	.-8      	; 0x2bf0 <Keypad_GetString+0x14>
	u8 tmp = Keypad_getButton();
    2bf8:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <Keypad_getButton>
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
	while (Keypad_buttonIsPressed());
    2bfe:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Keypad_buttonIsPressed>
    2c02:	88 23       	and	r24, r24
    2c04:	e1 f7       	brne	.-8      	; 0x2bfe <Keypad_GetString+0x22>
	u8 i = 0;
    2c06:	19 82       	std	Y+1, r1	; 0x01
    2c08:	18 c0       	rjmp	.+48     	; 0x2c3a <Keypad_GetString+0x5e>

	while ((tmp != '*') && (i < size - 1))
	{

		string[i] = tmp;
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	fc 01       	movw	r30, r24
    2c16:	e2 0f       	add	r30, r18
    2c18:	f3 1f       	adc	r31, r19
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	80 83       	st	Z, r24
		while (!Keypad_buttonIsPressed());
    2c1e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Keypad_buttonIsPressed>
    2c22:	88 23       	and	r24, r24
    2c24:	e1 f3       	breq	.-8      	; 0x2c1e <Keypad_GetString+0x42>
		tmp = Keypad_getButton();
    2c26:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <Keypad_getButton>
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
		while (Keypad_buttonIsPressed());
    2c2c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Keypad_buttonIsPressed>
    2c30:	88 23       	and	r24, r24
    2c32:	e1 f7       	brne	.-8      	; 0x2c2c <Keypad_GetString+0x50>
		i++;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	89 83       	std	Y+1, r24	; 0x01
	while (!Keypad_buttonIsPressed());
	u8 tmp = Keypad_getButton();
	while (Keypad_buttonIsPressed());
	u8 i = 0;

	while ((tmp != '*') && (i < size - 1))
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	8a 32       	cpi	r24, 0x2A	; 42
    2c3e:	51 f0       	breq	.+20     	; 0x2c54 <Keypad_GetString+0x78>
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	28 17       	cp	r18, r24
    2c50:	39 07       	cpc	r19, r25
    2c52:	dc f2       	brlt	.-74     	; 0x2c0a <Keypad_GetString+0x2e>
		i++;

	}

	// For precise memory allocation, add 1 to the size of the array for the null char
	string[i] = '\0';
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	fc 01       	movw	r30, r24
    2c60:	e2 0f       	add	r30, r18
    2c62:	f3 1f       	adc	r31, r19
    2c64:	10 82       	st	Z, r1

}
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <HC05_Init>:
 */

#include "HC-05.h"

void HC05_Init()
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62

	// HC 05 has to be communicated with 9600 baudrate when data mode
	UART_Init(9600);
    2c7e:	60 e8       	ldi	r22, 0x80	; 128
    2c80:	75 e2       	ldi	r23, 0x25	; 37
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_Init>

	// Enable
	// Command mode -> set
	// Data mode -> clear
	Dio_configChanel(DIO_PORTD, DIO_PIN2, DIO_OUTPUT);
    2c8a:	83 e0       	ldi	r24, 0x03	; 3
    2c8c:	62 e0       	ldi	r22, 0x02	; 2
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// State (if the device is connected or not)
	Dio_configChanel(DIO_PORTD, DIO_PIN3, DIO_INPUT);
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	63 e0       	ldi	r22, 0x03	; 3
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <HC05_IsConnected>:

boolean HC05_IsConnected()
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62

	if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN3))
    2cae:	83 e0       	ldi	r24, 0x03	; 3
    2cb0:	63 e0       	ldi	r22, 0x03	; 3
    2cb2:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    2cb6:	88 23       	and	r24, r24
    2cb8:	19 f0       	breq	.+6      	; 0x2cc0 <HC05_IsConnected+0x1c>
	{
		return TRUE;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <HC05_IsConnected+0x1e>
	}

	return FALSE;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <HC05_SendString>:

boolean HC05_SendString(u8* string)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <HC05_SendString+0x6>
    2cd2:	0f 92       	push	r0
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01

	if (HC05_IsConnected())
    2cdc:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <HC05_IsConnected>
    2ce0:	88 23       	and	r24, r24
    2ce2:	39 f0       	breq	.+14     	; 0x2cf2 <HC05_SendString+0x26>
	{

		UART_SendString(string);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	0e 94 4f 1b 	call	0x369e	; 0x369e <UART_SendString>
		return TRUE;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	8b 83       	std	Y+3, r24	; 0x03
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <HC05_SendString+0x28>

	}

	return FALSE;
    2cf2:	1b 82       	std	Y+3, r1	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <HC05_ReceiveString>:

boolean HC05_ReceiveString(u8* string, u8 size)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <HC05_ReceiveString+0x6>
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <HC05_ReceiveString+0x8>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	6b 83       	std	Y+3, r22	; 0x03

	if (HC05_IsConnected())
    2d14:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <HC05_IsConnected>
    2d18:	88 23       	and	r24, r24
    2d1a:	41 f0       	breq	.+16     	; 0x2d2c <HC05_ReceiveString+0x2a>
	{

		UART_ReciveString(string, size);
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d20:	6b 81       	ldd	r22, Y+3	; 0x03
    2d22:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <UART_ReciveString>
		return TRUE;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	8c 83       	std	Y+4, r24	; 0x04
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <HC05_ReceiveString+0x2c>

	}

	return FALSE;
    2d2c:	1c 82       	std	Y+4, r1	; 0x04
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <EEPROM_Init>:
#include <util/delay.h>
#include "Led.h"


void EEPROM_Init()
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	2e 97       	sbiw	r28, 0x0e	; 14
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61

	TWI_initMaster();
    2d52:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <TWI_initMaster>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	aa e7       	ldi	r26, 0x7A	; 122
    2d5c:	b4 e4       	ldi	r27, 0x44	; 68
    2d5e:	8b 87       	std	Y+11, r24	; 0x0b
    2d60:	9c 87       	std	Y+12, r25	; 0x0c
    2d62:	ad 87       	std	Y+13, r26	; 0x0d
    2d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a e7       	ldi	r20, 0x7A	; 122
    2d74:	55 e4       	ldi	r21, 0x45	; 69
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8f 83       	std	Y+7, r24	; 0x07
    2d80:	98 87       	std	Y+8, r25	; 0x08
    2d82:	a9 87       	std	Y+9, r26	; 0x09
    2d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d86:	6f 81       	ldd	r22, Y+7	; 0x07
    2d88:	78 85       	ldd	r23, Y+8	; 0x08
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <EEPROM_Init+0x6a>
		__ticks = 1;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	3f c0       	rjmp	.+126    	; 0x2e26 <EEPROM_Init+0xe8>
	else if (__tmp > 65535)
    2da8:	6f 81       	ldd	r22, Y+7	; 0x07
    2daa:	78 85       	ldd	r23, Y+8	; 0x08
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	4c f5       	brge	.+82     	; 0x2e12 <EEPROM_Init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e2       	ldi	r20, 0x20	; 32
    2dce:	51 e4       	ldi	r21, 0x41	; 65
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	0f c0       	rjmp	.+30     	; 0x2e08 <EEPROM_Init+0xca>
    2dea:	80 e9       	ldi	r24, 0x90	; 144
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <EEPROM_Init+0xb8>
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	69 f7       	brne	.-38     	; 0x2dea <EEPROM_Init+0xac>
    2e10:	14 c0       	rjmp	.+40     	; 0x2e3a <EEPROM_Init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	6f 81       	ldd	r22, Y+7	; 0x07
    2e14:	78 85       	ldd	r23, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <EEPROM_Init+0xf4>
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    2e3a:	2e 96       	adiw	r28, 0x0e	; 14
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <EEPROM_WriteByte>:

void EEPROM_WriteByte(u8 pageAddress, u8 dataAddress, u8 data)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	61 97       	sbiw	r28, 0x11	; 17
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	8f 87       	std	Y+15, r24	; 0x0f
    2e62:	68 8b       	std	Y+16, r22	; 0x10
    2e64:	49 8b       	std	Y+17, r20	; 0x11

	TWI_sendStartCondition();
    2e66:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <TWI_sendStartCondition>
	TWI_sendSlaveAddwithWrite( (0xA0 >> 1) | pageAddress);
    2e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6c:	80 65       	ori	r24, 0x50	; 80
    2e6e:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <TWI_sendSlaveAddwithWrite>
	TWI_sendMasterDataByte(dataAddress);
    2e72:	88 89       	ldd	r24, Y+16	; 0x10
    2e74:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <TWI_sendMasterDataByte>
	TWI_sendMasterDataByte(data);
    2e78:	89 89       	ldd	r24, Y+17	; 0x11
    2e7a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <TWI_sendMasterDataByte>
	TWI_sendStopCondition();
    2e7e:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <TWI_sendStopCondition>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 ea       	ldi	r26, 0xA0	; 160
    2e88:	b0 e4       	ldi	r27, 0x40	; 64
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
    2e8c:	9c 87       	std	Y+12, r25	; 0x0c
    2e8e:	ad 87       	std	Y+13, r26	; 0x0d
    2e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ea0:	55 e4       	ldi	r21, 0x45	; 69
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8f 83       	std	Y+7, r24	; 0x07
    2eac:	98 87       	std	Y+8, r25	; 0x08
    2eae:	a9 87       	std	Y+9, r26	; 0x09
    2eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <EEPROM_WriteByte+0x88>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	3f c0       	rjmp	.+126    	; 0x2f52 <EEPROM_WriteByte+0x106>
	else if (__tmp > 65535)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	4c f5       	brge	.+82     	; 0x2f3e <EEPROM_WriteByte+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <EEPROM_WriteByte+0xe8>
    2f16:	80 e9       	ldi	r24, 0x90	; 144
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <EEPROM_WriteByte+0xd6>
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	69 f7       	brne	.-38     	; 0x2f16 <EEPROM_WriteByte+0xca>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <EEPROM_WriteByte+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <EEPROM_WriteByte+0x112>
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01

	// In order to be able to use ReadByte function right after this function
	_delay_ms(5);

}
    2f66:	61 96       	adiw	r28, 0x11	; 17
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <EEPROM_ReadByte>:

u8 EEPROM_ReadByte(u8 pageAddress, u8 dataAddress)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	61 97       	sbiw	r28, 0x11	; 17
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	88 8b       	std	Y+16, r24	; 0x10
    2f8e:	69 8b       	std	Y+17, r22	; 0x11

	u8 data = 0;
    2f90:	1f 86       	std	Y+15, r1	; 0x0f

	TWI_sendStartCondition();
    2f92:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <TWI_sendStartCondition>
	TWI_sendSlaveAddwithWrite( (0xA0 >> 1) | pageAddress);
    2f96:	88 89       	ldd	r24, Y+16	; 0x10
    2f98:	80 65       	ori	r24, 0x50	; 80
    2f9a:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <TWI_sendSlaveAddwithWrite>
	TWI_sendMasterDataByte(dataAddress);
    2f9e:	89 89       	ldd	r24, Y+17	; 0x11
    2fa0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <TWI_sendMasterDataByte>
	TWI_sendRepStartCondition();
    2fa4:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <TWI_sendRepStartCondition>
	TWI_sendSlaveAddwithRead( (0xA0 >> 1) | pageAddress);
    2fa8:	88 89       	ldd	r24, Y+16	; 0x10
    2faa:	80 65       	ori	r24, 0x50	; 80
    2fac:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <TWI_sendSlaveAddwithRead>
	TWI_readMasterDataByte(data);
    2fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <TWI_readMasterDataByte>
	TWI_sendStopCondition();
    2fba:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <TWI_sendStopCondition>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 ea       	ldi	r26, 0xA0	; 160
    2fc4:	b0 e4       	ldi	r27, 0x40	; 64
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	9c 87       	std	Y+12, r25	; 0x0c
    2fca:	ad 87       	std	Y+13, r26	; 0x0d
    2fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a e7       	ldi	r20, 0x7A	; 122
    2fdc:	55 e4       	ldi	r21, 0x45	; 69
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8f 83       	std	Y+7, r24	; 0x07
    2fe8:	98 87       	std	Y+8, r25	; 0x08
    2fea:	a9 87       	std	Y+9, r26	; 0x09
    2fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <EEPROM_ReadByte+0x98>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	3f c0       	rjmp	.+126    	; 0x308e <EEPROM_ReadByte+0x116>
	else if (__tmp > 65535)
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <EEPROM_ReadByte+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	6b 85       	ldd	r22, Y+11	; 0x0b
    302a:	7c 85       	ldd	r23, Y+12	; 0x0c
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <EEPROM_ReadByte+0xf8>
    3052:	80 e9       	ldi	r24, 0x90	; 144
    3054:	91 e0       	ldi	r25, 0x01	; 1
    3056:	9c 83       	std	Y+4, r25	; 0x04
    3058:	8b 83       	std	Y+3, r24	; 0x03
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <EEPROM_ReadByte+0xe6>
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8d 81       	ldd	r24, Y+5	; 0x05
    3072:	9e 81       	ldd	r25, Y+6	; 0x06
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <EEPROM_ReadByte+0xda>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <EEPROM_ReadByte+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6f 81       	ldd	r22, Y+7	; 0x07
    307c:	78 85       	ldd	r23, Y+8	; 0x08
    307e:	89 85       	ldd	r24, Y+9	; 0x09
    3080:	9a 85       	ldd	r25, Y+10	; 0x0a
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	9e 81       	ldd	r25, Y+6	; 0x06
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <EEPROM_ReadByte+0x122>
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01

	// In order to be able to use ReadByte function right after this function
	_delay_ms(5);

	return data;
    30a2:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    30a4:	61 96       	adiw	r28, 0x11	; 17
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <EEPROM_WriteString>:

void EEPROM_WriteString(u8 pageAddress, u8 dataAddress, u8* string)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <EEPROM_WriteString+0x6>
    30bc:	00 d0       	rcall	.+0      	; 0x30be <EEPROM_WriteString+0x8>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <EEPROM_WriteString+0xa>
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	8b 83       	std	Y+3, r24	; 0x03
    30c6:	6c 83       	std	Y+4, r22	; 0x04
    30c8:	5e 83       	std	Y+6, r21	; 0x06
    30ca:	4d 83       	std	Y+5, r20	; 0x05

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	10 c0       	rjmp	.+32     	; 0x30f6 <EEPROM_WriteString+0x40>
	{

		EEPROM_WriteByte(pageAddress, dataAddress, *ptr);
    30d6:	e9 81       	ldd	r30, Y+1	; 0x01
    30d8:	fa 81       	ldd	r31, Y+2	; 0x02
    30da:	90 81       	ld	r25, Z
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	6c 81       	ldd	r22, Y+4	; 0x04
    30e0:	49 2f       	mov	r20, r25
    30e2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <EEPROM_WriteByte>
		dataAddress++;
    30e6:	8c 81       	ldd	r24, Y+4	; 0x04
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	8c 83       	std	Y+4, r24	; 0x04
}

void EEPROM_WriteString(u8 pageAddress, u8 dataAddress, u8* string)
{

	for (u8* ptr = string; *ptr != '\0'; ptr++)
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	9a 81       	ldd	r25, Y+2	; 0x02
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	9a 83       	std	Y+2, r25	; 0x02
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	e9 81       	ldd	r30, Y+1	; 0x01
    30f8:	fa 81       	ldd	r31, Y+2	; 0x02
    30fa:	80 81       	ld	r24, Z
    30fc:	88 23       	and	r24, r24
    30fe:	59 f7       	brne	.-42     	; 0x30d6 <EEPROM_WriteString+0x20>
		EEPROM_WriteByte(pageAddress, dataAddress, *ptr);
		dataAddress++;

	}

}
    3100:	26 96       	adiw	r28, 0x06	; 6
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <EEPROM_ReadString>:

void EEPROM_ReadString(u8 pageAddress, u8 dataAddress, u8* string, u8 size)
{
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <EEPROM_ReadString+0xa>
    311c:	00 d0       	rcall	.+0      	; 0x311e <EEPROM_ReadString+0xc>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <EEPROM_ReadString+0xe>
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	8a 83       	std	Y+2, r24	; 0x02
    3126:	6b 83       	std	Y+3, r22	; 0x03
    3128:	5d 83       	std	Y+5, r21	; 0x05
    312a:	4c 83       	std	Y+4, r20	; 0x04
    312c:	2e 83       	std	Y+6, r18	; 0x06

	for (u8 i = 0; i < size - 1; i++)
    312e:	19 82       	std	Y+1, r1	; 0x01
    3130:	14 c0       	rjmp	.+40     	; 0x315a <EEPROM_ReadString+0x48>
	{

		string[i] = EEPROM_ReadByte(pageAddress, dataAddress);
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	9d 81       	ldd	r25, Y+5	; 0x05
    313c:	8c 01       	movw	r16, r24
    313e:	02 0f       	add	r16, r18
    3140:	13 1f       	adc	r17, r19
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	6b 81       	ldd	r22, Y+3	; 0x03
    3146:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <EEPROM_ReadByte>
    314a:	f8 01       	movw	r30, r16
    314c:	80 83       	st	Z, r24
		dataAddress++;
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	8b 83       	std	Y+3, r24	; 0x03
}

void EEPROM_ReadString(u8 pageAddress, u8 dataAddress, u8* string, u8 size)
{

	for (u8 i = 0; i < size - 1; i++)
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	8f 5f       	subi	r24, 0xFF	; 255
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	8e 81       	ldd	r24, Y+6	; 0x06
    3162:	88 2f       	mov	r24, r24
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	14 f3       	brlt	.-60     	; 0x3132 <EEPROM_ReadString+0x20>
		string[i] = EEPROM_ReadByte(pageAddress, dataAddress);
		dataAddress++;

	}

	string[size - 1] = '\0';
    316e:	8e 81       	ldd	r24, Y+6	; 0x06
    3170:	88 2f       	mov	r24, r24
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9c 01       	movw	r18, r24
    3176:	21 50       	subi	r18, 0x01	; 1
    3178:	30 40       	sbci	r19, 0x00	; 0
    317a:	8c 81       	ldd	r24, Y+4	; 0x04
    317c:	9d 81       	ldd	r25, Y+5	; 0x05
    317e:	fc 01       	movw	r30, r24
    3180:	e2 0f       	add	r30, r18
    3182:	f3 1f       	adc	r31, r19
    3184:	10 82       	st	Z, r1

}
    3186:	26 96       	adiw	r28, 0x06	; 6
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	08 95       	ret

0000319c <EEPROM_Search>:

u16 EEPROM_Search(u8* string, u8 dataSize)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	60 97       	sbiw	r28, 0x10	; 16
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	9f 83       	std	Y+7, r25	; 0x07
    31b2:	8e 83       	std	Y+6, r24	; 0x06
    31b4:	68 87       	std	Y+8, r22	; 0x08
		}
	}

	return 0;

}
    31b6:	2d b7       	in	r18, 0x3d	; 61
    31b8:	3e b7       	in	r19, 0x3e	; 62
    31ba:	38 8b       	std	Y+16, r19	; 0x10
    31bc:	2f 87       	std	Y+15, r18	; 0x0f
	string[size - 1] = '\0';

}

u16 EEPROM_Search(u8* string, u8 dataSize)
{
    31be:	8d b7       	in	r24, 0x3d	; 61
    31c0:	9e b7       	in	r25, 0x3e	; 62
    31c2:	9a 87       	std	Y+10, r25	; 0x0a
    31c4:	89 87       	std	Y+9, r24	; 0x09


	// Page 1 contains Memory details
	u8 pageAddress = EEPROM_PAGE2;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	8b 83       	std	Y+3, r24	; 0x03
	u8 tmp[dataSize];
    31ca:	88 85       	ldd	r24, Y+8	; 0x08
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	2d b7       	in	r18, 0x3d	; 61
    31d2:	3e b7       	in	r19, 0x3e	; 62
    31d4:	28 1b       	sub	r18, r24
    31d6:	39 0b       	sbc	r19, r25
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	3e bf       	out	0x3e, r19	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	2d bf       	out	0x3d, r18	; 61
    31e2:	8d b7       	in	r24, 0x3d	; 61
    31e4:	9e b7       	in	r25, 0x3e	; 62
    31e6:	01 96       	adiw	r24, 0x01	; 1
    31e8:	9e 87       	std	Y+14, r25	; 0x0e
    31ea:	8d 87       	std	Y+13, r24	; 0x0d
    31ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f0:	00 96       	adiw	r24, 0x00	; 0
    31f2:	9e 87       	std	Y+14, r25	; 0x0e
    31f4:	8d 87       	std	Y+13, r24	; 0x0d
    31f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31fa:	3d 83       	std	Y+5, r19	; 0x05
    31fc:	2c 83       	std	Y+4, r18	; 0x04

	for (u8 i = pageAddress; i < MAX_NUM_OF_PAGES; i++)
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	8a 83       	std	Y+2, r24	; 0x02
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	88 30       	cpi	r24, 0x08	; 8
    3206:	20 f5       	brcc	.+72     	; 0x3250 <EEPROM_Search+0xb4>
	{

		for (u8 j = 0; j < MAX_NUM_OF_BYTES; j += dataSize)
    3208:	19 82       	std	Y+1, r1	; 0x01
		{

			EEPROM_ReadString(i, j, tmp, dataSize);
    320a:	2c 81       	ldd	r18, Y+4	; 0x04
    320c:	3d 81       	ldd	r19, Y+5	; 0x05
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	69 81       	ldd	r22, Y+1	; 0x01
    3212:	a9 01       	movw	r20, r18
    3214:	28 85       	ldd	r18, Y+8	; 0x08
    3216:	0e 94 89 18 	call	0x3112	; 0x3112 <EEPROM_ReadString>

			if ( strcmp(string, tmp) == 0 )
    321a:	2c 81       	ldd	r18, Y+4	; 0x04
    321c:	3d 81       	ldd	r19, Y+5	; 0x05
    321e:	8e 81       	ldd	r24, Y+6	; 0x06
    3220:	9f 81       	ldd	r25, Y+7	; 0x07
    3222:	b9 01       	movw	r22, r18
    3224:	0e 94 7d 24 	call	0x48fa	; 0x48fa <strcmp>
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f4       	brne	.+26     	; 0x3246 <EEPROM_Search+0xaa>
			{
				// Page Address | Byte Address
				return  ( i << 8 | j);
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	38 2f       	mov	r19, r24
    3234:	22 27       	eor	r18, r18
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	82 2b       	or	r24, r18
    323e:	93 2b       	or	r25, r19
    3240:	9c 87       	std	Y+12, r25	; 0x0c
    3242:	8b 87       	std	Y+11, r24	; 0x0b
    3244:	07 c0       	rjmp	.+14     	; 0x3254 <EEPROM_Search+0xb8>
	u8 tmp[dataSize];

	for (u8 i = pageAddress; i < MAX_NUM_OF_PAGES; i++)
	{

		for (u8 j = 0; j < MAX_NUM_OF_BYTES; j += dataSize)
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	98 85       	ldd	r25, Y+8	; 0x08
    324a:	89 0f       	add	r24, r25
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	dd cf       	rjmp	.-70     	; 0x320a <EEPROM_Search+0x6e>
			}

		}
	}

	return 0;
    3250:	1c 86       	std	Y+12, r1	; 0x0c
    3252:	1b 86       	std	Y+11, r1	; 0x0b
    3254:	89 85       	ldd	r24, Y+9	; 0x09
    3256:	9a 85       	ldd	r25, Y+10	; 0x0a
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	9e bf       	out	0x3e, r25	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	8d bf       	out	0x3d, r24	; 61
    3262:	8b 85       	ldd	r24, Y+11	; 0x0b
    3264:	9c 85       	ldd	r25, Y+12	; 0x0c

}
    3266:	2f 85       	ldd	r18, Y+15	; 0x0f
    3268:	38 89       	ldd	r19, Y+16	; 0x10
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	3e bf       	out	0x3e, r19	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	2d bf       	out	0x3d, r18	; 61
    3274:	60 96       	adiw	r28, 0x10	; 16
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <DCMotor_Init>:
#define SOURCE_02_ECUA_DCMOTOR_SRC_DCMOTOR_C_

#include "DCMotor.h"

void DCMotor_Init(dcmotor_motorID_t motorID)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <DCMotor_Init+0x6>
    328c:	0f 92       	push	r0
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	89 83       	std	Y+1, r24	; 0x01

	switch (motorID)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	28 2f       	mov	r18, r24
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	3b 83       	std	Y+3, r19	; 0x03
    329c:	2a 83       	std	Y+2, r18	; 0x02
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	31 f0       	breq	.+12     	; 0x32b2 <DCMotor_Init+0x2c>
    32a6:	2a 81       	ldd	r18, Y+2	; 0x02
    32a8:	3b 81       	ldd	r19, Y+3	; 0x03
    32aa:	21 30       	cpi	r18, 0x01	; 1
    32ac:	31 05       	cpc	r19, r1
    32ae:	b1 f0       	breq	.+44     	; 0x32dc <DCMotor_Init+0x56>
    32b0:	29 c0       	rjmp	.+82     	; 0x3304 <DCMotor_Init+0x7e>
	{

	case DCMOTOR_1:
		// Enable
		Dio_configChanel(DIO_PORTD, DIO_PIN4, DIO_OUTPUT);
    32b2:	83 e0       	ldi	r24, 0x03	; 3
    32b4:	64 e0       	ldi	r22, 0x04	; 4
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
		// Motor is stop
		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_LOW);
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	64 e0       	ldi	r22, 0x04	; 4
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

		// Switches of H bridges
		Dio_configChanel(DIO_PORTC, DIO_PIN3, DIO_OUTPUT);
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	63 e0       	ldi	r22, 0x03	; 3
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
		Dio_configChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	64 e0       	ldi	r22, 0x04	; 4
    32d4:	41 e0       	ldi	r20, 0x01	; 1
    32d6:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <DCMotor_Init+0x7e>
		break;

	case DCMOTOR_2:
		// Enable
		Dio_configChanel(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	65 e0       	ldi	r22, 0x05	; 5
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
		// Motor is stop
		Dio_writeChanel(DIO_PORTD, DIO_PIN5, DIO_LOW);
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	65 e0       	ldi	r22, 0x05	; 5
    32ea:	40 e0       	ldi	r20, 0x00	; 0
    32ec:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

		// Switches of H bridges
		Dio_configChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	65 e0       	ldi	r22, 0x05	; 5
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
		Dio_configChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
    32fa:	82 e0       	ldi	r24, 0x02	; 2
    32fc:	66 e0       	ldi	r22, 0x06	; 6
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
		break;

	}


}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <DCMotor_Start>:


void DCMotor_Start(dcmotor_motorID_t motor, dcmotor_direction_t direction)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	28 97       	sbiw	r28, 0x08	; 8
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	6a 83       	std	Y+2, r22	; 0x02

	switch(motor)
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	38 87       	std	Y+8, r19	; 0x08
    3330:	2f 83       	std	Y+7, r18	; 0x07
    3332:	8f 81       	ldd	r24, Y+7	; 0x07
    3334:	98 85       	ldd	r25, Y+8	; 0x08
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	31 f0       	breq	.+12     	; 0x3346 <DCMotor_Start+0x36>
    333a:	2f 81       	ldd	r18, Y+7	; 0x07
    333c:	38 85       	ldd	r19, Y+8	; 0x08
    333e:	21 30       	cpi	r18, 0x01	; 1
    3340:	31 05       	cpc	r19, r1
    3342:	59 f1       	breq	.+86     	; 0x339a <DCMotor_Start+0x8a>
    3344:	53 c0       	rjmp	.+166    	; 0x33ec <DCMotor_Start+0xdc>
	{

	case DCMOTOR_1:

		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_HIGH);
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	64 e0       	ldi	r22, 0x04	; 4
    334a:	41 e0       	ldi	r20, 0x01	; 1
    334c:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		switch (direction)
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	3e 83       	std	Y+6, r19	; 0x06
    3358:	2d 83       	std	Y+5, r18	; 0x05
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	31 f0       	breq	.+12     	; 0x336e <DCMotor_Start+0x5e>
    3362:	2d 81       	ldd	r18, Y+5	; 0x05
    3364:	3e 81       	ldd	r19, Y+6	; 0x06
    3366:	21 30       	cpi	r18, 0x01	; 1
    3368:	31 05       	cpc	r19, r1
    336a:	61 f0       	breq	.+24     	; 0x3384 <DCMotor_Start+0x74>
    336c:	3f c0       	rjmp	.+126    	; 0x33ec <DCMotor_Start+0xdc>
		{

		case DCMOTOR_CLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN3, DIO_HIGH);
    336e:	82 e0       	ldi	r24, 0x02	; 2
    3370:	63 e0       	ldi	r22, 0x03	; 3
    3372:	41 e0       	ldi	r20, 0x01	; 1
    3374:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    3378:	82 e0       	ldi	r24, 0x02	; 2
    337a:	64 e0       	ldi	r22, 0x04	; 4
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    3382:	34 c0       	rjmp	.+104    	; 0x33ec <DCMotor_Start+0xdc>
			break;

		case DCMOTOR_ANTICLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN3, DIO_LOW);
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    338e:	82 e0       	ldi	r24, 0x02	; 2
    3390:	64 e0       	ldi	r22, 0x04	; 4
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    3398:	29 c0       	rjmp	.+82     	; 0x33ec <DCMotor_Start+0xdc>
		}

		break;
	case DCMOTOR_2:

		Dio_writeChanel(DIO_PORTD, DIO_PIN5, DIO_HIGH);
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	65 e0       	ldi	r22, 0x05	; 5
    339e:	41 e0       	ldi	r20, 0x01	; 1
    33a0:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		switch (direction)
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	3c 83       	std	Y+4, r19	; 0x04
    33ac:	2b 83       	std	Y+3, r18	; 0x03
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	31 f0       	breq	.+12     	; 0x33c2 <DCMotor_Start+0xb2>
    33b6:	2b 81       	ldd	r18, Y+3	; 0x03
    33b8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ba:	21 30       	cpi	r18, 0x01	; 1
    33bc:	31 05       	cpc	r19, r1
    33be:	61 f0       	breq	.+24     	; 0x33d8 <DCMotor_Start+0xc8>
    33c0:	15 c0       	rjmp	.+42     	; 0x33ec <DCMotor_Start+0xdc>
		{

		case DCMOTOR_CLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	65 e0       	ldi	r22, 0x05	; 5
    33c6:	41 e0       	ldi	r20, 0x01	; 1
    33c8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    33cc:	82 e0       	ldi	r24, 0x02	; 2
    33ce:	66 e0       	ldi	r22, 0x06	; 6
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    33d6:	0a c0       	rjmp	.+20     	; 0x33ec <DCMotor_Start+0xdc>
			break;

		case DCMOTOR_ANTICLOCKWISE:
			Dio_writeChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	65 e0       	ldi	r22, 0x05	; 5
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
			Dio_writeChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	66 e0       	ldi	r22, 0x06	; 6
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

		break;

	}

}
    33ec:	28 96       	adiw	r28, 0x08	; 8
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <DCMotor_Stop>:

void DCMotor_Stop(dcmotor_motorID_t motor)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	00 d0       	rcall	.+0      	; 0x3404 <DCMotor_Stop+0x6>
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	89 83       	std	Y+1, r24	; 0x01

	switch(motor)
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	28 2f       	mov	r18, r24
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	3b 83       	std	Y+3, r19	; 0x03
    3414:	2a 83       	std	Y+2, r18	; 0x02
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	9b 81       	ldd	r25, Y+3	; 0x03
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	31 f0       	breq	.+12     	; 0x342a <DCMotor_Stop+0x2c>
    341e:	2a 81       	ldd	r18, Y+2	; 0x02
    3420:	3b 81       	ldd	r19, Y+3	; 0x03
    3422:	21 30       	cpi	r18, 0x01	; 1
    3424:	31 05       	cpc	r19, r1
    3426:	39 f0       	breq	.+14     	; 0x3436 <DCMotor_Stop+0x38>
    3428:	0b c0       	rjmp	.+22     	; 0x3440 <DCMotor_Stop+0x42>
	{

	case DCMOTOR_1:
		Dio_writeChanel(DIO_PORTD, DIO_PIN4, DIO_LOW);
    342a:	83 e0       	ldi	r24, 0x03	; 3
    342c:	64 e0       	ldi	r22, 0x04	; 4
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
    3434:	05 c0       	rjmp	.+10     	; 0x3440 <DCMotor_Stop+0x42>
		break;
	case DCMOTOR_2:
		Dio_writeChanel(DIO_PORTD, DIO_PIN5, DIO_LOW);
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	65 e0       	ldi	r22, 0x05	; 5
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>
		break;

	}

}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init()
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTA, DIO_PIN3, DIO_OUTPUT);
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	63 e0       	ldi	r22, 0x03	; 3
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <Buzzer_turnOn>:

void Buzzer_turnOn()
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62

	Dio_writeChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	63 e0       	ldi	r22, 0x03	; 3
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <Buzzer_turnOff>:

void Buzzer_turnOff()
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62

	Dio_writeChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	63 e0       	ldi	r22, 0x03	; 3
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <Button_buttonInit>:
 */

#include "Button.h"

void Button_buttonInit()
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62

	Dio_configChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	66 e0       	ldi	r22, 0x06	; 6
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	Dio_configChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <Button_udtisPressed>:

button_buttonState_t Button_udtisPressed(button_buttonId_t button)
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <Button_udtisPressed+0x6>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <Button_udtisPressed+0x8>
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	8a 83       	std	Y+2, r24	; 0x02

	button_buttonState_t returnValue = 0;
    34ce:	19 82       	std	Y+1, r1	; 0x01

	switch (button)
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	3c 83       	std	Y+4, r19	; 0x04
    34d8:	2b 83       	std	Y+3, r18	; 0x03
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	9c 81       	ldd	r25, Y+4	; 0x04
    34de:	81 30       	cpi	r24, 0x01	; 1
    34e0:	91 05       	cpc	r25, r1
    34e2:	79 f0       	breq	.+30     	; 0x3502 <Button_udtisPressed+0x42>
    34e4:	2b 81       	ldd	r18, Y+3	; 0x03
    34e6:	3c 81       	ldd	r19, Y+4	; 0x04
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 05       	cpc	r19, r1
    34ec:	81 f0       	breq	.+32     	; 0x350e <Button_udtisPressed+0x4e>
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	9c 81       	ldd	r25, Y+4	; 0x04
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	89 f4       	brne	.+34     	; 0x3518 <Button_udtisPressed+0x58>
	{
		case BUTTON0:
			returnValue = Dio_udtreadChanel(DIO_PORTB, DIO_PIN0);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	0b c0       	rjmp	.+22     	; 0x3518 <Button_udtisPressed+0x58>
			break;

		case BUTTON1:
			returnValue = Dio_udtreadChanel(DIO_PORTD, DIO_PIN6);
    3502:	83 e0       	ldi	r24, 0x03	; 3
    3504:	66 e0       	ldi	r22, 0x06	; 6
    3506:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	05 c0       	rjmp	.+10     	; 0x3518 <Button_udtisPressed+0x58>
			break;
		case BUTTON2:
			returnValue = Dio_udtreadChanel(DIO_PORTD, DIO_PIN2);
    350e:	83 e0       	ldi	r24, 0x03	; 3
    3510:	62 e0       	ldi	r22, 0x02	; 2
    3512:	0e 94 4e 22 	call	0x449c	; 0x449c <Dio_udtreadChanel>
    3516:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return returnValue;
    3518:	89 81       	ldd	r24, Y+1	; 0x01

}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <Watchdog_ON>:
#include "watchdog.h"



void Watchdog_ON()
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
	/*
	Watchdog timer enables with typical timeout period 2.1
	second.
	*/
	// One Second
	WDTCR = (1<<3)|(1<<2)|(1<<1);
    3530:	e1 e4       	ldi	r30, 0x41	; 65
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	8e e0       	ldi	r24, 0x0E	; 14
    3536:	80 83       	st	Z, r24
}
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <Watchdog_OFF>:

void Watchdog_OFF()
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
	/*
	This function use for disable the watchdog timer.
	*/
	WDTCR = (1<<4)|(1<<3);
    3546:	e1 e4       	ldi	r30, 0x41	; 65
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	88 e1       	ldi	r24, 0x18	; 24
    354c:	80 83       	st	Z, r24
	WDTCR = 0x00;
    354e:	e1 e4       	ldi	r30, 0x41	; 65
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	10 82       	st	Z, r1
}
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <UART_Init>:

#include "UART.h"
#include "Led.h"

void UART_Init(u32 baudrate)
{
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	28 97       	sbiw	r28, 0x08	; 8
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	6d 83       	std	Y+5, r22	; 0x05
    3570:	7e 83       	std	Y+6, r23	; 0x06
    3572:	8f 83       	std	Y+7, r24	; 0x07
    3574:	98 87       	std	Y+8, r25	; 0x08

	// Enable Tx, Rx
	UART_UCSRB_REG |= 3 << 3;
    3576:	aa e2       	ldi	r26, 0x2A	; 42
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	ea e2       	ldi	r30, 0x2A	; 42
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	88 61       	ori	r24, 0x18	; 24
    3582:	8c 93       	st	X, r24

	// Set baudrate
	u32 ubrr = ( 16000000UL / (16 * baudrate) - 1);
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	af 81       	ldd	r26, Y+7	; 0x07
    358a:	b8 85       	ldd	r27, Y+8	; 0x08
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	aa 1f       	adc	r26, r26
    3592:	bb 1f       	adc	r27, r27
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	aa 1f       	adc	r26, r26
    359a:	bb 1f       	adc	r27, r27
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	aa 1f       	adc	r26, r26
    35a2:	bb 1f       	adc	r27, r27
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	aa 1f       	adc	r26, r26
    35aa:	bb 1f       	adc	r27, r27
    35ac:	9c 01       	movw	r18, r24
    35ae:	ad 01       	movw	r20, r26
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	94 e2       	ldi	r25, 0x24	; 36
    35b4:	a4 ef       	ldi	r26, 0xF4	; 244
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 09 24 	call	0x4812	; 0x4812 <__udivmodsi4>
    35c0:	da 01       	movw	r26, r20
    35c2:	c9 01       	movw	r24, r18
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	a1 09       	sbc	r26, r1
    35c8:	b1 09       	sbc	r27, r1
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	ab 83       	std	Y+3, r26	; 0x03
    35d0:	bc 83       	std	Y+4, r27	; 0x04
	UART_UBRRH_REG |= ubrr >> 8;
    35d2:	20 e4       	ldi	r18, 0x40	; 64
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	e0 e4       	ldi	r30, 0x40	; 64
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	40 81       	ld	r20, Z
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	ab 81       	ldd	r26, Y+3	; 0x03
    35e2:	bc 81       	ldd	r27, Y+4	; 0x04
    35e4:	89 2f       	mov	r24, r25
    35e6:	9a 2f       	mov	r25, r26
    35e8:	ab 2f       	mov	r26, r27
    35ea:	bb 27       	eor	r27, r27
    35ec:	84 2b       	or	r24, r20
    35ee:	f9 01       	movw	r30, r18
    35f0:	80 83       	st	Z, r24
	UART_UBRRL_REG |= ubrr;
    35f2:	a9 e2       	ldi	r26, 0x29	; 41
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e9 e2       	ldi	r30, 0x29	; 41
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	90 81       	ld	r25, Z
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	89 2b       	or	r24, r25
    3600:	8c 93       	st	X, r24

	// Write in UCSRC, set frame size to 8-bit
	UART_UCSRC_REG |= (1 << 7) | (3 << 1);
    3602:	a0 e4       	ldi	r26, 0x40	; 64
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e0 e4       	ldi	r30, 0x40	; 64
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	86 68       	ori	r24, 0x86	; 134
    360e:	8c 93       	st	X, r24

	// By default stop bit -> 1 bit
	// By default parity bit is disabled

}
    3610:	28 96       	adiw	r28, 0x08	; 8
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <UART_Receive>:

u8 UART_Receive()
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62

	// Wait for unread data
//	while ( !((UART_UCSRA_REG >> 7) & 1) );
	if ( ((UART_UCSRA_REG >> 3) & 1) )
    362c:	eb e2       	ldi	r30, 0x2B	; 43
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	86 95       	lsr	r24
    3634:	86 95       	lsr	r24
    3636:	86 95       	lsr	r24
    3638:	88 2f       	mov	r24, r24
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	81 70       	andi	r24, 0x01	; 1
    363e:	90 70       	andi	r25, 0x00	; 0
    3640:	88 23       	and	r24, r24
    3642:	19 f0       	breq	.+6      	; 0x364a <UART_Receive+0x28>
	{
		Led_toggle(LED1);
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <Led_toggle>
	}

	if ( ((UART_UCSRA_REG >> 7) & 1) )
    364a:	eb e2       	ldi	r30, 0x2B	; 43
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	88 23       	and	r24, r24
    3652:	2c f4       	brge	.+10     	; 0x365e <UART_Receive+0x3c>
	{
		return UART_UDR_REG;
    3654:	ec e2       	ldi	r30, 0x2C	; 44
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	01 c0       	rjmp	.+2      	; 0x3660 <UART_Receive+0x3e>
	}
	else
	{
		return '\0';
    365e:	19 82       	std	Y+1, r1	; 0x01
    3660:	89 81       	ldd	r24, Y+1	; 0x01
	}


}
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <UART_Transmit>:

void UART_Transmit(u8 data)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	89 83       	std	Y+1, r24	; 0x01
	// Wait for unread data (flag is 1 if it is ready)
	while (((UART_UCSRA_REG >> 5) & 1) == 0);
    3676:	eb e2       	ldi	r30, 0x2B	; 43
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	82 95       	swap	r24
    367e:	86 95       	lsr	r24
    3680:	87 70       	andi	r24, 0x07	; 7
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	81 70       	andi	r24, 0x01	; 1
    3688:	90 70       	andi	r25, 0x00	; 0
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	a1 f3       	breq	.-24     	; 0x3676 <UART_Transmit+0xc>

	UART_UDR_REG = data;
    368e:	ec e2       	ldi	r30, 0x2C	; 44
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	80 83       	st	Z, r24

}
    3696:	0f 90       	pop	r0
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <UART_SendString>:

void UART_SendString(u8* string)
{
    369e:	df 93       	push	r29
    36a0:	cf 93       	push	r28
    36a2:	00 d0       	rcall	.+0      	; 0x36a4 <UART_SendString+0x6>
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <UART_SendString+0x8>
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03

	for (u8* i = string; *i != '\0'; i++)
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	0a c0       	rjmp	.+20     	; 0x36cc <UART_SendString+0x2e>
	{

		UART_Transmit(*i);
    36b8:	e9 81       	ldd	r30, Y+1	; 0x01
    36ba:	fa 81       	ldd	r31, Y+2	; 0x02
    36bc:	80 81       	ld	r24, Z
    36be:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_Transmit>
}

void UART_SendString(u8* string)
{

	for (u8* i = string; *i != '\0'; i++)
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	9a 83       	std	Y+2, r25	; 0x02
    36ca:	89 83       	std	Y+1, r24	; 0x01
    36cc:	e9 81       	ldd	r30, Y+1	; 0x01
    36ce:	fa 81       	ldd	r31, Y+2	; 0x02
    36d0:	80 81       	ld	r24, Z
    36d2:	88 23       	and	r24, r24
    36d4:	89 f7       	brne	.-30     	; 0x36b8 <UART_SendString+0x1a>

		UART_Transmit(*i);

	}

}
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <UART_ReciveString>:


void UART_ReciveString(u8* string, u8 size)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <UART_ReciveString+0x6>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <UART_ReciveString+0x8>
    36ec:	0f 92       	push	r0
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	9c 83       	std	Y+4, r25	; 0x04
    36f4:	8b 83       	std	Y+3, r24	; 0x03
    36f6:	6d 83       	std	Y+5, r22	; 0x05
	
	
	u8 tmp = UART_Receive();
    36f8:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_Receive>
    36fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	10 c0       	rjmp	.+32     	; 0x3722 <UART_ReciveString+0x3e>


	while ((tmp != '\n') && (tmp != '\r') && (tmp != '\0') && (i < size - 1))
	{

		string[i] = tmp;
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	8b 81       	ldd	r24, Y+3	; 0x03
    370a:	9c 81       	ldd	r25, Y+4	; 0x04
    370c:	fc 01       	movw	r30, r24
    370e:	e2 0f       	add	r30, r18
    3710:	f3 1f       	adc	r31, r19
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	80 83       	st	Z, r24
		tmp = UART_Receive();
    3716:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_Receive>
    371a:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	89 83       	std	Y+1, r24	; 0x01
	
	u8 tmp = UART_Receive();
	u8 i = 0;


	while ((tmp != '\n') && (tmp != '\r') && (tmp != '\0') && (i < size - 1))
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	8a 30       	cpi	r24, 0x0A	; 10
    3726:	81 f0       	breq	.+32     	; 0x3748 <UART_ReciveString+0x64>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	8d 30       	cpi	r24, 0x0D	; 13
    372c:	69 f0       	breq	.+26     	; 0x3748 <UART_ReciveString+0x64>
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	88 23       	and	r24, r24
    3732:	51 f0       	breq	.+20     	; 0x3748 <UART_ReciveString+0x64>
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	28 2f       	mov	r18, r24
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	8d 81       	ldd	r24, Y+5	; 0x05
    373c:	88 2f       	mov	r24, r24
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	28 17       	cp	r18, r24
    3744:	39 07       	cpc	r19, r25
    3746:	ec f2       	brlt	.-70     	; 0x3702 <UART_ReciveString+0x1e>
		i++;

	}

	// For precise memory allocation, add 1 to the size of the array for the null char
	string[i] = '\0';
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	28 2f       	mov	r18, r24
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	9c 81       	ldd	r25, Y+4	; 0x04
    3752:	fc 01       	movw	r30, r24
    3754:	e2 0f       	add	r30, r18
    3756:	f3 1f       	adc	r31, r19
    3758:	10 82       	st	Z, r1

}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <Timer1_SetFastPWM>:
#include "Timer1.h"

static u8 top = 0;

static void Timer1_SetFastPWM()
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62

	// Set Fast PWM, TOP in ICR1, Clear OC1A on compare match
	TCCR1A_REG = (1<<1)|(1<<7);
    3772:	ef e4       	ldi	r30, 0x4F	; 79
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	82 e8       	ldi	r24, 0x82	; 130
    3778:	80 83       	st	Z, r24
	TCCR1B_REG = (1<<3)|(1<<4);
    377a:	ee e4       	ldi	r30, 0x4E	; 78
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	88 e1       	ldi	r24, 0x18	; 24
    3780:	80 83       	st	Z, r24

	TCNT1L_REG = 0;
    3782:	ec e4       	ldi	r30, 0x4C	; 76
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	10 82       	st	Z, r1
	TCNT1H_REG = 0;
    3788:	ed e4       	ldi	r30, 0x4D	; 77
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	10 82       	st	Z, r1

	// Set DDR as output
	Dio_configChanel(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    378e:	83 e0       	ldi	r24, 0x03	; 3
    3790:	65 e0       	ldi	r22, 0x05	; 5
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <Timer1_Init>:

void Timer1_Init(timer1_waveform_t waveform)
{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	0f 92       	push	r0
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	89 83       	std	Y+1, r24	; 0x01

	// Global Interrupt
	GIE_EnableGlobalInterrupt();
    37aa:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <GIE_EnableGlobalInterrupt>

	// Select Mode (waveform)
	switch(waveform)
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	83 30       	cpi	r24, 0x03	; 3
    37b6:	91 05       	cpc	r25, r1
    37b8:	11 f4       	brne	.+4      	; 0x37be <Timer1_Init+0x20>
//	case TIMER1_CTC:
//		Timer1_SetCTC();
//		break;

	case TIMER1_FAST_PWM:
		Timer1_SetFastPWM();
    37ba:	0e 94 b5 1b 	call	0x376a	; 0x376a <Timer1_SetFastPWM>
		break;

	}

}
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <Timer1_Start>:

void Timer1_Start(timer1_clockSelect_t clockSelect)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	0f 92       	push	r0
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	89 83       	std	Y+1, r24	; 0x01

	// Clock select (Prescale)
	TCCR1B_REG |= clockSelect;
    37d2:	ae e4       	ldi	r26, 0x4E	; 78
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	ee e4       	ldi	r30, 0x4E	; 78
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	90 81       	ld	r25, Z
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	89 2b       	or	r24, r25
    37e0:	8c 93       	st	X, r24

}
    37e2:	0f 90       	pop	r0
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <Timer1_Stop>:

void Timer1_Stop()
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62

	// Stop Timer/Counter by clearing prescaler
	TCCR1B_REG &= 0xf8;
    37f2:	ae e4       	ldi	r26, 0x4E	; 78
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	ee e4       	ldi	r30, 0x4E	; 78
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	88 7f       	andi	r24, 0xF8	; 248
    37fe:	8c 93       	st	X, r24

}
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <Timer1_SetDuty>:


// For PWM Modes
void Timer1_SetDuty(u8 dutyPercentage)
{
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	00 d0       	rcall	.+0      	; 0x3814 <Timer1_SetDuty+0xe>
    3814:	0f 92       	push	r0
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	8b 83       	std	Y+3, r24	; 0x03

	u16 tmp = (top * ((f32) dutyPercentage / 100));
    381c:	80 91 8c 02 	lds	r24, 0x028C
    3820:	88 2f       	mov	r24, r24
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	aa 27       	eor	r26, r26
    3826:	97 fd       	sbrc	r25, 7
    3828:	a0 95       	com	r26
    382a:	ba 2f       	mov	r27, r26
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3834:	7b 01       	movw	r14, r22
    3836:	8c 01       	movw	r16, r24
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	88 2f       	mov	r24, r24
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	a0 e0       	ldi	r26, 0x00	; 0
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	bc 01       	movw	r22, r24
    3844:	cd 01       	movw	r24, r26
    3846:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	48 ec       	ldi	r20, 0xC8	; 200
    3858:	52 e4       	ldi	r21, 0x42	; 66
    385a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	9c 01       	movw	r18, r24
    3864:	ad 01       	movw	r20, r26
    3866:	c8 01       	movw	r24, r16
    3868:	b7 01       	movw	r22, r14
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL_REG = tmp;
    3882:	ea e4       	ldi	r30, 0x4A	; 74
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	80 83       	st	Z, r24
	OCR1AH_REG = tmp << 8;
    388a:	eb e4       	ldi	r30, 0x4B	; 75
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	10 82       	st	Z, r1

}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	08 95       	ret

000038a4 <Timer1_SetFrequency>:

void Timer1_SetFrequency(u8 frequency)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	89 83       	std	Y+1, r24	; 0x01

	top = ( (16000000) / (frequency * 64) ) - 1;
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	00 24       	eor	r0, r0
    38b8:	96 95       	lsr	r25
    38ba:	87 95       	ror	r24
    38bc:	07 94       	ror	r0
    38be:	96 95       	lsr	r25
    38c0:	87 95       	ror	r24
    38c2:	07 94       	ror	r0
    38c4:	98 2f       	mov	r25, r24
    38c6:	80 2d       	mov	r24, r0
    38c8:	9c 01       	movw	r18, r24
    38ca:	44 27       	eor	r20, r20
    38cc:	37 fd       	sbrc	r19, 7
    38ce:	40 95       	com	r20
    38d0:	54 2f       	mov	r21, r20
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	94 e2       	ldi	r25, 0x24	; 36
    38d6:	a4 ef       	ldi	r26, 0xF4	; 244
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 2b 24 	call	0x4856	; 0x4856 <__divmodsi4>
    38e2:	da 01       	movw	r26, r20
    38e4:	c9 01       	movw	r24, r18
    38e6:	81 50       	subi	r24, 0x01	; 1
    38e8:	80 93 8c 02 	sts	0x028C, r24

	ICR1L_REG = top;
    38ec:	e6 e4       	ldi	r30, 0x46	; 70
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 91 8c 02 	lds	r24, 0x028C
    38f4:	80 83       	st	Z, r24
	ICR1H_REG = top << 8;
    38f6:	e7 e4       	ldi	r30, 0x47	; 71
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	10 82       	st	Z, r1

}
    38fc:	0f 90       	pop	r0
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <Timer0_SetPWMPhaseControl>:
 */

#include "Timer0.h"

static void Timer0_SetPWMPhaseControl()
{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR0_REG, 6);
    390c:	a3 e5       	ldi	r26, 0x53	; 83
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	e3 e5       	ldi	r30, 0x53	; 83
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	80 64       	ori	r24, 0x40	; 64
    3918:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR0_REG |= 2 << 4;
    391a:	a3 e5       	ldi	r26, 0x53	; 83
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	e3 e5       	ldi	r30, 0x53	; 83
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	80 62       	ori	r24, 0x20	; 32
    3926:	8c 93       	st	X, r24

	// Set DDR as output
//	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	63 e0       	ldi	r22, 0x03	; 3
    392c:	41 e0       	ldi	r20, 0x01	; 1
    392e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

}
    3932:	cf 91       	pop	r28
    3934:	df 91       	pop	r29
    3936:	08 95       	ret

00003938 <Timer0_SetNormal>:

static void Timer0_SetNormal()
{
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer0 Interrupt overflow
	TIMSK_REG |= 1;
    3940:	a9 e5       	ldi	r26, 0x59	; 89
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e9 e5       	ldi	r30, 0x59	; 89
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	81 60       	ori	r24, 0x01	; 1
    394c:	8c 93       	st	X, r24

}
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <Timer0_SetCTC>:
static void Timer0_SetCTC()
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62

	// Enable Timer0 Interrupt overflow
	TIMSK_REG |= 2;
    395c:	a9 e5       	ldi	r26, 0x59	; 89
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e9 e5       	ldi	r30, 0x59	; 89
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	82 60       	ori	r24, 0x02	; 2
    3968:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 3);
    396a:	a3 e5       	ldi	r26, 0x53	; 83
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e3 e5       	ldi	r30, 0x53	; 83
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	88 60       	ori	r24, 0x08	; 8
    3976:	8c 93       	st	X, r24

}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <Timer0_SetFastPWM>:

static void Timer0_SetFastPWM()
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR0_REG, 6);
    3986:	a3 e5       	ldi	r26, 0x53	; 83
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e3 e5       	ldi	r30, 0x53	; 83
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	80 64       	ori	r24, 0x40	; 64
    3992:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 3);
    3994:	a3 e5       	ldi	r26, 0x53	; 83
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	e3 e5       	ldi	r30, 0x53	; 83
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	88 60       	ori	r24, 0x08	; 8
    39a0:	8c 93       	st	X, r24

	// Non-Inverted
	TCCR0_REG |= 2 << 4;
    39a2:	a3 e5       	ldi	r26, 0x53	; 83
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	e3 e5       	ldi	r30, 0x53	; 83
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	80 62       	ori	r24, 0x20	; 32
    39ae:	8c 93       	st	X, r24

	// Set DDR as output
	Dio_configChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	63 e0       	ldi	r22, 0x03	; 3
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
//	Dio_writeChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);

}
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <Timer0_Init>:

void Timer0_Init(timer0_waveform_t waveform)
{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <Timer0_Init+0x6>
    39c6:	0f 92       	push	r0
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	89 83       	std	Y+1, r24	; 0x01

	// Global Interrupt
	GIE_EnableGlobalInterrupt();
    39ce:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <GIE_EnableGlobalInterrupt>

	// Select Mode (waveform)
	switch(waveform)
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	3b 83       	std	Y+3, r19	; 0x03
    39da:	2a 83       	std	Y+2, r18	; 0x02
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	9b 81       	ldd	r25, Y+3	; 0x03
    39e0:	81 30       	cpi	r24, 0x01	; 1
    39e2:	91 05       	cpc	r25, r1
    39e4:	c1 f0       	breq	.+48     	; 0x3a16 <Timer0_Init+0x56>
    39e6:	2a 81       	ldd	r18, Y+2	; 0x02
    39e8:	3b 81       	ldd	r19, Y+3	; 0x03
    39ea:	22 30       	cpi	r18, 0x02	; 2
    39ec:	31 05       	cpc	r19, r1
    39ee:	2c f4       	brge	.+10     	; 0x39fa <Timer0_Init+0x3a>
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	9b 81       	ldd	r25, Y+3	; 0x03
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	61 f0       	breq	.+24     	; 0x3a10 <Timer0_Init+0x50>
    39f8:	16 c0       	rjmp	.+44     	; 0x3a26 <Timer0_Init+0x66>
    39fa:	2a 81       	ldd	r18, Y+2	; 0x02
    39fc:	3b 81       	ldd	r19, Y+3	; 0x03
    39fe:	22 30       	cpi	r18, 0x02	; 2
    3a00:	31 05       	cpc	r19, r1
    3a02:	61 f0       	breq	.+24     	; 0x3a1c <Timer0_Init+0x5c>
    3a04:	8a 81       	ldd	r24, Y+2	; 0x02
    3a06:	9b 81       	ldd	r25, Y+3	; 0x03
    3a08:	83 30       	cpi	r24, 0x03	; 3
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	51 f0       	breq	.+20     	; 0x3a22 <Timer0_Init+0x62>
    3a0e:	0b c0       	rjmp	.+22     	; 0x3a26 <Timer0_Init+0x66>
	{

	case TIMER0_NORMAL:
		Timer0_SetNormal();
    3a10:	0e 94 9c 1c 	call	0x3938	; 0x3938 <Timer0_SetNormal>
    3a14:	08 c0       	rjmp	.+16     	; 0x3a26 <Timer0_Init+0x66>
		break;
	case TIMER0_PWM_PHASE_CORRECT:
		Timer0_SetPWMPhaseControl();
    3a16:	0e 94 82 1c 	call	0x3904	; 0x3904 <Timer0_SetPWMPhaseControl>
    3a1a:	05 c0       	rjmp	.+10     	; 0x3a26 <Timer0_Init+0x66>
		break;
	case TIMER0_CTC:
		Timer0_SetCTC();
    3a1c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Timer0_SetCTC>
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <Timer0_Init+0x66>
		break;
	case TIMER0_FAST_PWM:
		Timer0_SetFastPWM();
    3a22:	0e 94 bf 1c 	call	0x397e	; 0x397e <Timer0_SetFastPWM>
		break;

	}

}
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <Timer0_SetPreload>:
// Normal | CTC



void Timer0_SetPreload(u8 preload)
{
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	0f 92       	push	r0
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	89 83       	std	Y+1, r24	; 0x01
	if (preload > 256)
	{
		return;
	}

	TCNT0_REG |= preload;
    3a3e:	a2 e5       	ldi	r26, 0x52	; 82
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e2 e5       	ldi	r30, 0x52	; 82
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	90 81       	ld	r25, Z
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	89 2b       	or	r24, r25
    3a4c:	8c 93       	st	X, r24

}
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <Timer0_SetTime>:

void Timer0_SetTime(u16 time)
{
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <Timer0_SetTime+0x6>
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <Timer0_SetTime+0x8>
    3a5e:	0f 92       	push	r0
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	9d 83       	std	Y+5, r25	; 0x05
    3a66:	8c 83       	std	Y+4, r24	; 0x04

	// Tick time = 1/prescale
	// Overload time = (256 - preload value) * Tick time
	// Preload = 256 - (time/Tick Time)

	u8 prescale = TCCR0_REG & 0x07;		// 0000 0111
    3a68:	e3 e5       	ldi	r30, 0x53	; 83
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	80 81       	ld	r24, Z
    3a6e:	87 70       	andi	r24, 0x07	; 7
    3a70:	8b 83       	std	Y+3, r24	; 0x03
	u8 tickTime = 1 / prescale;
    3a72:	8b 81       	ldd	r24, Y+3	; 0x03
    3a74:	28 2f       	mov	r18, r24
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	b9 01       	movw	r22, r18
    3a7e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__divmodhi4>
    3a82:	cb 01       	movw	r24, r22
    3a84:	8a 83       	std	Y+2, r24	; 0x02
	u8 preload = 256 - (time / tickTime);
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	28 2f       	mov	r18, r24
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	b9 01       	movw	r22, r18
    3a92:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__udivmodhi4>
    3a96:	cb 01       	movw	r24, r22
    3a98:	81 95       	neg	r24
    3a9a:	89 83       	std	Y+1, r24	; 0x01

	Timer0_SetPreload(preload);
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <Timer0_SetPreload>

}
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <Timer0_Start>:

void Timer0_Start(timer0_clockSelect_t clockSelect)
{
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	0f 92       	push	r0
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	89 83       	std	Y+1, r24	; 0x01

	// Clock select (Prescale)
	TCCR0_REG |= clockSelect;
    3abe:	a3 e5       	ldi	r26, 0x53	; 83
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	e3 e5       	ldi	r30, 0x53	; 83
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	90 81       	ld	r25, Z
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	89 2b       	or	r24, r25
    3acc:	8c 93       	st	X, r24

}
    3ace:	0f 90       	pop	r0
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	08 95       	ret

00003ad6 <Timer0_Stop>:

void Timer0_Stop()
{
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62

	// Stop Timer/Counter by clearing prescaler
	TCCR0_REG &= 0xf8;
    3ade:	a3 e5       	ldi	r26, 0x53	; 83
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e3 e5       	ldi	r30, 0x53	; 83
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	88 7f       	andi	r24, 0xF8	; 248
    3aea:	8c 93       	st	X, r24

}
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <Timer0_SetDuty>:


// For PWM Modes
void Timer0_SetDuty(u8 dutyPercentage)
{
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	0f 92       	push	r0
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	89 83       	std	Y+1, r24	; 0x01

	OCR0_REG = (u8) (255 * ((f32) dutyPercentage / 100));
    3b02:	0c e5       	ldi	r16, 0x5C	; 92
    3b04:	10 e0       	ldi	r17, 0x00	; 0
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	a0 e0       	ldi	r26, 0x00	; 0
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	bc 01       	movw	r22, r24
    3b12:	cd 01       	movw	r24, r26
    3b14:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	48 ec       	ldi	r20, 0xC8	; 200
    3b26:	52 e4       	ldi	r21, 0x42	; 66
    3b28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	4f e7       	ldi	r20, 0x7F	; 127
    3b3a:	53 e4       	ldi	r21, 0x43	; 67
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	f8 01       	movw	r30, r16
    3b52:	80 83       	st	Z, r24

}
    3b54:	0f 90       	pop	r0
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	08 95       	ret

00003b60 <Timer0_SetFrequency>:

void Timer0_SetFrequency(u8 frequency)
{
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	0f 92       	push	r0
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	89 83       	std	Y+1, r24	; 0x01



}
    3b6c:	0f 90       	pop	r0
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <TWI_initMaster>:
#define TWSR	(* (u8*) 0x21)
#define TWAR	(* (u8*) 0x22)
#define TWDR	(* (u8*) 0x23)

void TWI_initMaster(void)
{
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
	// Set Prescaller = 1
	CLR_BIT(TWSR,0);
    3b7c:	a1 e2       	ldi	r26, 0x21	; 33
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e1 e2       	ldi	r30, 0x21	; 33
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	8e 7f       	andi	r24, 0xFE	; 254
    3b88:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    3b8a:	a1 e2       	ldi	r26, 0x21	; 33
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	e1 e2       	ldi	r30, 0x21	; 33
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	8d 7f       	andi	r24, 0xFD	; 253
    3b96:	8c 93       	st	X, r24
	
	// Set Freq. = 400KHZ
	TWBR = 12;
    3b98:	e0 e2       	ldi	r30, 0x20	; 32
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	8c e0       	ldi	r24, 0x0C	; 12
    3b9e:	80 83       	st	Z, r24
	
	// Enable ACK 
	SET_BIT(TWCR,6);
    3ba0:	a6 e5       	ldi	r26, 0x56	; 86
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	e6 e5       	ldi	r30, 0x56	; 86
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
    3baa:	80 64       	ori	r24, 0x40	; 64
    3bac:	8c 93       	st	X, r24
	
	// Enable TWI
    SET_BIT(TWCR,2);	
    3bae:	a6 e5       	ldi	r26, 0x56	; 86
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	e6 e5       	ldi	r30, 0x56	; 86
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	84 60       	ori	r24, 0x04	; 4
    3bba:	8c 93       	st	X, r24
}
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <TWI_initSlave>:


void TWI_initSlave(u8 slaveAdd)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	0f 92       	push	r0
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	89 83       	std	Y+1, r24	; 0x01
	// Set Slave Address
	TWAR = slaveAdd<<1;
    3bce:	e2 e2       	ldi	r30, 0x22	; 34
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	88 0f       	add	r24, r24
    3bd6:	80 83       	st	Z, r24
	
	// Disable General Call
	CLR_BIT(TWAR,0);
    3bd8:	a2 e2       	ldi	r26, 0x22	; 34
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	e2 e2       	ldi	r30, 0x22	; 34
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	8e 7f       	andi	r24, 0xFE	; 254
    3be4:	8c 93       	st	X, r24
	
	// Enable ACK 
	SET_BIT(TWCR,6);
    3be6:	a6 e5       	ldi	r26, 0x56	; 86
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	e6 e5       	ldi	r30, 0x56	; 86
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	80 81       	ld	r24, Z
    3bf0:	80 64       	ori	r24, 0x40	; 64
    3bf2:	8c 93       	st	X, r24
	
	// Enable TWI
    SET_BIT(TWCR,2);
    3bf4:	a6 e5       	ldi	r26, 0x56	; 86
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e6 e5       	ldi	r30, 0x56	; 86
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	84 60       	ori	r24, 0x04	; 4
    3c00:	8c 93       	st	X, r24
}
    3c02:	0f 90       	pop	r0
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <TWI_sendStartCondition>:


void TWI_sendStartCondition(void)
{
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
	// Send Start Condition
	SET_BIT(TWCR,5);
    3c12:	a6 e5       	ldi	r26, 0x56	; 86
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	e6 e5       	ldi	r30, 0x56	; 86
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	80 62       	ori	r24, 0x20	; 32
    3c1e:	8c 93       	st	X, r24
	
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3c20:	a6 e5       	ldi	r26, 0x56	; 86
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	e6 e5       	ldi	r30, 0x56	; 86
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	80 68       	ori	r24, 0x80	; 128
    3c2c:	8c 93       	st	X, r24
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    3c2e:	e6 e5       	ldi	r30, 0x56	; 86
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	88 23       	and	r24, r24
    3c36:	dc f7       	brge	.-10     	; 0x3c2e <TWI_sendStartCondition+0x24>
	
	// Check ACK = SC ACK
	while((TWSR & 0xF8) != 0x08);
    3c38:	e1 e2       	ldi	r30, 0x21	; 33
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 2f       	mov	r24, r24
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	88 7f       	andi	r24, 0xF8	; 248
    3c44:	90 70       	andi	r25, 0x00	; 0
    3c46:	88 30       	cpi	r24, 0x08	; 8
    3c48:	91 05       	cpc	r25, r1
    3c4a:	b1 f7       	brne	.-20     	; 0x3c38 <TWI_sendStartCondition+0x2e>
}
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <TWI_sendRepStartCondition>:


void TWI_sendRepStartCondition(void)
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
	// Send Start Condition
	SET_BIT(TWCR,5);
    3c5a:	a6 e5       	ldi	r26, 0x56	; 86
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	e6 e5       	ldi	r30, 0x56	; 86
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	80 62       	ori	r24, 0x20	; 32
    3c66:	8c 93       	st	X, r24
	
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3c68:	a6 e5       	ldi	r26, 0x56	; 86
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	e6 e5       	ldi	r30, 0x56	; 86
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	80 68       	ori	r24, 0x80	; 128
    3c74:	8c 93       	st	X, r24
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    3c76:	e6 e5       	ldi	r30, 0x56	; 86
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	88 23       	and	r24, r24
    3c7e:	dc f7       	brge	.-10     	; 0x3c76 <TWI_sendRepStartCondition+0x24>
	
	// Check ACK = Repeated SC ACK
	while((TWSR & 0xF8) != 0x10);
    3c80:	e1 e2       	ldi	r30, 0x21	; 33
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	80 81       	ld	r24, Z
    3c86:	88 2f       	mov	r24, r24
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	88 7f       	andi	r24, 0xF8	; 248
    3c8c:	90 70       	andi	r25, 0x00	; 0
    3c8e:	80 31       	cpi	r24, 0x10	; 16
    3c90:	91 05       	cpc	r25, r1
    3c92:	b1 f7       	brne	.-20     	; 0x3c80 <TWI_sendRepStartCondition+0x2e>
}
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <TWI_sendStopCondition>:


void TWI_sendStopCondition(void)
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
	// Send Stop Condition
	SET_BIT(TWCR,4);
    3ca2:	a6 e5       	ldi	r26, 0x56	; 86
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	e6 e5       	ldi	r30, 0x56	; 86
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	80 61       	ori	r24, 0x10	; 16
    3cae:	8c 93       	st	X, r24
	
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3cb0:	a6 e5       	ldi	r26, 0x56	; 86
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	e6 e5       	ldi	r30, 0x56	; 86
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	80 68       	ori	r24, 0x80	; 128
    3cbc:	8c 93       	st	X, r24
}
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret

00003cc4 <TWI_sendSlaveAddwithWrite>:


void TWI_sendSlaveAddwithWrite(u8 slaveAdd)
{
    3cc4:	df 93       	push	r29
    3cc6:	cf 93       	push	r28
    3cc8:	0f 92       	push	r0
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	89 83       	std	Y+1, r24	; 0x01
	// Set slave address
	TWDR = slaveAdd<<1;
    3cd0:	e3 e2       	ldi	r30, 0x23	; 35
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	88 0f       	add	r24, r24
    3cd8:	80 83       	st	Z, r24
	
	// Select write operation
	CLR_BIT(TWDR,0);
    3cda:	a3 e2       	ldi	r26, 0x23	; 35
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e3 e2       	ldi	r30, 0x23	; 35
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	8e 7f       	andi	r24, 0xFE	; 254
    3ce6:	8c 93       	st	X, r24
	
	// Clear SC bit
	CLR_BIT(TWCR,5);
    3ce8:	a6 e5       	ldi	r26, 0x56	; 86
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e6 e5       	ldi	r30, 0x56	; 86
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8f 7d       	andi	r24, 0xDF	; 223
    3cf4:	8c 93       	st	X, r24
		
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3cf6:	a6 e5       	ldi	r26, 0x56	; 86
    3cf8:	b0 e0       	ldi	r27, 0x00	; 0
    3cfa:	e6 e5       	ldi	r30, 0x56	; 86
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	80 81       	ld	r24, Z
    3d00:	80 68       	ori	r24, 0x80	; 128
    3d02:	8c 93       	st	X, r24
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    3d04:	e6 e5       	ldi	r30, 0x56	; 86
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	88 23       	and	r24, r24
    3d0c:	dc f7       	brge	.-10     	; 0x3d04 <TWI_sendSlaveAddwithWrite+0x40>

	// Check ACK = Master transmit ( slave address + Write request ) ACK
	while((TWSR & 0xF8) != 0x18);
    3d0e:	e1 e2       	ldi	r30, 0x21	; 33
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	88 2f       	mov	r24, r24
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	88 7f       	andi	r24, 0xF8	; 248
    3d1a:	90 70       	andi	r25, 0x00	; 0
    3d1c:	88 31       	cpi	r24, 0x18	; 24
    3d1e:	91 05       	cpc	r25, r1
    3d20:	b1 f7       	brne	.-20     	; 0x3d0e <TWI_sendSlaveAddwithWrite+0x4a>
}
    3d22:	0f 90       	pop	r0
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <TWI_sendSlaveAddwithRead>:


void TWI_sendSlaveAddwithRead(u8 slaveAdd)
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	0f 92       	push	r0
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	89 83       	std	Y+1, r24	; 0x01
	// Set slave address
	TWDR = slaveAdd<<1;
    3d36:	e3 e2       	ldi	r30, 0x23	; 35
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	88 0f       	add	r24, r24
    3d3e:	80 83       	st	Z, r24
	
	// Select read operation
	SET_BIT(TWDR,0);
    3d40:	a3 e2       	ldi	r26, 0x23	; 35
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	e3 e2       	ldi	r30, 0x23	; 35
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
    3d4a:	81 60       	ori	r24, 0x01	; 1
    3d4c:	8c 93       	st	X, r24
	
	// Clear SC bit
	CLR_BIT(TWCR,5);
    3d4e:	a6 e5       	ldi	r26, 0x56	; 86
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	e6 e5       	ldi	r30, 0x56	; 86
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	8f 7d       	andi	r24, 0xDF	; 223
    3d5a:	8c 93       	st	X, r24
	
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3d5c:	a6 e5       	ldi	r26, 0x56	; 86
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e6 e5       	ldi	r30, 0x56	; 86
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	80 68       	ori	r24, 0x80	; 128
    3d68:	8c 93       	st	X, r24
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    3d6a:	e6 e5       	ldi	r30, 0x56	; 86
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	88 23       	and	r24, r24
    3d72:	dc f7       	brge	.-10     	; 0x3d6a <TWI_sendSlaveAddwithRead+0x40>
	
	// Check ACK = Master transmit ( slave address + Write request ) ACK
	while((TWSR & 0xF8) != 0x40);
    3d74:	e1 e2       	ldi	r30, 0x21	; 33
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	88 7f       	andi	r24, 0xF8	; 248
    3d80:	90 70       	andi	r25, 0x00	; 0
    3d82:	80 34       	cpi	r24, 0x40	; 64
    3d84:	91 05       	cpc	r25, r1
    3d86:	b1 f7       	brne	.-20     	; 0x3d74 <TWI_sendSlaveAddwithRead+0x4a>
}
    3d88:	0f 90       	pop	r0
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	08 95       	ret

00003d90 <TWI_sendMasterDataByte>:


void TWI_sendMasterDataByte(u8 data)
{
    3d90:	df 93       	push	r29
    3d92:	cf 93       	push	r28
    3d94:	0f 92       	push	r0
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	89 83       	std	Y+1, r24	; 0x01
	// Write Data into data register
	TWDR = data;
    3d9c:	e3 e2       	ldi	r30, 0x23	; 35
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	80 83       	st	Z, r24
	
	// Clear flag to start next job
	SET_BIT(TWCR,7);
    3da4:	a6 e5       	ldi	r26, 0x56	; 86
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	e6 e5       	ldi	r30, 0x56	; 86
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	80 81       	ld	r24, Z
    3dae:	80 68       	ori	r24, 0x80	; 128
    3db0:	8c 93       	st	X, r24
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    3db2:	e6 e5       	ldi	r30, 0x56	; 86
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	88 23       	and	r24, r24
    3dba:	dc f7       	brge	.-10     	; 0x3db2 <TWI_sendMasterDataByte+0x22>
	
	// Check ACK = Master transmit data ACK
	while((TWSR & 0xF8) != 0x28);
    3dbc:	e1 e2       	ldi	r30, 0x21	; 33
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	88 2f       	mov	r24, r24
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	88 7f       	andi	r24, 0xF8	; 248
    3dc8:	90 70       	andi	r25, 0x00	; 0
    3dca:	88 32       	cpi	r24, 0x28	; 40
    3dcc:	91 05       	cpc	r25, r1
    3dce:	b1 f7       	brne	.-20     	; 0x3dbc <TWI_sendMasterDataByte+0x2c>
}
    3dd0:	0f 90       	pop	r0
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <TWI_readMasterDataByte>:


void TWI_readMasterDataByte(u8* returnedData)
{
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <TWI_readMasterDataByte+0x6>
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	9a 83       	std	Y+2, r25	; 0x02
    3de4:	89 83       	std	Y+1, r24	; 0x01
	if(returnedData != 0)
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	e1 f0       	breq	.+56     	; 0x3e26 <TWI_readMasterDataByte+0x4e>
	{
		// Clear flag to start next job
	    SET_BIT(TWCR,7);
    3dee:	a6 e5       	ldi	r26, 0x56	; 86
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	e6 e5       	ldi	r30, 0x56	; 86
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	80 68       	ori	r24, 0x80	; 128
    3dfa:	8c 93       	st	X, r24
	    
	    // Wait for the flag
	    while(0 == GET_BIT(TWCR,7));
    3dfc:	e6 e5       	ldi	r30, 0x56	; 86
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	88 23       	and	r24, r24
    3e04:	dc f7       	brge	.-10     	; 0x3dfc <TWI_readMasterDataByte+0x24>
	    
	    // Check ACK = Master received data with ACK
	 while((TWSR & 0xF8) != 0x50);
    3e06:	e1 e2       	ldi	r30, 0x21	; 33
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	88 2f       	mov	r24, r24
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	88 7f       	andi	r24, 0xF8	; 248
    3e12:	90 70       	andi	r25, 0x00	; 0
    3e14:	80 35       	cpi	r24, 0x50	; 80
    3e16:	91 05       	cpc	r25, r1
    3e18:	b1 f7       	brne	.-20     	; 0x3e06 <TWI_readMasterDataByte+0x2e>
		
		// Read Data from data register
		*returnedData = TWDR;
    3e1a:	e3 e2       	ldi	r30, 0x23	; 35
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	80 81       	ld	r24, Z
    3e20:	e9 81       	ldd	r30, Y+1	; 0x01
    3e22:	fa 81       	ldd	r31, Y+2	; 0x02
    3e24:	80 83       	st	Z, r24
	}
}
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	cf 91       	pop	r28
    3e2c:	df 91       	pop	r29
    3e2e:	08 95       	ret

00003e30 <SPI_MasterInit>:
 */

#include "SPI.h"

void SPI_MasterInit()
{
    3e30:	df 93       	push	r29
    3e32:	cf 93       	push	r28
    3e34:	cd b7       	in	r28, 0x3d	; 61
    3e36:	de b7       	in	r29, 0x3e	; 62

	// SS should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	64 e0       	ldi	r22, 0x04	; 4
    3e3c:	41 e0       	ldi	r20, 0x01	; 1
    3e3e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	// SS set to high (No Slave Selected)
	Dio_writeChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	64 e0       	ldi	r22, 0x04	; 4
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	0e 94 0f 21 	call	0x421e	; 0x421e <Dio_writeChanel>

	// MOSI should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	65 e0       	ldi	r22, 0x05	; 5
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>
	// MISO should be input
	// SCK should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	67 e0       	ldi	r22, 0x07	; 7
    3e5a:	41 e0       	ldi	r20, 0x01	; 1
    3e5c:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Enable SPI
	SPI_SPCR_REG |= 1 << 6;
    3e60:	ad e2       	ldi	r26, 0x2D	; 45
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	ed e2       	ldi	r30, 0x2D	; 45
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	80 64       	ori	r24, 0x40	; 64
    3e6c:	8c 93       	st	X, r24

	// Master Mode
	SPI_SPCR_REG |= 1 << 4;
    3e6e:	ad e2       	ldi	r26, 0x2D	; 45
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	ed e2       	ldi	r30, 0x2D	; 45
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	80 61       	ori	r24, 0x10	; 16
    3e7a:	8c 93       	st	X, r24
	// MSB is transmitted first
	// Clock rising by default
	// Clock frequency is by default F_CPU / 4 -> 4 MHZ

	// Set clock as 1 MHZ
	SPI_SPCR_REG |= 1;
    3e7c:	ad e2       	ldi	r26, 0x2D	; 45
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	ed e2       	ldi	r30, 0x2D	; 45
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	81 60       	ori	r24, 0x01	; 1
    3e88:	8c 93       	st	X, r24

}
    3e8a:	cf 91       	pop	r28
    3e8c:	df 91       	pop	r29
    3e8e:	08 95       	ret

00003e90 <SPI_SlaveInit>:

void SPI_SlaveInit()
{
    3e90:	df 93       	push	r29
    3e92:	cf 93       	push	r28
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62

//	// SS should be output
//	Dio_configChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
	// MISO should be output
	Dio_configChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	66 e0       	ldi	r22, 0x06	; 6
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	0e 94 2c 20 	call	0x4058	; 0x4058 <Dio_configChanel>

	// Enable SPI
	SPI_SPCR_REG |= 1 << 6;
    3ea2:	ad e2       	ldi	r26, 0x2D	; 45
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	ed e2       	ldi	r30, 0x2D	; 45
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	80 81       	ld	r24, Z
    3eac:	80 64       	ori	r24, 0x40	; 64
    3eae:	8c 93       	st	X, r24

	// MSB is transmitted first
	// Clock rising by default
	// Clock frequency is by default F_CPU / 4

}
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <SPI_MasterTranser>:

u8 SPI_MasterTranser(u8 data)
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	0f 92       	push	r0
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	89 83       	std	Y+1, r24	; 0x01

	SPI_SPDR_REG = data;
    3ec2:	ef e2       	ldi	r30, 0x2F	; 47
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	80 83       	st	Z, r24

	// Wait for the flag
	while ( (SPI_SPSR_REG >> 7) & 1 == 0);

	return SPI_SPDR_REG;
    3eca:	ef e2       	ldi	r30, 0x2F	; 47
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	80 81       	ld	r24, Z

}
    3ed0:	0f 90       	pop	r0
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <SPI_MasterSend>:

void SPI_MasterSend(u8 data)
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	0f 92       	push	r0
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
    3ee2:	89 83       	std	Y+1, r24	; 0x01

	SPI_MasterTranser(data);
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <SPI_MasterTranser>

}
    3eea:	0f 90       	pop	r0
    3eec:	cf 91       	pop	r28
    3eee:	df 91       	pop	r29
    3ef0:	08 95       	ret

00003ef2 <SPI_MasterReceive>:

u8 SPI_MasterReceive()
{
    3ef2:	df 93       	push	r29
    3ef4:	cf 93       	push	r28
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62

	return SPI_MasterTranser(0);
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <SPI_MasterTranser>


}
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <SPI_SlaveSend>:

void SPI_SlaveSend(u8 data)
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	0f 92       	push	r0
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	89 83       	std	Y+1, r24	; 0x01

	SPI_SPDR_REG = data;
    3f12:	ef e2       	ldi	r30, 0x2F	; 47
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	80 83       	st	Z, r24

}
    3f1a:	0f 90       	pop	r0
    3f1c:	cf 91       	pop	r28
    3f1e:	df 91       	pop	r29
    3f20:	08 95       	ret

00003f22 <SPI_SlaveReceive>:

u8 SPI_SlaveReceive()
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62

	return SPI_MasterTranser(0);
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <SPI_MasterTranser>

}
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <GIE_EnableGlobalInterrupt>:
 */

#include "GIE.h"

void GIE_EnableGlobalInterrupt()
{
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GIE_SREG, GIE_l_bit);
    3f3e:	af e5       	ldi	r26, 0x5F	; 95
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	ef e5       	ldi	r30, 0x5F	; 95
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	80 81       	ld	r24, Z
    3f48:	80 68       	ori	r24, 0x80	; 128
    3f4a:	8c 93       	st	X, r24

}
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	08 95       	ret

00003f52 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt()
{
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(GIE_SREG, GIE_l_bit);
    3f5a:	af e5       	ldi	r26, 0x5F	; 95
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	ef e5       	ldi	r30, 0x5F	; 95
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	8f 77       	andi	r24, 0x7F	; 127
    3f66:	8c 93       	st	X, r24

}
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	08 95       	ret

00003f6e <EXTI_EnableInterrupt>:
 */

#include "EXTI.h"

void EXTI_EnableInterrupt(exti_intId_t intId, exti_senseControl_t senseControl)
{
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	00 d0       	rcall	.+0      	; 0x3f74 <EXTI_EnableInterrupt+0x6>
    3f74:	00 d0       	rcall	.+0      	; 0x3f76 <EXTI_EnableInterrupt+0x8>
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	6a 83       	std	Y+2, r22	; 0x02

	// Enable
	SET_BIT(GICR_REG, intId);
    3f7e:	ab e5       	ldi	r26, 0x5B	; 91
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	eb e5       	ldi	r30, 0x5B	; 91
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	80 81       	ld	r24, Z
    3f88:	48 2f       	mov	r20, r24
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	28 2f       	mov	r18, r24
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	02 c0       	rjmp	.+4      	; 0x3f9a <EXTI_EnableInterrupt+0x2c>
    3f96:	88 0f       	add	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	2a 95       	dec	r18
    3f9c:	e2 f7       	brpl	.-8      	; 0x3f96 <EXTI_EnableInterrupt+0x28>
    3f9e:	84 2b       	or	r24, r20
    3fa0:	8c 93       	st	X, r24

	// Set sensor control
	switch (intId) {
    3fa2:	89 81       	ldd	r24, Y+1	; 0x01
    3fa4:	28 2f       	mov	r18, r24
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	3c 83       	std	Y+4, r19	; 0x04
    3faa:	2b 83       	std	Y+3, r18	; 0x03
    3fac:	8b 81       	ldd	r24, Y+3	; 0x03
    3fae:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb0:	86 30       	cpi	r24, 0x06	; 6
    3fb2:	91 05       	cpc	r25, r1
    3fb4:	59 f0       	breq	.+22     	; 0x3fcc <EXTI_EnableInterrupt+0x5e>
    3fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    3fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    3fba:	27 30       	cpi	r18, 0x07	; 7
    3fbc:	31 05       	cpc	r19, r1
    3fbe:	79 f0       	breq	.+30     	; 0x3fde <EXTI_EnableInterrupt+0x70>
    3fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc4:	85 30       	cpi	r24, 0x05	; 5
    3fc6:	91 05       	cpc	r25, r1
    3fc8:	d1 f0       	breq	.+52     	; 0x3ffe <EXTI_EnableInterrupt+0x90>
    3fca:	21 c0       	rjmp	.+66     	; 0x400e <EXTI_EnableInterrupt+0xa0>
	case EXTI_INT0:
		MCUCR_REG |= senseControl;
    3fcc:	a5 e5       	ldi	r26, 0x55	; 85
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	e5 e5       	ldi	r30, 0x55	; 85
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	90 81       	ld	r25, Z
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	89 2b       	or	r24, r25
    3fda:	8c 93       	st	X, r24
    3fdc:	18 c0       	rjmp	.+48     	; 0x400e <EXTI_EnableInterrupt+0xa0>
		break;
	case EXTI_INT1:
		MCUCR_REG |= (senseControl << 2);
    3fde:	a5 e5       	ldi	r26, 0x55	; 85
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	e5 e5       	ldi	r30, 0x55	; 85
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	80 81       	ld	r24, Z
    3fe8:	28 2f       	mov	r18, r24
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	88 2f       	mov	r24, r24
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	88 0f       	add	r24, r24
    3ff2:	99 1f       	adc	r25, r25
    3ff4:	88 0f       	add	r24, r24
    3ff6:	99 1f       	adc	r25, r25
    3ff8:	82 2b       	or	r24, r18
    3ffa:	8c 93       	st	X, r24
    3ffc:	08 c0       	rjmp	.+16     	; 0x400e <EXTI_EnableInterrupt+0xa0>
		break;
	case EXTI_INT2:
		MCUCSR_REG |= senseControl;
    3ffe:	a4 e5       	ldi	r26, 0x54	; 84
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	e4 e5       	ldi	r30, 0x54	; 84
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	90 81       	ld	r25, Z
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	89 2b       	or	r24, r25
    400c:	8c 93       	st	X, r24
		break;
	}

}
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	cf 91       	pop	r28
    4018:	df 91       	pop	r29
    401a:	08 95       	ret

0000401c <EXTI_DisableInterrupt>:

void EXTI_DisableInterrupt(exti_intId_t intId)
{
    401c:	df 93       	push	r29
    401e:	cf 93       	push	r28
    4020:	0f 92       	push	r0
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_BIT(GICR_REG, intId);
    4028:	ab e5       	ldi	r26, 0x5B	; 91
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	eb e5       	ldi	r30, 0x5B	; 91
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	48 2f       	mov	r20, r24
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	28 2f       	mov	r18, r24
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	02 2e       	mov	r0, r18
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <EXTI_DisableInterrupt+0x2a>
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	0a 94       	dec	r0
    4048:	e2 f7       	brpl	.-8      	; 0x4042 <EXTI_DisableInterrupt+0x26>
    404a:	80 95       	com	r24
    404c:	84 23       	and	r24, r20
    404e:	8c 93       	st	X, r24

}
    4050:	0f 90       	pop	r0
    4052:	cf 91       	pop	r28
    4054:	df 91       	pop	r29
    4056:	08 95       	ret

00004058 <Dio_configChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_configChanel(dio_port_t port, dio_pin_t pin, dio_dir_t dir)
{
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	00 d0       	rcall	.+0      	; 0x405e <Dio_configChanel+0x6>
    405e:	00 d0       	rcall	.+0      	; 0x4060 <Dio_configChanel+0x8>
    4060:	0f 92       	push	r0
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	89 83       	std	Y+1, r24	; 0x01
    4068:	6a 83       	std	Y+2, r22	; 0x02
    406a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	28 2f       	mov	r18, r24
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	3d 83       	std	Y+5, r19	; 0x05
    4074:	2c 83       	std	Y+4, r18	; 0x04
    4076:	8c 81       	ldd	r24, Y+4	; 0x04
    4078:	9d 81       	ldd	r25, Y+5	; 0x05
    407a:	81 30       	cpi	r24, 0x01	; 1
    407c:	91 05       	cpc	r25, r1
    407e:	09 f4       	brne	.+2      	; 0x4082 <Dio_configChanel+0x2a>
    4080:	43 c0       	rjmp	.+134    	; 0x4108 <Dio_configChanel+0xb0>
    4082:	2c 81       	ldd	r18, Y+4	; 0x04
    4084:	3d 81       	ldd	r19, Y+5	; 0x05
    4086:	22 30       	cpi	r18, 0x02	; 2
    4088:	31 05       	cpc	r19, r1
    408a:	2c f4       	brge	.+10     	; 0x4096 <Dio_configChanel+0x3e>
    408c:	8c 81       	ldd	r24, Y+4	; 0x04
    408e:	9d 81       	ldd	r25, Y+5	; 0x05
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	71 f0       	breq	.+28     	; 0x40b0 <Dio_configChanel+0x58>
    4094:	bc c0       	rjmp	.+376    	; 0x420e <Dio_configChanel+0x1b6>
    4096:	2c 81       	ldd	r18, Y+4	; 0x04
    4098:	3d 81       	ldd	r19, Y+5	; 0x05
    409a:	22 30       	cpi	r18, 0x02	; 2
    409c:	31 05       	cpc	r19, r1
    409e:	09 f4       	brne	.+2      	; 0x40a2 <Dio_configChanel+0x4a>
    40a0:	5f c0       	rjmp	.+190    	; 0x4160 <Dio_configChanel+0x108>
    40a2:	8c 81       	ldd	r24, Y+4	; 0x04
    40a4:	9d 81       	ldd	r25, Y+5	; 0x05
    40a6:	83 30       	cpi	r24, 0x03	; 3
    40a8:	91 05       	cpc	r25, r1
    40aa:	09 f4       	brne	.+2      	; 0x40ae <Dio_configChanel+0x56>
    40ac:	85 c0       	rjmp	.+266    	; 0x41b8 <Dio_configChanel+0x160>
    40ae:	af c0       	rjmp	.+350    	; 0x420e <Dio_configChanel+0x1b6>
	{
	case DIO_PORTA:
		{
			if (dir == DIO_INPUT)
    40b0:	8b 81       	ldd	r24, Y+3	; 0x03
    40b2:	88 23       	and	r24, r24
    40b4:	a9 f4       	brne	.+42     	; 0x40e0 <Dio_configChanel+0x88>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
    40b6:	aa e3       	ldi	r26, 0x3A	; 58
    40b8:	b0 e0       	ldi	r27, 0x00	; 0
    40ba:	ea e3       	ldi	r30, 0x3A	; 58
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	80 81       	ld	r24, Z
    40c0:	48 2f       	mov	r20, r24
    40c2:	8a 81       	ldd	r24, Y+2	; 0x02
    40c4:	28 2f       	mov	r18, r24
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	02 2e       	mov	r0, r18
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <Dio_configChanel+0x7c>
    40d0:	88 0f       	add	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	0a 94       	dec	r0
    40d6:	e2 f7       	brpl	.-8      	; 0x40d0 <Dio_configChanel+0x78>
    40d8:	80 95       	com	r24
    40da:	84 23       	and	r24, r20
    40dc:	8c 93       	st	X, r24
    40de:	97 c0       	rjmp	.+302    	; 0x420e <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
    40e0:	aa e3       	ldi	r26, 0x3A	; 58
    40e2:	b0 e0       	ldi	r27, 0x00	; 0
    40e4:	ea e3       	ldi	r30, 0x3A	; 58
    40e6:	f0 e0       	ldi	r31, 0x00	; 0
    40e8:	80 81       	ld	r24, Z
    40ea:	48 2f       	mov	r20, r24
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	02 2e       	mov	r0, r18
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <Dio_configChanel+0xa6>
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	0a 94       	dec	r0
    4100:	e2 f7       	brpl	.-8      	; 0x40fa <Dio_configChanel+0xa2>
    4102:	84 2b       	or	r24, r20
    4104:	8c 93       	st	X, r24
    4106:	83 c0       	rjmp	.+262    	; 0x420e <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTB:
		{
			if (dir == DIO_INPUT)
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	88 23       	and	r24, r24
    410c:	a9 f4       	brne	.+42     	; 0x4138 <Dio_configChanel+0xe0>
			{
				CLEAR_BIT(DIO_DDRB_REG,pin);
    410e:	a7 e3       	ldi	r26, 0x37	; 55
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	e7 e3       	ldi	r30, 0x37	; 55
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	48 2f       	mov	r20, r24
    411a:	8a 81       	ldd	r24, Y+2	; 0x02
    411c:	28 2f       	mov	r18, r24
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	02 2e       	mov	r0, r18
    4126:	02 c0       	rjmp	.+4      	; 0x412c <Dio_configChanel+0xd4>
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	0a 94       	dec	r0
    412e:	e2 f7       	brpl	.-8      	; 0x4128 <Dio_configChanel+0xd0>
    4130:	80 95       	com	r24
    4132:	84 23       	and	r24, r20
    4134:	8c 93       	st	X, r24
    4136:	6b c0       	rjmp	.+214    	; 0x420e <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRB_REG,pin);
    4138:	a7 e3       	ldi	r26, 0x37	; 55
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	e7 e3       	ldi	r30, 0x37	; 55
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	80 81       	ld	r24, Z
    4142:	48 2f       	mov	r20, r24
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	28 2f       	mov	r18, r24
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	02 2e       	mov	r0, r18
    4150:	02 c0       	rjmp	.+4      	; 0x4156 <Dio_configChanel+0xfe>
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	0a 94       	dec	r0
    4158:	e2 f7       	brpl	.-8      	; 0x4152 <Dio_configChanel+0xfa>
    415a:	84 2b       	or	r24, r20
    415c:	8c 93       	st	X, r24
    415e:	57 c0       	rjmp	.+174    	; 0x420e <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTC:
		{
			if (dir == DIO_INPUT)
    4160:	8b 81       	ldd	r24, Y+3	; 0x03
    4162:	88 23       	and	r24, r24
    4164:	a9 f4       	brne	.+42     	; 0x4190 <Dio_configChanel+0x138>
			{
				CLEAR_BIT(DIO_DDRC_REG,pin);
    4166:	a4 e3       	ldi	r26, 0x34	; 52
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e4 e3       	ldi	r30, 0x34	; 52
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	48 2f       	mov	r20, r24
    4172:	8a 81       	ldd	r24, Y+2	; 0x02
    4174:	28 2f       	mov	r18, r24
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	02 2e       	mov	r0, r18
    417e:	02 c0       	rjmp	.+4      	; 0x4184 <Dio_configChanel+0x12c>
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	0a 94       	dec	r0
    4186:	e2 f7       	brpl	.-8      	; 0x4180 <Dio_configChanel+0x128>
    4188:	80 95       	com	r24
    418a:	84 23       	and	r24, r20
    418c:	8c 93       	st	X, r24
    418e:	3f c0       	rjmp	.+126    	; 0x420e <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC_REG,pin);
    4190:	a4 e3       	ldi	r26, 0x34	; 52
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	e4 e3       	ldi	r30, 0x34	; 52
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	48 2f       	mov	r20, r24
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	28 2f       	mov	r18, r24
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	02 2e       	mov	r0, r18
    41a8:	02 c0       	rjmp	.+4      	; 0x41ae <Dio_configChanel+0x156>
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	0a 94       	dec	r0
    41b0:	e2 f7       	brpl	.-8      	; 0x41aa <Dio_configChanel+0x152>
    41b2:	84 2b       	or	r24, r20
    41b4:	8c 93       	st	X, r24
    41b6:	2b c0       	rjmp	.+86     	; 0x420e <Dio_configChanel+0x1b6>
			break;
		}

	case DIO_PORTD:
		{
			if (dir == DIO_INPUT)
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	88 23       	and	r24, r24
    41bc:	a9 f4       	brne	.+42     	; 0x41e8 <Dio_configChanel+0x190>
			{
				CLEAR_BIT(DIO_DDRD_REG,pin);
    41be:	a1 e3       	ldi	r26, 0x31	; 49
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e1 e3       	ldi	r30, 0x31	; 49
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	80 81       	ld	r24, Z
    41c8:	48 2f       	mov	r20, r24
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	02 2e       	mov	r0, r18
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <Dio_configChanel+0x184>
    41d8:	88 0f       	add	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	0a 94       	dec	r0
    41de:	e2 f7       	brpl	.-8      	; 0x41d8 <Dio_configChanel+0x180>
    41e0:	80 95       	com	r24
    41e2:	84 23       	and	r24, r20
    41e4:	8c 93       	st	X, r24
    41e6:	13 c0       	rjmp	.+38     	; 0x420e <Dio_configChanel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD_REG,pin);
    41e8:	a1 e3       	ldi	r26, 0x31	; 49
    41ea:	b0 e0       	ldi	r27, 0x00	; 0
    41ec:	e1 e3       	ldi	r30, 0x31	; 49
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	80 81       	ld	r24, Z
    41f2:	48 2f       	mov	r20, r24
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	28 2f       	mov	r18, r24
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	02 2e       	mov	r0, r18
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <Dio_configChanel+0x1ae>
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	0a 94       	dec	r0
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <Dio_configChanel+0x1aa>
    420a:	84 2b       	or	r24, r20
    420c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <Dio_writeChanel>:

void Dio_writeChanel(dio_port_t port, dio_pin_t pin, dio_level_t level)
{
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	00 d0       	rcall	.+0      	; 0x4224 <Dio_writeChanel+0x6>
    4224:	00 d0       	rcall	.+0      	; 0x4226 <Dio_writeChanel+0x8>
    4226:	0f 92       	push	r0
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	89 83       	std	Y+1, r24	; 0x01
    422e:	6a 83       	std	Y+2, r22	; 0x02
    4230:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	28 2f       	mov	r18, r24
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	3d 83       	std	Y+5, r19	; 0x05
    423a:	2c 83       	std	Y+4, r18	; 0x04
    423c:	8c 81       	ldd	r24, Y+4	; 0x04
    423e:	9d 81       	ldd	r25, Y+5	; 0x05
    4240:	81 30       	cpi	r24, 0x01	; 1
    4242:	91 05       	cpc	r25, r1
    4244:	09 f4       	brne	.+2      	; 0x4248 <Dio_writeChanel+0x2a>
    4246:	43 c0       	rjmp	.+134    	; 0x42ce <Dio_writeChanel+0xb0>
    4248:	2c 81       	ldd	r18, Y+4	; 0x04
    424a:	3d 81       	ldd	r19, Y+5	; 0x05
    424c:	22 30       	cpi	r18, 0x02	; 2
    424e:	31 05       	cpc	r19, r1
    4250:	2c f4       	brge	.+10     	; 0x425c <Dio_writeChanel+0x3e>
    4252:	8c 81       	ldd	r24, Y+4	; 0x04
    4254:	9d 81       	ldd	r25, Y+5	; 0x05
    4256:	00 97       	sbiw	r24, 0x00	; 0
    4258:	71 f0       	breq	.+28     	; 0x4276 <Dio_writeChanel+0x58>
    425a:	bc c0       	rjmp	.+376    	; 0x43d4 <Dio_writeChanel+0x1b6>
    425c:	2c 81       	ldd	r18, Y+4	; 0x04
    425e:	3d 81       	ldd	r19, Y+5	; 0x05
    4260:	22 30       	cpi	r18, 0x02	; 2
    4262:	31 05       	cpc	r19, r1
    4264:	09 f4       	brne	.+2      	; 0x4268 <Dio_writeChanel+0x4a>
    4266:	5f c0       	rjmp	.+190    	; 0x4326 <Dio_writeChanel+0x108>
    4268:	8c 81       	ldd	r24, Y+4	; 0x04
    426a:	9d 81       	ldd	r25, Y+5	; 0x05
    426c:	83 30       	cpi	r24, 0x03	; 3
    426e:	91 05       	cpc	r25, r1
    4270:	09 f4       	brne	.+2      	; 0x4274 <Dio_writeChanel+0x56>
    4272:	85 c0       	rjmp	.+266    	; 0x437e <Dio_writeChanel+0x160>
    4274:	af c0       	rjmp	.+350    	; 0x43d4 <Dio_writeChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	81 30       	cpi	r24, 0x01	; 1
    427a:	a1 f4       	brne	.+40     	; 0x42a4 <Dio_writeChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    427c:	ab e3       	ldi	r26, 0x3B	; 59
    427e:	b0 e0       	ldi	r27, 0x00	; 0
    4280:	eb e3       	ldi	r30, 0x3B	; 59
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	80 81       	ld	r24, Z
    4286:	48 2f       	mov	r20, r24
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	28 2f       	mov	r18, r24
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	02 2e       	mov	r0, r18
    4294:	02 c0       	rjmp	.+4      	; 0x429a <Dio_writeChanel+0x7c>
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	0a 94       	dec	r0
    429c:	e2 f7       	brpl	.-8      	; 0x4296 <Dio_writeChanel+0x78>
    429e:	84 2b       	or	r24, r20
    42a0:	8c 93       	st	X, r24
    42a2:	98 c0       	rjmp	.+304    	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    42a4:	ab e3       	ldi	r26, 0x3B	; 59
    42a6:	b0 e0       	ldi	r27, 0x00	; 0
    42a8:	eb e3       	ldi	r30, 0x3B	; 59
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	80 81       	ld	r24, Z
    42ae:	48 2f       	mov	r20, r24
    42b0:	8a 81       	ldd	r24, Y+2	; 0x02
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	02 2e       	mov	r0, r18
    42bc:	02 c0       	rjmp	.+4      	; 0x42c2 <Dio_writeChanel+0xa4>
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	0a 94       	dec	r0
    42c4:	e2 f7       	brpl	.-8      	; 0x42be <Dio_writeChanel+0xa0>
    42c6:	80 95       	com	r24
    42c8:	84 23       	and	r24, r20
    42ca:	8c 93       	st	X, r24
    42cc:	83 c0       	rjmp	.+262    	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	81 30       	cpi	r24, 0x01	; 1
    42d2:	a1 f4       	brne	.+40     	; 0x42fc <Dio_writeChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    42d4:	a8 e3       	ldi	r26, 0x38	; 56
    42d6:	b0 e0       	ldi	r27, 0x00	; 0
    42d8:	e8 e3       	ldi	r30, 0x38	; 56
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	80 81       	ld	r24, Z
    42de:	48 2f       	mov	r20, r24
    42e0:	8a 81       	ldd	r24, Y+2	; 0x02
    42e2:	28 2f       	mov	r18, r24
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	02 2e       	mov	r0, r18
    42ec:	02 c0       	rjmp	.+4      	; 0x42f2 <Dio_writeChanel+0xd4>
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	0a 94       	dec	r0
    42f4:	e2 f7       	brpl	.-8      	; 0x42ee <Dio_writeChanel+0xd0>
    42f6:	84 2b       	or	r24, r20
    42f8:	8c 93       	st	X, r24
    42fa:	6c c0       	rjmp	.+216    	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    42fc:	a8 e3       	ldi	r26, 0x38	; 56
    42fe:	b0 e0       	ldi	r27, 0x00	; 0
    4300:	e8 e3       	ldi	r30, 0x38	; 56
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	80 81       	ld	r24, Z
    4306:	48 2f       	mov	r20, r24
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
    430a:	28 2f       	mov	r18, r24
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	02 2e       	mov	r0, r18
    4314:	02 c0       	rjmp	.+4      	; 0x431a <Dio_writeChanel+0xfc>
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	0a 94       	dec	r0
    431c:	e2 f7       	brpl	.-8      	; 0x4316 <Dio_writeChanel+0xf8>
    431e:	80 95       	com	r24
    4320:	84 23       	and	r24, r20
    4322:	8c 93       	st	X, r24
    4324:	57 c0       	rjmp	.+174    	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
    4328:	81 30       	cpi	r24, 0x01	; 1
    432a:	a1 f4       	brne	.+40     	; 0x4354 <Dio_writeChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    432c:	a5 e3       	ldi	r26, 0x35	; 53
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	e5 e3       	ldi	r30, 0x35	; 53
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	80 81       	ld	r24, Z
    4336:	48 2f       	mov	r20, r24
    4338:	8a 81       	ldd	r24, Y+2	; 0x02
    433a:	28 2f       	mov	r18, r24
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	02 2e       	mov	r0, r18
    4344:	02 c0       	rjmp	.+4      	; 0x434a <Dio_writeChanel+0x12c>
    4346:	88 0f       	add	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	0a 94       	dec	r0
    434c:	e2 f7       	brpl	.-8      	; 0x4346 <Dio_writeChanel+0x128>
    434e:	84 2b       	or	r24, r20
    4350:	8c 93       	st	X, r24
    4352:	40 c0       	rjmp	.+128    	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    4354:	a5 e3       	ldi	r26, 0x35	; 53
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	e5 e3       	ldi	r30, 0x35	; 53
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	80 81       	ld	r24, Z
    435e:	48 2f       	mov	r20, r24
    4360:	8a 81       	ldd	r24, Y+2	; 0x02
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	02 2e       	mov	r0, r18
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <Dio_writeChanel+0x154>
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	0a 94       	dec	r0
    4374:	e2 f7       	brpl	.-8      	; 0x436e <Dio_writeChanel+0x150>
    4376:	80 95       	com	r24
    4378:	84 23       	and	r24, r20
    437a:	8c 93       	st	X, r24
    437c:	2b c0       	rjmp	.+86     	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	81 30       	cpi	r24, 0x01	; 1
    4382:	a1 f4       	brne	.+40     	; 0x43ac <Dio_writeChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    4384:	a2 e3       	ldi	r26, 0x32	; 50
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e2 e3       	ldi	r30, 0x32	; 50
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	48 2f       	mov	r20, r24
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	02 2e       	mov	r0, r18
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <Dio_writeChanel+0x184>
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	0a 94       	dec	r0
    43a4:	e2 f7       	brpl	.-8      	; 0x439e <Dio_writeChanel+0x180>
    43a6:	84 2b       	or	r24, r20
    43a8:	8c 93       	st	X, r24
    43aa:	14 c0       	rjmp	.+40     	; 0x43d4 <Dio_writeChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    43ac:	a2 e3       	ldi	r26, 0x32	; 50
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	e2 e3       	ldi	r30, 0x32	; 50
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 81       	ld	r24, Z
    43b6:	48 2f       	mov	r20, r24
    43b8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	02 2e       	mov	r0, r18
    43c4:	02 c0       	rjmp	.+4      	; 0x43ca <Dio_writeChanel+0x1ac>
    43c6:	88 0f       	add	r24, r24
    43c8:	99 1f       	adc	r25, r25
    43ca:	0a 94       	dec	r0
    43cc:	e2 f7       	brpl	.-8      	; 0x43c6 <Dio_writeChanel+0x1a8>
    43ce:	80 95       	com	r24
    43d0:	84 23       	and	r24, r20
    43d2:	8c 93       	st	X, r24
		}
		break;
	}
}
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
    43de:	cf 91       	pop	r28
    43e0:	df 91       	pop	r29
    43e2:	08 95       	ret

000043e4 <Dio_writeChanelGroup>:

void Dio_writeChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    43e4:	df 93       	push	r29
    43e6:	cf 93       	push	r28
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <Dio_writeChanelGroup+0x6>
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <Dio_writeChanelGroup+0x8>
    43ec:	0f 92       	push	r0
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	6a 83       	std	Y+2, r22	; 0x02
    43f6:	4b 83       	std	Y+3, r20	; 0x03

	switch (port)
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	28 2f       	mov	r18, r24
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	3d 83       	std	Y+5, r19	; 0x05
    4400:	2c 83       	std	Y+4, r18	; 0x04
    4402:	8c 81       	ldd	r24, Y+4	; 0x04
    4404:	9d 81       	ldd	r25, Y+5	; 0x05
    4406:	81 30       	cpi	r24, 0x01	; 1
    4408:	91 05       	cpc	r25, r1
    440a:	01 f1       	breq	.+64     	; 0x444c <Dio_writeChanelGroup+0x68>
    440c:	2c 81       	ldd	r18, Y+4	; 0x04
    440e:	3d 81       	ldd	r19, Y+5	; 0x05
    4410:	22 30       	cpi	r18, 0x02	; 2
    4412:	31 05       	cpc	r19, r1
    4414:	2c f4       	brge	.+10     	; 0x4420 <Dio_writeChanelGroup+0x3c>
    4416:	8c 81       	ldd	r24, Y+4	; 0x04
    4418:	9d 81       	ldd	r25, Y+5	; 0x05
    441a:	00 97       	sbiw	r24, 0x00	; 0
    441c:	61 f0       	breq	.+24     	; 0x4436 <Dio_writeChanelGroup+0x52>
    441e:	36 c0       	rjmp	.+108    	; 0x448c <Dio_writeChanelGroup+0xa8>
    4420:	2c 81       	ldd	r18, Y+4	; 0x04
    4422:	3d 81       	ldd	r19, Y+5	; 0x05
    4424:	22 30       	cpi	r18, 0x02	; 2
    4426:	31 05       	cpc	r19, r1
    4428:	e1 f0       	breq	.+56     	; 0x4462 <Dio_writeChanelGroup+0x7e>
    442a:	8c 81       	ldd	r24, Y+4	; 0x04
    442c:	9d 81       	ldd	r25, Y+5	; 0x05
    442e:	83 30       	cpi	r24, 0x03	; 3
    4430:	91 05       	cpc	r25, r1
    4432:	11 f1       	breq	.+68     	; 0x4478 <Dio_writeChanelGroup+0x94>
    4434:	2b c0       	rjmp	.+86     	; 0x448c <Dio_writeChanelGroup+0xa8>
	{

	case DIO_PORTA:
		// DIO_PORTA_REG &= data;						WRONG because we should use AND to set the left 4 bit to 0
		// 												then use OR to set the left 4 bit to required value
		DIO_PORTA_REG = (DIO_PORTA_REG & mask) | data;
    4436:	ab e3       	ldi	r26, 0x3B	; 59
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	eb e3       	ldi	r30, 0x3B	; 59
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	90 81       	ld	r25, Z
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	98 23       	and	r25, r24
    4444:	8a 81       	ldd	r24, Y+2	; 0x02
    4446:	89 2b       	or	r24, r25
    4448:	8c 93       	st	X, r24
    444a:	20 c0       	rjmp	.+64     	; 0x448c <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask) | data;
    444c:	a8 e3       	ldi	r26, 0x38	; 56
    444e:	b0 e0       	ldi	r27, 0x00	; 0
    4450:	e8 e3       	ldi	r30, 0x38	; 56
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	90 81       	ld	r25, Z
    4456:	8b 81       	ldd	r24, Y+3	; 0x03
    4458:	98 23       	and	r25, r24
    445a:	8a 81       	ldd	r24, Y+2	; 0x02
    445c:	89 2b       	or	r24, r25
    445e:	8c 93       	st	X, r24
    4460:	15 c0       	rjmp	.+42     	; 0x448c <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask) | data;
    4462:	a5 e3       	ldi	r26, 0x35	; 53
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	e5 e3       	ldi	r30, 0x35	; 53
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	90 81       	ld	r25, Z
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	98 23       	and	r25, r24
    4470:	8a 81       	ldd	r24, Y+2	; 0x02
    4472:	89 2b       	or	r24, r25
    4474:	8c 93       	st	X, r24
    4476:	0a c0       	rjmp	.+20     	; 0x448c <Dio_writeChanelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask) | data;
    4478:	a2 e3       	ldi	r26, 0x32	; 50
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	e2 e3       	ldi	r30, 0x32	; 50
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	90 81       	ld	r25, Z
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	98 23       	and	r25, r24
    4486:	8a 81       	ldd	r24, Y+2	; 0x02
    4488:	89 2b       	or	r24, r25
    448a:	8c 93       	st	X, r24
		break;

	}

}
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	cf 91       	pop	r28
    4498:	df 91       	pop	r29
    449a:	08 95       	ret

0000449c <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    449c:	df 93       	push	r29
    449e:	cf 93       	push	r28
    44a0:	00 d0       	rcall	.+0      	; 0x44a2 <Dio_udtreadChanel+0x6>
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <Dio_udtreadChanel+0x8>
    44a4:	0f 92       	push	r0
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	8a 83       	std	Y+2, r24	; 0x02
    44ac:	6b 83       	std	Y+3, r22	; 0x03

	dio_level_t returnValue = 0;
    44ae:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    44b0:	8a 81       	ldd	r24, Y+2	; 0x02
    44b2:	28 2f       	mov	r18, r24
    44b4:	30 e0       	ldi	r19, 0x00	; 0
    44b6:	3d 83       	std	Y+5, r19	; 0x05
    44b8:	2c 83       	std	Y+4, r18	; 0x04
    44ba:	4c 81       	ldd	r20, Y+4	; 0x04
    44bc:	5d 81       	ldd	r21, Y+5	; 0x05
    44be:	41 30       	cpi	r20, 0x01	; 1
    44c0:	51 05       	cpc	r21, r1
    44c2:	41 f1       	breq	.+80     	; 0x4514 <Dio_udtreadChanel+0x78>
    44c4:	8c 81       	ldd	r24, Y+4	; 0x04
    44c6:	9d 81       	ldd	r25, Y+5	; 0x05
    44c8:	82 30       	cpi	r24, 0x02	; 2
    44ca:	91 05       	cpc	r25, r1
    44cc:	34 f4       	brge	.+12     	; 0x44da <Dio_udtreadChanel+0x3e>
    44ce:	2c 81       	ldd	r18, Y+4	; 0x04
    44d0:	3d 81       	ldd	r19, Y+5	; 0x05
    44d2:	21 15       	cp	r18, r1
    44d4:	31 05       	cpc	r19, r1
    44d6:	61 f0       	breq	.+24     	; 0x44f0 <Dio_udtreadChanel+0x54>
    44d8:	52 c0       	rjmp	.+164    	; 0x457e <Dio_udtreadChanel+0xe2>
    44da:	4c 81       	ldd	r20, Y+4	; 0x04
    44dc:	5d 81       	ldd	r21, Y+5	; 0x05
    44de:	42 30       	cpi	r20, 0x02	; 2
    44e0:	51 05       	cpc	r21, r1
    44e2:	51 f1       	breq	.+84     	; 0x4538 <Dio_udtreadChanel+0x9c>
    44e4:	8c 81       	ldd	r24, Y+4	; 0x04
    44e6:	9d 81       	ldd	r25, Y+5	; 0x05
    44e8:	83 30       	cpi	r24, 0x03	; 3
    44ea:	91 05       	cpc	r25, r1
    44ec:	b9 f1       	breq	.+110    	; 0x455c <Dio_udtreadChanel+0xc0>
    44ee:	47 c0       	rjmp	.+142    	; 0x457e <Dio_udtreadChanel+0xe2>
	{

	case DIO_PORTA:
		returnValue = CHECK_BIT(DIO_PINA_REG, pin);
    44f0:	e9 e3       	ldi	r30, 0x39	; 57
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	80 81       	ld	r24, Z
    44f6:	28 2f       	mov	r18, r24
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	88 2f       	mov	r24, r24
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	a9 01       	movw	r20, r18
    4502:	02 c0       	rjmp	.+4      	; 0x4508 <Dio_udtreadChanel+0x6c>
    4504:	55 95       	asr	r21
    4506:	47 95       	ror	r20
    4508:	8a 95       	dec	r24
    450a:	e2 f7       	brpl	.-8      	; 0x4504 <Dio_udtreadChanel+0x68>
    450c:	ca 01       	movw	r24, r20
    450e:	81 70       	andi	r24, 0x01	; 1
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	35 c0       	rjmp	.+106    	; 0x457e <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTB:
		returnValue = CHECK_BIT(DIO_PINB_REG, pin);
    4514:	e6 e3       	ldi	r30, 0x36	; 54
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	80 81       	ld	r24, Z
    451a:	28 2f       	mov	r18, r24
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	88 2f       	mov	r24, r24
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	a9 01       	movw	r20, r18
    4526:	02 c0       	rjmp	.+4      	; 0x452c <Dio_udtreadChanel+0x90>
    4528:	55 95       	asr	r21
    452a:	47 95       	ror	r20
    452c:	8a 95       	dec	r24
    452e:	e2 f7       	brpl	.-8      	; 0x4528 <Dio_udtreadChanel+0x8c>
    4530:	ca 01       	movw	r24, r20
    4532:	81 70       	andi	r24, 0x01	; 1
    4534:	89 83       	std	Y+1, r24	; 0x01
    4536:	23 c0       	rjmp	.+70     	; 0x457e <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTC:
		returnValue = CHECK_BIT(DIO_PINC_REG, pin);
    4538:	e3 e3       	ldi	r30, 0x33	; 51
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	80 81       	ld	r24, Z
    453e:	28 2f       	mov	r18, r24
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	8b 81       	ldd	r24, Y+3	; 0x03
    4544:	88 2f       	mov	r24, r24
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a9 01       	movw	r20, r18
    454a:	02 c0       	rjmp	.+4      	; 0x4550 <Dio_udtreadChanel+0xb4>
    454c:	55 95       	asr	r21
    454e:	47 95       	ror	r20
    4550:	8a 95       	dec	r24
    4552:	e2 f7       	brpl	.-8      	; 0x454c <Dio_udtreadChanel+0xb0>
    4554:	ca 01       	movw	r24, r20
    4556:	81 70       	andi	r24, 0x01	; 1
    4558:	89 83       	std	Y+1, r24	; 0x01
    455a:	11 c0       	rjmp	.+34     	; 0x457e <Dio_udtreadChanel+0xe2>
		break;

	case DIO_PORTD:
		returnValue = CHECK_BIT(DIO_PIND_REG, pin);
    455c:	e0 e3       	ldi	r30, 0x30	; 48
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	28 2f       	mov	r18, r24
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	8b 81       	ldd	r24, Y+3	; 0x03
    4568:	88 2f       	mov	r24, r24
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	a9 01       	movw	r20, r18
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <Dio_udtreadChanel+0xd8>
    4570:	55 95       	asr	r21
    4572:	47 95       	ror	r20
    4574:	8a 95       	dec	r24
    4576:	e2 f7       	brpl	.-8      	; 0x4570 <Dio_udtreadChanel+0xd4>
    4578:	ca 01       	movw	r24, r20
    457a:	81 70       	andi	r24, 0x01	; 1
    457c:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return returnValue;
    457e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	0f 90       	pop	r0
    458a:	cf 91       	pop	r28
    458c:	df 91       	pop	r29
    458e:	08 95       	ret

00004590 <Dio_flipChanel>:


void Dio_flipChanel(dio_port_t port, dio_pin_t pin)
{
    4590:	df 93       	push	r29
    4592:	cf 93       	push	r28
    4594:	00 d0       	rcall	.+0      	; 0x4596 <Dio_flipChanel+0x6>
    4596:	00 d0       	rcall	.+0      	; 0x4598 <Dio_flipChanel+0x8>
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	89 83       	std	Y+1, r24	; 0x01
    459e:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    45a0:	89 81       	ldd	r24, Y+1	; 0x01
    45a2:	28 2f       	mov	r18, r24
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	3c 83       	std	Y+4, r19	; 0x04
    45a8:	2b 83       	std	Y+3, r18	; 0x03
    45aa:	8b 81       	ldd	r24, Y+3	; 0x03
    45ac:	9c 81       	ldd	r25, Y+4	; 0x04
    45ae:	81 30       	cpi	r24, 0x01	; 1
    45b0:	91 05       	cpc	r25, r1
    45b2:	49 f1       	breq	.+82     	; 0x4606 <Dio_flipChanel+0x76>
    45b4:	2b 81       	ldd	r18, Y+3	; 0x03
    45b6:	3c 81       	ldd	r19, Y+4	; 0x04
    45b8:	22 30       	cpi	r18, 0x02	; 2
    45ba:	31 05       	cpc	r19, r1
    45bc:	2c f4       	brge	.+10     	; 0x45c8 <Dio_flipChanel+0x38>
    45be:	8b 81       	ldd	r24, Y+3	; 0x03
    45c0:	9c 81       	ldd	r25, Y+4	; 0x04
    45c2:	00 97       	sbiw	r24, 0x00	; 0
    45c4:	61 f0       	breq	.+24     	; 0x45de <Dio_flipChanel+0x4e>
    45c6:	5a c0       	rjmp	.+180    	; 0x467c <Dio_flipChanel+0xec>
    45c8:	2b 81       	ldd	r18, Y+3	; 0x03
    45ca:	3c 81       	ldd	r19, Y+4	; 0x04
    45cc:	22 30       	cpi	r18, 0x02	; 2
    45ce:	31 05       	cpc	r19, r1
    45d0:	71 f1       	breq	.+92     	; 0x462e <Dio_flipChanel+0x9e>
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	9c 81       	ldd	r25, Y+4	; 0x04
    45d6:	83 30       	cpi	r24, 0x03	; 3
    45d8:	91 05       	cpc	r25, r1
    45da:	e9 f1       	breq	.+122    	; 0x4656 <Dio_flipChanel+0xc6>
    45dc:	4f c0       	rjmp	.+158    	; 0x467c <Dio_flipChanel+0xec>
	{

	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG, pin);
    45de:	ab e3       	ldi	r26, 0x3B	; 59
    45e0:	b0 e0       	ldi	r27, 0x00	; 0
    45e2:	eb e3       	ldi	r30, 0x3B	; 59
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	80 81       	ld	r24, Z
    45e8:	48 2f       	mov	r20, r24
    45ea:	8a 81       	ldd	r24, Y+2	; 0x02
    45ec:	28 2f       	mov	r18, r24
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	02 2e       	mov	r0, r18
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <Dio_flipChanel+0x6c>
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	0a 94       	dec	r0
    45fe:	e2 f7       	brpl	.-8      	; 0x45f8 <Dio_flipChanel+0x68>
    4600:	84 27       	eor	r24, r20
    4602:	8c 93       	st	X, r24
    4604:	3b c0       	rjmp	.+118    	; 0x467c <Dio_flipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG, pin);
    4606:	a8 e3       	ldi	r26, 0x38	; 56
    4608:	b0 e0       	ldi	r27, 0x00	; 0
    460a:	e8 e3       	ldi	r30, 0x38	; 56
    460c:	f0 e0       	ldi	r31, 0x00	; 0
    460e:	80 81       	ld	r24, Z
    4610:	48 2f       	mov	r20, r24
    4612:	8a 81       	ldd	r24, Y+2	; 0x02
    4614:	28 2f       	mov	r18, r24
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	02 2e       	mov	r0, r18
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <Dio_flipChanel+0x94>
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	0a 94       	dec	r0
    4626:	e2 f7       	brpl	.-8      	; 0x4620 <Dio_flipChanel+0x90>
    4628:	84 27       	eor	r24, r20
    462a:	8c 93       	st	X, r24
    462c:	27 c0       	rjmp	.+78     	; 0x467c <Dio_flipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG, pin);
    462e:	a5 e3       	ldi	r26, 0x35	; 53
    4630:	b0 e0       	ldi	r27, 0x00	; 0
    4632:	e5 e3       	ldi	r30, 0x35	; 53
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	80 81       	ld	r24, Z
    4638:	48 2f       	mov	r20, r24
    463a:	8a 81       	ldd	r24, Y+2	; 0x02
    463c:	28 2f       	mov	r18, r24
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	02 2e       	mov	r0, r18
    4646:	02 c0       	rjmp	.+4      	; 0x464c <Dio_flipChanel+0xbc>
    4648:	88 0f       	add	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	0a 94       	dec	r0
    464e:	e2 f7       	brpl	.-8      	; 0x4648 <Dio_flipChanel+0xb8>
    4650:	84 27       	eor	r24, r20
    4652:	8c 93       	st	X, r24
    4654:	13 c0       	rjmp	.+38     	; 0x467c <Dio_flipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG, pin);
    4656:	a2 e3       	ldi	r26, 0x32	; 50
    4658:	b0 e0       	ldi	r27, 0x00	; 0
    465a:	e2 e3       	ldi	r30, 0x32	; 50
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	80 81       	ld	r24, Z
    4660:	48 2f       	mov	r20, r24
    4662:	8a 81       	ldd	r24, Y+2	; 0x02
    4664:	28 2f       	mov	r18, r24
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	02 2e       	mov	r0, r18
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <Dio_flipChanel+0xe4>
    4670:	88 0f       	add	r24, r24
    4672:	99 1f       	adc	r25, r25
    4674:	0a 94       	dec	r0
    4676:	e2 f7       	brpl	.-8      	; 0x4670 <Dio_flipChanel+0xe0>
    4678:	84 27       	eor	r24, r20
    467a:	8c 93       	st	X, r24
		break;

	}

}
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <ADC_InitADC>:
 */

#include "ADC.h"

void ADC_InitADC()
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62

	// Enable ADC
	SET_BIT(ADC_ADCSRA_REG, ADC_Enable);
    4692:	a6 e2       	ldi	r26, 0x26	; 38
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	e6 e2       	ldi	r30, 0x26	; 38
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	80 81       	ld	r24, Z
    469c:	80 68       	ori	r24, 0x80	; 128
    469e:	8c 93       	st	X, r24

	// Prescale clock (die by 128)
	ADC_ADCSRA_REG |= 0x07;			// 0000 0111
    46a0:	a6 e2       	ldi	r26, 0x26	; 38
    46a2:	b0 e0       	ldi	r27, 0x00	; 0
    46a4:	e6 e2       	ldi	r30, 0x26	; 38
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	80 81       	ld	r24, Z
    46aa:	87 60       	ori	r24, 0x07	; 7
    46ac:	8c 93       	st	X, r24

	// Vref (reference bits) match to the MC VCC
	SET_BIT(ADC_ADMUX_REG, ADC_REFS0);
    46ae:	a7 e2       	ldi	r26, 0x27	; 39
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	e7 e2       	ldi	r30, 0x27	; 39
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	80 64       	ori	r24, 0x40	; 64
    46ba:	8c 93       	st	X, r24

	// ADLAR is default -> 0

}
    46bc:	cf 91       	pop	r28
    46be:	df 91       	pop	r29
    46c0:	08 95       	ret

000046c2 <ADC_f32ReadChannel>:

f32 ADC_f32ReadChannel(adc_channel_t channelNum)
{
    46c2:	df 93       	push	r29
    46c4:	cf 93       	push	r28
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	27 97       	sbiw	r28, 0x07	; 7
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	de bf       	out	0x3e, r29	; 62
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	8f 83       	std	Y+7, r24	; 0x07

	// Clear MUX bits
	ADC_ADMUX_REG &= ADC_MASK;
    46d8:	a7 e2       	ldi	r26, 0x27	; 39
    46da:	b0 e0       	ldi	r27, 0x00	; 0
    46dc:	e7 e2       	ldi	r30, 0x27	; 39
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	80 81       	ld	r24, Z
    46e2:	88 7f       	andi	r24, 0xF8	; 248
    46e4:	8c 93       	st	X, r24

	// Select channel
	ADC_ADMUX_REG |= channelNum;	// xxx0 0000
    46e6:	a7 e2       	ldi	r26, 0x27	; 39
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	e7 e2       	ldi	r30, 0x27	; 39
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	90 81       	ld	r25, Z
    46f0:	8f 81       	ldd	r24, Y+7	; 0x07
    46f2:	89 2b       	or	r24, r25
    46f4:	8c 93       	st	X, r24

	// Start Conversion
	SET_BIT(ADC_ADCSRA_REG, ADC_START_CONV);
    46f6:	a6 e2       	ldi	r26, 0x26	; 38
    46f8:	b0 e0       	ldi	r27, 0x00	; 0
    46fa:	e6 e2       	ldi	r30, 0x26	; 38
    46fc:	f0 e0       	ldi	r31, 0x00	; 0
    46fe:	80 81       	ld	r24, Z
    4700:	80 64       	ori	r24, 0x40	; 64
    4702:	8c 93       	st	X, r24

	// wait for ADIF become 1
	while (CHECK_BIT(ADC_ADCSRA_REG, ADC_INT_FLAG) != 1);
    4704:	e6 e2       	ldi	r30, 0x26	; 38
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	80 81       	ld	r24, Z
    470a:	82 95       	swap	r24
    470c:	8f 70       	andi	r24, 0x0F	; 15
    470e:	88 2f       	mov	r24, r24
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	81 70       	andi	r24, 0x01	; 1
    4714:	90 70       	andi	r25, 0x00	; 0
    4716:	00 97       	sbiw	r24, 0x00	; 0
    4718:	a9 f3       	breq	.-22     	; 0x4704 <ADC_f32ReadChannel+0x42>

	// Clear ADIF by setting 1
	SET_BIT(ADC_ADCSRA_REG, ADC_INT_FLAG);
    471a:	a6 e2       	ldi	r26, 0x26	; 38
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	e6 e2       	ldi	r30, 0x26	; 38
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	80 81       	ld	r24, Z
    4724:	80 61       	ori	r24, 0x10	; 16
    4726:	8c 93       	st	X, r24

	u16 data = ADC_ADCL_REG | (u16)(ADC_ADCH_REG << 8);
    4728:	e4 e2       	ldi	r30, 0x24	; 36
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	80 81       	ld	r24, Z
    472e:	28 2f       	mov	r18, r24
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	e5 e2       	ldi	r30, 0x25	; 37
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	88 2f       	mov	r24, r24
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	98 2f       	mov	r25, r24
    473e:	88 27       	eor	r24, r24
    4740:	82 2b       	or	r24, r18
    4742:	93 2b       	or	r25, r19
    4744:	9e 83       	std	Y+6, r25	; 0x06
    4746:	8d 83       	std	Y+5, r24	; 0x05

	// Convert from mV to V
	f32 volt = (data * ADC_BIT_SIZE) / (f32) 1000;
    4748:	8d 81       	ldd	r24, Y+5	; 0x05
    474a:	9e 81       	ldd	r25, Y+6	; 0x06
    474c:	cc 01       	movw	r24, r24
    474e:	a0 e0       	ldi	r26, 0x00	; 0
    4750:	b0 e0       	ldi	r27, 0x00	; 0
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	bc 01       	movw	r22, r24
    4760:	cd 01       	movw	r24, r26
    4762:	2a e9       	ldi	r18, 0x9A	; 154
    4764:	39 e9       	ldi	r19, 0x99	; 153
    4766:	49 e9       	ldi	r20, 0x99	; 153
    4768:	50 e4       	ldi	r21, 0x40	; 64
    476a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	bc 01       	movw	r22, r24
    4774:	cd 01       	movw	r24, r26
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	4a e7       	ldi	r20, 0x7A	; 122
    477c:	54 e4       	ldi	r21, 0x44	; 68
    477e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	89 83       	std	Y+1, r24	; 0x01
    4788:	9a 83       	std	Y+2, r25	; 0x02
    478a:	ab 83       	std	Y+3, r26	; 0x03
    478c:	bc 83       	std	Y+4, r27	; 0x04

	return volt;
    478e:	89 81       	ldd	r24, Y+1	; 0x01
    4790:	9a 81       	ldd	r25, Y+2	; 0x02
    4792:	ab 81       	ldd	r26, Y+3	; 0x03
    4794:	bc 81       	ldd	r27, Y+4	; 0x04

}
    4796:	bc 01       	movw	r22, r24
    4798:	cd 01       	movw	r24, r26
    479a:	27 96       	adiw	r28, 0x07	; 7
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	f8 94       	cli
    47a0:	de bf       	out	0x3e, r29	; 62
    47a2:	0f be       	out	0x3f, r0	; 63
    47a4:	cd bf       	out	0x3d, r28	; 61
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <__udivmodqi4>:
    47ac:	99 1b       	sub	r25, r25
    47ae:	79 e0       	ldi	r23, 0x09	; 9
    47b0:	04 c0       	rjmp	.+8      	; 0x47ba <__udivmodqi4_ep>

000047b2 <__udivmodqi4_loop>:
    47b2:	99 1f       	adc	r25, r25
    47b4:	96 17       	cp	r25, r22
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <__udivmodqi4_ep>
    47b8:	96 1b       	sub	r25, r22

000047ba <__udivmodqi4_ep>:
    47ba:	88 1f       	adc	r24, r24
    47bc:	7a 95       	dec	r23
    47be:	c9 f7       	brne	.-14     	; 0x47b2 <__udivmodqi4_loop>
    47c0:	80 95       	com	r24
    47c2:	08 95       	ret

000047c4 <__udivmodhi4>:
    47c4:	aa 1b       	sub	r26, r26
    47c6:	bb 1b       	sub	r27, r27
    47c8:	51 e1       	ldi	r21, 0x11	; 17
    47ca:	07 c0       	rjmp	.+14     	; 0x47da <__udivmodhi4_ep>

000047cc <__udivmodhi4_loop>:
    47cc:	aa 1f       	adc	r26, r26
    47ce:	bb 1f       	adc	r27, r27
    47d0:	a6 17       	cp	r26, r22
    47d2:	b7 07       	cpc	r27, r23
    47d4:	10 f0       	brcs	.+4      	; 0x47da <__udivmodhi4_ep>
    47d6:	a6 1b       	sub	r26, r22
    47d8:	b7 0b       	sbc	r27, r23

000047da <__udivmodhi4_ep>:
    47da:	88 1f       	adc	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	5a 95       	dec	r21
    47e0:	a9 f7       	brne	.-22     	; 0x47cc <__udivmodhi4_loop>
    47e2:	80 95       	com	r24
    47e4:	90 95       	com	r25
    47e6:	bc 01       	movw	r22, r24
    47e8:	cd 01       	movw	r24, r26
    47ea:	08 95       	ret

000047ec <__divmodhi4>:
    47ec:	97 fb       	bst	r25, 7
    47ee:	09 2e       	mov	r0, r25
    47f0:	07 26       	eor	r0, r23
    47f2:	0a d0       	rcall	.+20     	; 0x4808 <__divmodhi4_neg1>
    47f4:	77 fd       	sbrc	r23, 7
    47f6:	04 d0       	rcall	.+8      	; 0x4800 <__divmodhi4_neg2>
    47f8:	e5 df       	rcall	.-54     	; 0x47c4 <__udivmodhi4>
    47fa:	06 d0       	rcall	.+12     	; 0x4808 <__divmodhi4_neg1>
    47fc:	00 20       	and	r0, r0
    47fe:	1a f4       	brpl	.+6      	; 0x4806 <__divmodhi4_exit>

00004800 <__divmodhi4_neg2>:
    4800:	70 95       	com	r23
    4802:	61 95       	neg	r22
    4804:	7f 4f       	sbci	r23, 0xFF	; 255

00004806 <__divmodhi4_exit>:
    4806:	08 95       	ret

00004808 <__divmodhi4_neg1>:
    4808:	f6 f7       	brtc	.-4      	; 0x4806 <__divmodhi4_exit>
    480a:	90 95       	com	r25
    480c:	81 95       	neg	r24
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	08 95       	ret

00004812 <__udivmodsi4>:
    4812:	a1 e2       	ldi	r26, 0x21	; 33
    4814:	1a 2e       	mov	r1, r26
    4816:	aa 1b       	sub	r26, r26
    4818:	bb 1b       	sub	r27, r27
    481a:	fd 01       	movw	r30, r26
    481c:	0d c0       	rjmp	.+26     	; 0x4838 <__udivmodsi4_ep>

0000481e <__udivmodsi4_loop>:
    481e:	aa 1f       	adc	r26, r26
    4820:	bb 1f       	adc	r27, r27
    4822:	ee 1f       	adc	r30, r30
    4824:	ff 1f       	adc	r31, r31
    4826:	a2 17       	cp	r26, r18
    4828:	b3 07       	cpc	r27, r19
    482a:	e4 07       	cpc	r30, r20
    482c:	f5 07       	cpc	r31, r21
    482e:	20 f0       	brcs	.+8      	; 0x4838 <__udivmodsi4_ep>
    4830:	a2 1b       	sub	r26, r18
    4832:	b3 0b       	sbc	r27, r19
    4834:	e4 0b       	sbc	r30, r20
    4836:	f5 0b       	sbc	r31, r21

00004838 <__udivmodsi4_ep>:
    4838:	66 1f       	adc	r22, r22
    483a:	77 1f       	adc	r23, r23
    483c:	88 1f       	adc	r24, r24
    483e:	99 1f       	adc	r25, r25
    4840:	1a 94       	dec	r1
    4842:	69 f7       	brne	.-38     	; 0x481e <__udivmodsi4_loop>
    4844:	60 95       	com	r22
    4846:	70 95       	com	r23
    4848:	80 95       	com	r24
    484a:	90 95       	com	r25
    484c:	9b 01       	movw	r18, r22
    484e:	ac 01       	movw	r20, r24
    4850:	bd 01       	movw	r22, r26
    4852:	cf 01       	movw	r24, r30
    4854:	08 95       	ret

00004856 <__divmodsi4>:
    4856:	97 fb       	bst	r25, 7
    4858:	09 2e       	mov	r0, r25
    485a:	05 26       	eor	r0, r21
    485c:	0e d0       	rcall	.+28     	; 0x487a <__divmodsi4_neg1>
    485e:	57 fd       	sbrc	r21, 7
    4860:	04 d0       	rcall	.+8      	; 0x486a <__divmodsi4_neg2>
    4862:	d7 df       	rcall	.-82     	; 0x4812 <__udivmodsi4>
    4864:	0a d0       	rcall	.+20     	; 0x487a <__divmodsi4_neg1>
    4866:	00 1c       	adc	r0, r0
    4868:	38 f4       	brcc	.+14     	; 0x4878 <__divmodsi4_exit>

0000486a <__divmodsi4_neg2>:
    486a:	50 95       	com	r21
    486c:	40 95       	com	r20
    486e:	30 95       	com	r19
    4870:	21 95       	neg	r18
    4872:	3f 4f       	sbci	r19, 0xFF	; 255
    4874:	4f 4f       	sbci	r20, 0xFF	; 255
    4876:	5f 4f       	sbci	r21, 0xFF	; 255

00004878 <__divmodsi4_exit>:
    4878:	08 95       	ret

0000487a <__divmodsi4_neg1>:
    487a:	f6 f7       	brtc	.-4      	; 0x4878 <__divmodsi4_exit>
    487c:	90 95       	com	r25
    487e:	80 95       	com	r24
    4880:	70 95       	com	r23
    4882:	61 95       	neg	r22
    4884:	7f 4f       	sbci	r23, 0xFF	; 255
    4886:	8f 4f       	sbci	r24, 0xFF	; 255
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	08 95       	ret

0000488c <__prologue_saves__>:
    488c:	2f 92       	push	r2
    488e:	3f 92       	push	r3
    4890:	4f 92       	push	r4
    4892:	5f 92       	push	r5
    4894:	6f 92       	push	r6
    4896:	7f 92       	push	r7
    4898:	8f 92       	push	r8
    489a:	9f 92       	push	r9
    489c:	af 92       	push	r10
    489e:	bf 92       	push	r11
    48a0:	cf 92       	push	r12
    48a2:	df 92       	push	r13
    48a4:	ef 92       	push	r14
    48a6:	ff 92       	push	r15
    48a8:	0f 93       	push	r16
    48aa:	1f 93       	push	r17
    48ac:	cf 93       	push	r28
    48ae:	df 93       	push	r29
    48b0:	cd b7       	in	r28, 0x3d	; 61
    48b2:	de b7       	in	r29, 0x3e	; 62
    48b4:	ca 1b       	sub	r28, r26
    48b6:	db 0b       	sbc	r29, r27
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	f8 94       	cli
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	09 94       	ijmp

000048c4 <__epilogue_restores__>:
    48c4:	2a 88       	ldd	r2, Y+18	; 0x12
    48c6:	39 88       	ldd	r3, Y+17	; 0x11
    48c8:	48 88       	ldd	r4, Y+16	; 0x10
    48ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    48cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    48ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    48d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    48d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    48d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    48d6:	b9 84       	ldd	r11, Y+9	; 0x09
    48d8:	c8 84       	ldd	r12, Y+8	; 0x08
    48da:	df 80       	ldd	r13, Y+7	; 0x07
    48dc:	ee 80       	ldd	r14, Y+6	; 0x06
    48de:	fd 80       	ldd	r15, Y+5	; 0x05
    48e0:	0c 81       	ldd	r16, Y+4	; 0x04
    48e2:	1b 81       	ldd	r17, Y+3	; 0x03
    48e4:	aa 81       	ldd	r26, Y+2	; 0x02
    48e6:	b9 81       	ldd	r27, Y+1	; 0x01
    48e8:	ce 0f       	add	r28, r30
    48ea:	d1 1d       	adc	r29, r1
    48ec:	0f b6       	in	r0, 0x3f	; 63
    48ee:	f8 94       	cli
    48f0:	de bf       	out	0x3e, r29	; 62
    48f2:	0f be       	out	0x3f, r0	; 63
    48f4:	cd bf       	out	0x3d, r28	; 61
    48f6:	ed 01       	movw	r28, r26
    48f8:	08 95       	ret

000048fa <strcmp>:
    48fa:	fb 01       	movw	r30, r22
    48fc:	dc 01       	movw	r26, r24
    48fe:	8d 91       	ld	r24, X+
    4900:	01 90       	ld	r0, Z+
    4902:	80 19       	sub	r24, r0
    4904:	01 10       	cpse	r0, r1
    4906:	d9 f3       	breq	.-10     	; 0x48fe <strcmp+0x4>
    4908:	99 0b       	sbc	r25, r25
    490a:	08 95       	ret

0000490c <strlen>:
    490c:	fc 01       	movw	r30, r24
    490e:	01 90       	ld	r0, Z+
    4910:	00 20       	and	r0, r0
    4912:	e9 f7       	brne	.-6      	; 0x490e <strlen+0x2>
    4914:	80 95       	com	r24
    4916:	90 95       	com	r25
    4918:	8e 0f       	add	r24, r30
    491a:	9f 1f       	adc	r25, r31
    491c:	08 95       	ret

0000491e <sprintf>:
    491e:	ae e0       	ldi	r26, 0x0E	; 14
    4920:	b0 e0       	ldi	r27, 0x00	; 0
    4922:	e5 e9       	ldi	r30, 0x95	; 149
    4924:	f4 e2       	ldi	r31, 0x24	; 36
    4926:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x1c>
    492a:	0d 89       	ldd	r16, Y+21	; 0x15
    492c:	1e 89       	ldd	r17, Y+22	; 0x16
    492e:	86 e0       	ldi	r24, 0x06	; 6
    4930:	8c 83       	std	Y+4, r24	; 0x04
    4932:	1a 83       	std	Y+2, r17	; 0x02
    4934:	09 83       	std	Y+1, r16	; 0x01
    4936:	8f ef       	ldi	r24, 0xFF	; 255
    4938:	9f e7       	ldi	r25, 0x7F	; 127
    493a:	9e 83       	std	Y+6, r25	; 0x06
    493c:	8d 83       	std	Y+5, r24	; 0x05
    493e:	9e 01       	movw	r18, r28
    4940:	27 5e       	subi	r18, 0xE7	; 231
    4942:	3f 4f       	sbci	r19, 0xFF	; 255
    4944:	ce 01       	movw	r24, r28
    4946:	01 96       	adiw	r24, 0x01	; 1
    4948:	6f 89       	ldd	r22, Y+23	; 0x17
    494a:	78 8d       	ldd	r23, Y+24	; 0x18
    494c:	a9 01       	movw	r20, r18
    494e:	0e 94 b3 24 	call	0x4966	; 0x4966 <vfprintf>
    4952:	2f 81       	ldd	r18, Y+7	; 0x07
    4954:	38 85       	ldd	r19, Y+8	; 0x08
    4956:	02 0f       	add	r16, r18
    4958:	13 1f       	adc	r17, r19
    495a:	f8 01       	movw	r30, r16
    495c:	10 82       	st	Z, r1
    495e:	2e 96       	adiw	r28, 0x0e	; 14
    4960:	e4 e0       	ldi	r30, 0x04	; 4
    4962:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x1c>

00004966 <vfprintf>:
    4966:	ab e0       	ldi	r26, 0x0B	; 11
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	e9 eb       	ldi	r30, 0xB9	; 185
    496c:	f4 e2       	ldi	r31, 0x24	; 36
    496e:	0c 94 46 24 	jmp	0x488c	; 0x488c <__prologue_saves__>
    4972:	3c 01       	movw	r6, r24
    4974:	2b 01       	movw	r4, r22
    4976:	5a 01       	movw	r10, r20
    4978:	fc 01       	movw	r30, r24
    497a:	17 82       	std	Z+7, r1	; 0x07
    497c:	16 82       	std	Z+6, r1	; 0x06
    497e:	83 81       	ldd	r24, Z+3	; 0x03
    4980:	81 fd       	sbrc	r24, 1
    4982:	03 c0       	rjmp	.+6      	; 0x498a <vfprintf+0x24>
    4984:	6f ef       	ldi	r22, 0xFF	; 255
    4986:	7f ef       	ldi	r23, 0xFF	; 255
    4988:	c6 c1       	rjmp	.+908    	; 0x4d16 <vfprintf+0x3b0>
    498a:	9a e0       	ldi	r25, 0x0A	; 10
    498c:	89 2e       	mov	r8, r25
    498e:	1e 01       	movw	r2, r28
    4990:	08 94       	sec
    4992:	21 1c       	adc	r2, r1
    4994:	31 1c       	adc	r3, r1
    4996:	f3 01       	movw	r30, r6
    4998:	23 81       	ldd	r18, Z+3	; 0x03
    499a:	f2 01       	movw	r30, r4
    499c:	23 fd       	sbrc	r18, 3
    499e:	85 91       	lpm	r24, Z+
    49a0:	23 ff       	sbrs	r18, 3
    49a2:	81 91       	ld	r24, Z+
    49a4:	2f 01       	movw	r4, r30
    49a6:	88 23       	and	r24, r24
    49a8:	09 f4       	brne	.+2      	; 0x49ac <vfprintf+0x46>
    49aa:	b2 c1       	rjmp	.+868    	; 0x4d10 <vfprintf+0x3aa>
    49ac:	85 32       	cpi	r24, 0x25	; 37
    49ae:	39 f4       	brne	.+14     	; 0x49be <vfprintf+0x58>
    49b0:	23 fd       	sbrc	r18, 3
    49b2:	85 91       	lpm	r24, Z+
    49b4:	23 ff       	sbrs	r18, 3
    49b6:	81 91       	ld	r24, Z+
    49b8:	2f 01       	movw	r4, r30
    49ba:	85 32       	cpi	r24, 0x25	; 37
    49bc:	29 f4       	brne	.+10     	; 0x49c8 <vfprintf+0x62>
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	b3 01       	movw	r22, r6
    49c2:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    49c6:	e7 cf       	rjmp	.-50     	; 0x4996 <vfprintf+0x30>
    49c8:	98 2f       	mov	r25, r24
    49ca:	ff 24       	eor	r15, r15
    49cc:	ee 24       	eor	r14, r14
    49ce:	99 24       	eor	r9, r9
    49d0:	ff e1       	ldi	r31, 0x1F	; 31
    49d2:	ff 15       	cp	r31, r15
    49d4:	d0 f0       	brcs	.+52     	; 0x4a0a <vfprintf+0xa4>
    49d6:	9b 32       	cpi	r25, 0x2B	; 43
    49d8:	69 f0       	breq	.+26     	; 0x49f4 <vfprintf+0x8e>
    49da:	9c 32       	cpi	r25, 0x2C	; 44
    49dc:	28 f4       	brcc	.+10     	; 0x49e8 <vfprintf+0x82>
    49de:	90 32       	cpi	r25, 0x20	; 32
    49e0:	59 f0       	breq	.+22     	; 0x49f8 <vfprintf+0x92>
    49e2:	93 32       	cpi	r25, 0x23	; 35
    49e4:	91 f4       	brne	.+36     	; 0x4a0a <vfprintf+0xa4>
    49e6:	0e c0       	rjmp	.+28     	; 0x4a04 <vfprintf+0x9e>
    49e8:	9d 32       	cpi	r25, 0x2D	; 45
    49ea:	49 f0       	breq	.+18     	; 0x49fe <vfprintf+0x98>
    49ec:	90 33       	cpi	r25, 0x30	; 48
    49ee:	69 f4       	brne	.+26     	; 0x4a0a <vfprintf+0xa4>
    49f0:	41 e0       	ldi	r20, 0x01	; 1
    49f2:	24 c0       	rjmp	.+72     	; 0x4a3c <vfprintf+0xd6>
    49f4:	52 e0       	ldi	r21, 0x02	; 2
    49f6:	f5 2a       	or	r15, r21
    49f8:	84 e0       	ldi	r24, 0x04	; 4
    49fa:	f8 2a       	or	r15, r24
    49fc:	28 c0       	rjmp	.+80     	; 0x4a4e <vfprintf+0xe8>
    49fe:	98 e0       	ldi	r25, 0x08	; 8
    4a00:	f9 2a       	or	r15, r25
    4a02:	25 c0       	rjmp	.+74     	; 0x4a4e <vfprintf+0xe8>
    4a04:	e0 e1       	ldi	r30, 0x10	; 16
    4a06:	fe 2a       	or	r15, r30
    4a08:	22 c0       	rjmp	.+68     	; 0x4a4e <vfprintf+0xe8>
    4a0a:	f7 fc       	sbrc	r15, 7
    4a0c:	29 c0       	rjmp	.+82     	; 0x4a60 <vfprintf+0xfa>
    4a0e:	89 2f       	mov	r24, r25
    4a10:	80 53       	subi	r24, 0x30	; 48
    4a12:	8a 30       	cpi	r24, 0x0A	; 10
    4a14:	70 f4       	brcc	.+28     	; 0x4a32 <vfprintf+0xcc>
    4a16:	f6 fe       	sbrs	r15, 6
    4a18:	05 c0       	rjmp	.+10     	; 0x4a24 <vfprintf+0xbe>
    4a1a:	98 9c       	mul	r9, r8
    4a1c:	90 2c       	mov	r9, r0
    4a1e:	11 24       	eor	r1, r1
    4a20:	98 0e       	add	r9, r24
    4a22:	15 c0       	rjmp	.+42     	; 0x4a4e <vfprintf+0xe8>
    4a24:	e8 9c       	mul	r14, r8
    4a26:	e0 2c       	mov	r14, r0
    4a28:	11 24       	eor	r1, r1
    4a2a:	e8 0e       	add	r14, r24
    4a2c:	f0 e2       	ldi	r31, 0x20	; 32
    4a2e:	ff 2a       	or	r15, r31
    4a30:	0e c0       	rjmp	.+28     	; 0x4a4e <vfprintf+0xe8>
    4a32:	9e 32       	cpi	r25, 0x2E	; 46
    4a34:	29 f4       	brne	.+10     	; 0x4a40 <vfprintf+0xda>
    4a36:	f6 fc       	sbrc	r15, 6
    4a38:	6b c1       	rjmp	.+726    	; 0x4d10 <vfprintf+0x3aa>
    4a3a:	40 e4       	ldi	r20, 0x40	; 64
    4a3c:	f4 2a       	or	r15, r20
    4a3e:	07 c0       	rjmp	.+14     	; 0x4a4e <vfprintf+0xe8>
    4a40:	9c 36       	cpi	r25, 0x6C	; 108
    4a42:	19 f4       	brne	.+6      	; 0x4a4a <vfprintf+0xe4>
    4a44:	50 e8       	ldi	r21, 0x80	; 128
    4a46:	f5 2a       	or	r15, r21
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <vfprintf+0xe8>
    4a4a:	98 36       	cpi	r25, 0x68	; 104
    4a4c:	49 f4       	brne	.+18     	; 0x4a60 <vfprintf+0xfa>
    4a4e:	f2 01       	movw	r30, r4
    4a50:	23 fd       	sbrc	r18, 3
    4a52:	95 91       	lpm	r25, Z+
    4a54:	23 ff       	sbrs	r18, 3
    4a56:	91 91       	ld	r25, Z+
    4a58:	2f 01       	movw	r4, r30
    4a5a:	99 23       	and	r25, r25
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <vfprintf+0xfa>
    4a5e:	b8 cf       	rjmp	.-144    	; 0x49d0 <vfprintf+0x6a>
    4a60:	89 2f       	mov	r24, r25
    4a62:	85 54       	subi	r24, 0x45	; 69
    4a64:	83 30       	cpi	r24, 0x03	; 3
    4a66:	18 f0       	brcs	.+6      	; 0x4a6e <vfprintf+0x108>
    4a68:	80 52       	subi	r24, 0x20	; 32
    4a6a:	83 30       	cpi	r24, 0x03	; 3
    4a6c:	38 f4       	brcc	.+14     	; 0x4a7c <vfprintf+0x116>
    4a6e:	44 e0       	ldi	r20, 0x04	; 4
    4a70:	50 e0       	ldi	r21, 0x00	; 0
    4a72:	a4 0e       	add	r10, r20
    4a74:	b5 1e       	adc	r11, r21
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	59 83       	std	Y+1, r21	; 0x01
    4a7a:	0f c0       	rjmp	.+30     	; 0x4a9a <vfprintf+0x134>
    4a7c:	93 36       	cpi	r25, 0x63	; 99
    4a7e:	31 f0       	breq	.+12     	; 0x4a8c <vfprintf+0x126>
    4a80:	93 37       	cpi	r25, 0x73	; 115
    4a82:	79 f0       	breq	.+30     	; 0x4aa2 <vfprintf+0x13c>
    4a84:	93 35       	cpi	r25, 0x53	; 83
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <vfprintf+0x124>
    4a88:	56 c0       	rjmp	.+172    	; 0x4b36 <vfprintf+0x1d0>
    4a8a:	20 c0       	rjmp	.+64     	; 0x4acc <vfprintf+0x166>
    4a8c:	f5 01       	movw	r30, r10
    4a8e:	80 81       	ld	r24, Z
    4a90:	89 83       	std	Y+1, r24	; 0x01
    4a92:	42 e0       	ldi	r20, 0x02	; 2
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	a4 0e       	add	r10, r20
    4a98:	b5 1e       	adc	r11, r21
    4a9a:	61 01       	movw	r12, r2
    4a9c:	01 e0       	ldi	r16, 0x01	; 1
    4a9e:	10 e0       	ldi	r17, 0x00	; 0
    4aa0:	12 c0       	rjmp	.+36     	; 0x4ac6 <vfprintf+0x160>
    4aa2:	f5 01       	movw	r30, r10
    4aa4:	c0 80       	ld	r12, Z
    4aa6:	d1 80       	ldd	r13, Z+1	; 0x01
    4aa8:	f6 fc       	sbrc	r15, 6
    4aaa:	03 c0       	rjmp	.+6      	; 0x4ab2 <vfprintf+0x14c>
    4aac:	6f ef       	ldi	r22, 0xFF	; 255
    4aae:	7f ef       	ldi	r23, 0xFF	; 255
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <vfprintf+0x150>
    4ab2:	69 2d       	mov	r22, r9
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	42 e0       	ldi	r20, 0x02	; 2
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	a4 0e       	add	r10, r20
    4abc:	b5 1e       	adc	r11, r21
    4abe:	c6 01       	movw	r24, r12
    4ac0:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <strnlen>
    4ac4:	8c 01       	movw	r16, r24
    4ac6:	5f e7       	ldi	r21, 0x7F	; 127
    4ac8:	f5 22       	and	r15, r21
    4aca:	14 c0       	rjmp	.+40     	; 0x4af4 <vfprintf+0x18e>
    4acc:	f5 01       	movw	r30, r10
    4ace:	c0 80       	ld	r12, Z
    4ad0:	d1 80       	ldd	r13, Z+1	; 0x01
    4ad2:	f6 fc       	sbrc	r15, 6
    4ad4:	03 c0       	rjmp	.+6      	; 0x4adc <vfprintf+0x176>
    4ad6:	6f ef       	ldi	r22, 0xFF	; 255
    4ad8:	7f ef       	ldi	r23, 0xFF	; 255
    4ada:	02 c0       	rjmp	.+4      	; 0x4ae0 <vfprintf+0x17a>
    4adc:	69 2d       	mov	r22, r9
    4ade:	70 e0       	ldi	r23, 0x00	; 0
    4ae0:	42 e0       	ldi	r20, 0x02	; 2
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	a4 0e       	add	r10, r20
    4ae6:	b5 1e       	adc	r11, r21
    4ae8:	c6 01       	movw	r24, r12
    4aea:	0e 94 90 26 	call	0x4d20	; 0x4d20 <strnlen_P>
    4aee:	8c 01       	movw	r16, r24
    4af0:	50 e8       	ldi	r21, 0x80	; 128
    4af2:	f5 2a       	or	r15, r21
    4af4:	f3 fe       	sbrs	r15, 3
    4af6:	07 c0       	rjmp	.+14     	; 0x4b06 <vfprintf+0x1a0>
    4af8:	1a c0       	rjmp	.+52     	; 0x4b2e <vfprintf+0x1c8>
    4afa:	80 e2       	ldi	r24, 0x20	; 32
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	b3 01       	movw	r22, r6
    4b00:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4b04:	ea 94       	dec	r14
    4b06:	8e 2d       	mov	r24, r14
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	08 17       	cp	r16, r24
    4b0c:	19 07       	cpc	r17, r25
    4b0e:	a8 f3       	brcs	.-22     	; 0x4afa <vfprintf+0x194>
    4b10:	0e c0       	rjmp	.+28     	; 0x4b2e <vfprintf+0x1c8>
    4b12:	f6 01       	movw	r30, r12
    4b14:	f7 fc       	sbrc	r15, 7
    4b16:	85 91       	lpm	r24, Z+
    4b18:	f7 fe       	sbrs	r15, 7
    4b1a:	81 91       	ld	r24, Z+
    4b1c:	6f 01       	movw	r12, r30
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	b3 01       	movw	r22, r6
    4b22:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4b26:	e1 10       	cpse	r14, r1
    4b28:	ea 94       	dec	r14
    4b2a:	01 50       	subi	r16, 0x01	; 1
    4b2c:	10 40       	sbci	r17, 0x00	; 0
    4b2e:	01 15       	cp	r16, r1
    4b30:	11 05       	cpc	r17, r1
    4b32:	79 f7       	brne	.-34     	; 0x4b12 <vfprintf+0x1ac>
    4b34:	ea c0       	rjmp	.+468    	; 0x4d0a <vfprintf+0x3a4>
    4b36:	94 36       	cpi	r25, 0x64	; 100
    4b38:	11 f0       	breq	.+4      	; 0x4b3e <vfprintf+0x1d8>
    4b3a:	99 36       	cpi	r25, 0x69	; 105
    4b3c:	69 f5       	brne	.+90     	; 0x4b98 <vfprintf+0x232>
    4b3e:	f7 fe       	sbrs	r15, 7
    4b40:	08 c0       	rjmp	.+16     	; 0x4b52 <vfprintf+0x1ec>
    4b42:	f5 01       	movw	r30, r10
    4b44:	20 81       	ld	r18, Z
    4b46:	31 81       	ldd	r19, Z+1	; 0x01
    4b48:	42 81       	ldd	r20, Z+2	; 0x02
    4b4a:	53 81       	ldd	r21, Z+3	; 0x03
    4b4c:	84 e0       	ldi	r24, 0x04	; 4
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0a c0       	rjmp	.+20     	; 0x4b66 <vfprintf+0x200>
    4b52:	f5 01       	movw	r30, r10
    4b54:	80 81       	ld	r24, Z
    4b56:	91 81       	ldd	r25, Z+1	; 0x01
    4b58:	9c 01       	movw	r18, r24
    4b5a:	44 27       	eor	r20, r20
    4b5c:	37 fd       	sbrc	r19, 7
    4b5e:	40 95       	com	r20
    4b60:	54 2f       	mov	r21, r20
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	a8 0e       	add	r10, r24
    4b68:	b9 1e       	adc	r11, r25
    4b6a:	9f e6       	ldi	r25, 0x6F	; 111
    4b6c:	f9 22       	and	r15, r25
    4b6e:	57 ff       	sbrs	r21, 7
    4b70:	09 c0       	rjmp	.+18     	; 0x4b84 <vfprintf+0x21e>
    4b72:	50 95       	com	r21
    4b74:	40 95       	com	r20
    4b76:	30 95       	com	r19
    4b78:	21 95       	neg	r18
    4b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7c:	4f 4f       	sbci	r20, 0xFF	; 255
    4b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b80:	e0 e8       	ldi	r30, 0x80	; 128
    4b82:	fe 2a       	or	r15, r30
    4b84:	ca 01       	movw	r24, r20
    4b86:	b9 01       	movw	r22, r18
    4b88:	a1 01       	movw	r20, r2
    4b8a:	2a e0       	ldi	r18, 0x0A	; 10
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__ultoa_invert>
    4b92:	d8 2e       	mov	r13, r24
    4b94:	d2 18       	sub	r13, r2
    4b96:	40 c0       	rjmp	.+128    	; 0x4c18 <vfprintf+0x2b2>
    4b98:	95 37       	cpi	r25, 0x75	; 117
    4b9a:	29 f4       	brne	.+10     	; 0x4ba6 <vfprintf+0x240>
    4b9c:	1f 2d       	mov	r17, r15
    4b9e:	1f 7e       	andi	r17, 0xEF	; 239
    4ba0:	2a e0       	ldi	r18, 0x0A	; 10
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	1d c0       	rjmp	.+58     	; 0x4be0 <vfprintf+0x27a>
    4ba6:	1f 2d       	mov	r17, r15
    4ba8:	19 7f       	andi	r17, 0xF9	; 249
    4baa:	9f 36       	cpi	r25, 0x6F	; 111
    4bac:	61 f0       	breq	.+24     	; 0x4bc6 <vfprintf+0x260>
    4bae:	90 37       	cpi	r25, 0x70	; 112
    4bb0:	20 f4       	brcc	.+8      	; 0x4bba <vfprintf+0x254>
    4bb2:	98 35       	cpi	r25, 0x58	; 88
    4bb4:	09 f0       	breq	.+2      	; 0x4bb8 <vfprintf+0x252>
    4bb6:	ac c0       	rjmp	.+344    	; 0x4d10 <vfprintf+0x3aa>
    4bb8:	0f c0       	rjmp	.+30     	; 0x4bd8 <vfprintf+0x272>
    4bba:	90 37       	cpi	r25, 0x70	; 112
    4bbc:	39 f0       	breq	.+14     	; 0x4bcc <vfprintf+0x266>
    4bbe:	98 37       	cpi	r25, 0x78	; 120
    4bc0:	09 f0       	breq	.+2      	; 0x4bc4 <vfprintf+0x25e>
    4bc2:	a6 c0       	rjmp	.+332    	; 0x4d10 <vfprintf+0x3aa>
    4bc4:	04 c0       	rjmp	.+8      	; 0x4bce <vfprintf+0x268>
    4bc6:	28 e0       	ldi	r18, 0x08	; 8
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	0a c0       	rjmp	.+20     	; 0x4be0 <vfprintf+0x27a>
    4bcc:	10 61       	ori	r17, 0x10	; 16
    4bce:	14 fd       	sbrc	r17, 4
    4bd0:	14 60       	ori	r17, 0x04	; 4
    4bd2:	20 e1       	ldi	r18, 0x10	; 16
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	04 c0       	rjmp	.+8      	; 0x4be0 <vfprintf+0x27a>
    4bd8:	14 fd       	sbrc	r17, 4
    4bda:	16 60       	ori	r17, 0x06	; 6
    4bdc:	20 e1       	ldi	r18, 0x10	; 16
    4bde:	32 e0       	ldi	r19, 0x02	; 2
    4be0:	17 ff       	sbrs	r17, 7
    4be2:	08 c0       	rjmp	.+16     	; 0x4bf4 <vfprintf+0x28e>
    4be4:	f5 01       	movw	r30, r10
    4be6:	60 81       	ld	r22, Z
    4be8:	71 81       	ldd	r23, Z+1	; 0x01
    4bea:	82 81       	ldd	r24, Z+2	; 0x02
    4bec:	93 81       	ldd	r25, Z+3	; 0x03
    4bee:	44 e0       	ldi	r20, 0x04	; 4
    4bf0:	50 e0       	ldi	r21, 0x00	; 0
    4bf2:	08 c0       	rjmp	.+16     	; 0x4c04 <vfprintf+0x29e>
    4bf4:	f5 01       	movw	r30, r10
    4bf6:	80 81       	ld	r24, Z
    4bf8:	91 81       	ldd	r25, Z+1	; 0x01
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	42 e0       	ldi	r20, 0x02	; 2
    4c02:	50 e0       	ldi	r21, 0x00	; 0
    4c04:	a4 0e       	add	r10, r20
    4c06:	b5 1e       	adc	r11, r21
    4c08:	a1 01       	movw	r20, r2
    4c0a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__ultoa_invert>
    4c0e:	d8 2e       	mov	r13, r24
    4c10:	d2 18       	sub	r13, r2
    4c12:	8f e7       	ldi	r24, 0x7F	; 127
    4c14:	f8 2e       	mov	r15, r24
    4c16:	f1 22       	and	r15, r17
    4c18:	f6 fe       	sbrs	r15, 6
    4c1a:	0b c0       	rjmp	.+22     	; 0x4c32 <vfprintf+0x2cc>
    4c1c:	5e ef       	ldi	r21, 0xFE	; 254
    4c1e:	f5 22       	and	r15, r21
    4c20:	d9 14       	cp	r13, r9
    4c22:	38 f4       	brcc	.+14     	; 0x4c32 <vfprintf+0x2cc>
    4c24:	f4 fe       	sbrs	r15, 4
    4c26:	07 c0       	rjmp	.+14     	; 0x4c36 <vfprintf+0x2d0>
    4c28:	f2 fc       	sbrc	r15, 2
    4c2a:	05 c0       	rjmp	.+10     	; 0x4c36 <vfprintf+0x2d0>
    4c2c:	8f ee       	ldi	r24, 0xEF	; 239
    4c2e:	f8 22       	and	r15, r24
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <vfprintf+0x2d0>
    4c32:	1d 2d       	mov	r17, r13
    4c34:	01 c0       	rjmp	.+2      	; 0x4c38 <vfprintf+0x2d2>
    4c36:	19 2d       	mov	r17, r9
    4c38:	f4 fe       	sbrs	r15, 4
    4c3a:	0d c0       	rjmp	.+26     	; 0x4c56 <vfprintf+0x2f0>
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	ed 0d       	add	r30, r13
    4c40:	f1 1d       	adc	r31, r1
    4c42:	80 81       	ld	r24, Z
    4c44:	80 33       	cpi	r24, 0x30	; 48
    4c46:	19 f4       	brne	.+6      	; 0x4c4e <vfprintf+0x2e8>
    4c48:	99 ee       	ldi	r25, 0xE9	; 233
    4c4a:	f9 22       	and	r15, r25
    4c4c:	08 c0       	rjmp	.+16     	; 0x4c5e <vfprintf+0x2f8>
    4c4e:	1f 5f       	subi	r17, 0xFF	; 255
    4c50:	f2 fe       	sbrs	r15, 2
    4c52:	05 c0       	rjmp	.+10     	; 0x4c5e <vfprintf+0x2f8>
    4c54:	03 c0       	rjmp	.+6      	; 0x4c5c <vfprintf+0x2f6>
    4c56:	8f 2d       	mov	r24, r15
    4c58:	86 78       	andi	r24, 0x86	; 134
    4c5a:	09 f0       	breq	.+2      	; 0x4c5e <vfprintf+0x2f8>
    4c5c:	1f 5f       	subi	r17, 0xFF	; 255
    4c5e:	0f 2d       	mov	r16, r15
    4c60:	f3 fc       	sbrc	r15, 3
    4c62:	14 c0       	rjmp	.+40     	; 0x4c8c <vfprintf+0x326>
    4c64:	f0 fe       	sbrs	r15, 0
    4c66:	0f c0       	rjmp	.+30     	; 0x4c86 <vfprintf+0x320>
    4c68:	1e 15       	cp	r17, r14
    4c6a:	10 f0       	brcs	.+4      	; 0x4c70 <vfprintf+0x30a>
    4c6c:	9d 2c       	mov	r9, r13
    4c6e:	0b c0       	rjmp	.+22     	; 0x4c86 <vfprintf+0x320>
    4c70:	9d 2c       	mov	r9, r13
    4c72:	9e 0c       	add	r9, r14
    4c74:	91 1a       	sub	r9, r17
    4c76:	1e 2d       	mov	r17, r14
    4c78:	06 c0       	rjmp	.+12     	; 0x4c86 <vfprintf+0x320>
    4c7a:	80 e2       	ldi	r24, 0x20	; 32
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	b3 01       	movw	r22, r6
    4c80:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4c84:	1f 5f       	subi	r17, 0xFF	; 255
    4c86:	1e 15       	cp	r17, r14
    4c88:	c0 f3       	brcs	.-16     	; 0x4c7a <vfprintf+0x314>
    4c8a:	04 c0       	rjmp	.+8      	; 0x4c94 <vfprintf+0x32e>
    4c8c:	1e 15       	cp	r17, r14
    4c8e:	10 f4       	brcc	.+4      	; 0x4c94 <vfprintf+0x32e>
    4c90:	e1 1a       	sub	r14, r17
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <vfprintf+0x330>
    4c94:	ee 24       	eor	r14, r14
    4c96:	04 ff       	sbrs	r16, 4
    4c98:	0f c0       	rjmp	.+30     	; 0x4cb8 <vfprintf+0x352>
    4c9a:	80 e3       	ldi	r24, 0x30	; 48
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	b3 01       	movw	r22, r6
    4ca0:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4ca4:	02 ff       	sbrs	r16, 2
    4ca6:	1d c0       	rjmp	.+58     	; 0x4ce2 <vfprintf+0x37c>
    4ca8:	01 fd       	sbrc	r16, 1
    4caa:	03 c0       	rjmp	.+6      	; 0x4cb2 <vfprintf+0x34c>
    4cac:	88 e7       	ldi	r24, 0x78	; 120
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	0e c0       	rjmp	.+28     	; 0x4cce <vfprintf+0x368>
    4cb2:	88 e5       	ldi	r24, 0x58	; 88
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	0b c0       	rjmp	.+22     	; 0x4cce <vfprintf+0x368>
    4cb8:	80 2f       	mov	r24, r16
    4cba:	86 78       	andi	r24, 0x86	; 134
    4cbc:	91 f0       	breq	.+36     	; 0x4ce2 <vfprintf+0x37c>
    4cbe:	01 ff       	sbrs	r16, 1
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <vfprintf+0x360>
    4cc2:	8b e2       	ldi	r24, 0x2B	; 43
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <vfprintf+0x362>
    4cc6:	80 e2       	ldi	r24, 0x20	; 32
    4cc8:	f7 fc       	sbrc	r15, 7
    4cca:	8d e2       	ldi	r24, 0x2D	; 45
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	b3 01       	movw	r22, r6
    4cd0:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4cd4:	06 c0       	rjmp	.+12     	; 0x4ce2 <vfprintf+0x37c>
    4cd6:	80 e3       	ldi	r24, 0x30	; 48
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	b3 01       	movw	r22, r6
    4cdc:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4ce0:	9a 94       	dec	r9
    4ce2:	d9 14       	cp	r13, r9
    4ce4:	c0 f3       	brcs	.-16     	; 0x4cd6 <vfprintf+0x370>
    4ce6:	da 94       	dec	r13
    4ce8:	f1 01       	movw	r30, r2
    4cea:	ed 0d       	add	r30, r13
    4cec:	f1 1d       	adc	r31, r1
    4cee:	80 81       	ld	r24, Z
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	b3 01       	movw	r22, r6
    4cf4:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4cf8:	dd 20       	and	r13, r13
    4cfa:	a9 f7       	brne	.-22     	; 0x4ce6 <vfprintf+0x380>
    4cfc:	06 c0       	rjmp	.+12     	; 0x4d0a <vfprintf+0x3a4>
    4cfe:	80 e2       	ldi	r24, 0x20	; 32
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	b3 01       	movw	r22, r6
    4d04:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <fputc>
    4d08:	ea 94       	dec	r14
    4d0a:	ee 20       	and	r14, r14
    4d0c:	c1 f7       	brne	.-16     	; 0x4cfe <vfprintf+0x398>
    4d0e:	43 ce       	rjmp	.-890    	; 0x4996 <vfprintf+0x30>
    4d10:	f3 01       	movw	r30, r6
    4d12:	66 81       	ldd	r22, Z+6	; 0x06
    4d14:	77 81       	ldd	r23, Z+7	; 0x07
    4d16:	cb 01       	movw	r24, r22
    4d18:	2b 96       	adiw	r28, 0x0b	; 11
    4d1a:	e2 e1       	ldi	r30, 0x12	; 18
    4d1c:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__epilogue_restores__>

00004d20 <strnlen_P>:
    4d20:	fc 01       	movw	r30, r24
    4d22:	05 90       	lpm	r0, Z+
    4d24:	61 50       	subi	r22, 0x01	; 1
    4d26:	70 40       	sbci	r23, 0x00	; 0
    4d28:	01 10       	cpse	r0, r1
    4d2a:	d8 f7       	brcc	.-10     	; 0x4d22 <strnlen_P+0x2>
    4d2c:	80 95       	com	r24
    4d2e:	90 95       	com	r25
    4d30:	8e 0f       	add	r24, r30
    4d32:	9f 1f       	adc	r25, r31
    4d34:	08 95       	ret

00004d36 <strnlen>:
    4d36:	fc 01       	movw	r30, r24
    4d38:	61 50       	subi	r22, 0x01	; 1
    4d3a:	70 40       	sbci	r23, 0x00	; 0
    4d3c:	01 90       	ld	r0, Z+
    4d3e:	01 10       	cpse	r0, r1
    4d40:	d8 f7       	brcc	.-10     	; 0x4d38 <strnlen+0x2>
    4d42:	80 95       	com	r24
    4d44:	90 95       	com	r25
    4d46:	8e 0f       	add	r24, r30
    4d48:	9f 1f       	adc	r25, r31
    4d4a:	08 95       	ret

00004d4c <fputc>:
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	8c 01       	movw	r16, r24
    4d56:	eb 01       	movw	r28, r22
    4d58:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5a:	81 ff       	sbrs	r24, 1
    4d5c:	1b c0       	rjmp	.+54     	; 0x4d94 <fputc+0x48>
    4d5e:	82 ff       	sbrs	r24, 2
    4d60:	0d c0       	rjmp	.+26     	; 0x4d7c <fputc+0x30>
    4d62:	2e 81       	ldd	r18, Y+6	; 0x06
    4d64:	3f 81       	ldd	r19, Y+7	; 0x07
    4d66:	8c 81       	ldd	r24, Y+4	; 0x04
    4d68:	9d 81       	ldd	r25, Y+5	; 0x05
    4d6a:	28 17       	cp	r18, r24
    4d6c:	39 07       	cpc	r19, r25
    4d6e:	64 f4       	brge	.+24     	; 0x4d88 <fputc+0x3c>
    4d70:	e8 81       	ld	r30, Y
    4d72:	f9 81       	ldd	r31, Y+1	; 0x01
    4d74:	01 93       	st	Z+, r16
    4d76:	f9 83       	std	Y+1, r31	; 0x01
    4d78:	e8 83       	st	Y, r30
    4d7a:	06 c0       	rjmp	.+12     	; 0x4d88 <fputc+0x3c>
    4d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    4d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    4d80:	80 2f       	mov	r24, r16
    4d82:	09 95       	icall
    4d84:	89 2b       	or	r24, r25
    4d86:	31 f4       	brne	.+12     	; 0x4d94 <fputc+0x48>
    4d88:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d8c:	01 96       	adiw	r24, 0x01	; 1
    4d8e:	9f 83       	std	Y+7, r25	; 0x07
    4d90:	8e 83       	std	Y+6, r24	; 0x06
    4d92:	02 c0       	rjmp	.+4      	; 0x4d98 <fputc+0x4c>
    4d94:	0f ef       	ldi	r16, 0xFF	; 255
    4d96:	1f ef       	ldi	r17, 0xFF	; 255
    4d98:	c8 01       	movw	r24, r16
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	08 95       	ret

00004da4 <__ultoa_invert>:
    4da4:	fa 01       	movw	r30, r20
    4da6:	aa 27       	eor	r26, r26
    4da8:	28 30       	cpi	r18, 0x08	; 8
    4daa:	51 f1       	breq	.+84     	; 0x4e00 <__ultoa_invert+0x5c>
    4dac:	20 31       	cpi	r18, 0x10	; 16
    4dae:	81 f1       	breq	.+96     	; 0x4e10 <__ultoa_invert+0x6c>
    4db0:	e8 94       	clt
    4db2:	6f 93       	push	r22
    4db4:	6e 7f       	andi	r22, 0xFE	; 254
    4db6:	6e 5f       	subi	r22, 0xFE	; 254
    4db8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dba:	8f 4f       	sbci	r24, 0xFF	; 255
    4dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dbe:	af 4f       	sbci	r26, 0xFF	; 255
    4dc0:	b1 e0       	ldi	r27, 0x01	; 1
    4dc2:	3e d0       	rcall	.+124    	; 0x4e40 <__ultoa_invert+0x9c>
    4dc4:	b4 e0       	ldi	r27, 0x04	; 4
    4dc6:	3c d0       	rcall	.+120    	; 0x4e40 <__ultoa_invert+0x9c>
    4dc8:	67 0f       	add	r22, r23
    4dca:	78 1f       	adc	r23, r24
    4dcc:	89 1f       	adc	r24, r25
    4dce:	9a 1f       	adc	r25, r26
    4dd0:	a1 1d       	adc	r26, r1
    4dd2:	68 0f       	add	r22, r24
    4dd4:	79 1f       	adc	r23, r25
    4dd6:	8a 1f       	adc	r24, r26
    4dd8:	91 1d       	adc	r25, r1
    4dda:	a1 1d       	adc	r26, r1
    4ddc:	6a 0f       	add	r22, r26
    4dde:	71 1d       	adc	r23, r1
    4de0:	81 1d       	adc	r24, r1
    4de2:	91 1d       	adc	r25, r1
    4de4:	a1 1d       	adc	r26, r1
    4de6:	20 d0       	rcall	.+64     	; 0x4e28 <__ultoa_invert+0x84>
    4de8:	09 f4       	brne	.+2      	; 0x4dec <__ultoa_invert+0x48>
    4dea:	68 94       	set
    4dec:	3f 91       	pop	r19
    4dee:	2a e0       	ldi	r18, 0x0A	; 10
    4df0:	26 9f       	mul	r18, r22
    4df2:	11 24       	eor	r1, r1
    4df4:	30 19       	sub	r19, r0
    4df6:	30 5d       	subi	r19, 0xD0	; 208
    4df8:	31 93       	st	Z+, r19
    4dfa:	de f6       	brtc	.-74     	; 0x4db2 <__ultoa_invert+0xe>
    4dfc:	cf 01       	movw	r24, r30
    4dfe:	08 95       	ret
    4e00:	46 2f       	mov	r20, r22
    4e02:	47 70       	andi	r20, 0x07	; 7
    4e04:	40 5d       	subi	r20, 0xD0	; 208
    4e06:	41 93       	st	Z+, r20
    4e08:	b3 e0       	ldi	r27, 0x03	; 3
    4e0a:	0f d0       	rcall	.+30     	; 0x4e2a <__ultoa_invert+0x86>
    4e0c:	c9 f7       	brne	.-14     	; 0x4e00 <__ultoa_invert+0x5c>
    4e0e:	f6 cf       	rjmp	.-20     	; 0x4dfc <__ultoa_invert+0x58>
    4e10:	46 2f       	mov	r20, r22
    4e12:	4f 70       	andi	r20, 0x0F	; 15
    4e14:	40 5d       	subi	r20, 0xD0	; 208
    4e16:	4a 33       	cpi	r20, 0x3A	; 58
    4e18:	18 f0       	brcs	.+6      	; 0x4e20 <__ultoa_invert+0x7c>
    4e1a:	49 5d       	subi	r20, 0xD9	; 217
    4e1c:	31 fd       	sbrc	r19, 1
    4e1e:	40 52       	subi	r20, 0x20	; 32
    4e20:	41 93       	st	Z+, r20
    4e22:	02 d0       	rcall	.+4      	; 0x4e28 <__ultoa_invert+0x84>
    4e24:	a9 f7       	brne	.-22     	; 0x4e10 <__ultoa_invert+0x6c>
    4e26:	ea cf       	rjmp	.-44     	; 0x4dfc <__ultoa_invert+0x58>
    4e28:	b4 e0       	ldi	r27, 0x04	; 4
    4e2a:	a6 95       	lsr	r26
    4e2c:	97 95       	ror	r25
    4e2e:	87 95       	ror	r24
    4e30:	77 95       	ror	r23
    4e32:	67 95       	ror	r22
    4e34:	ba 95       	dec	r27
    4e36:	c9 f7       	brne	.-14     	; 0x4e2a <__ultoa_invert+0x86>
    4e38:	00 97       	sbiw	r24, 0x00	; 0
    4e3a:	61 05       	cpc	r22, r1
    4e3c:	71 05       	cpc	r23, r1
    4e3e:	08 95       	ret
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	0a 2e       	mov	r0, r26
    4e46:	06 94       	lsr	r0
    4e48:	57 95       	ror	r21
    4e4a:	47 95       	ror	r20
    4e4c:	37 95       	ror	r19
    4e4e:	27 95       	ror	r18
    4e50:	ba 95       	dec	r27
    4e52:	c9 f7       	brne	.-14     	; 0x4e46 <__ultoa_invert+0xa2>
    4e54:	62 0f       	add	r22, r18
    4e56:	73 1f       	adc	r23, r19
    4e58:	84 1f       	adc	r24, r20
    4e5a:	95 1f       	adc	r25, r21
    4e5c:	a0 1d       	adc	r26, r0
    4e5e:	08 95       	ret

00004e60 <_exit>:
    4e60:	f8 94       	cli

00004e62 <__stop_program>:
    4e62:	ff cf       	rjmp	.-2      	; 0x4e62 <__stop_program>
